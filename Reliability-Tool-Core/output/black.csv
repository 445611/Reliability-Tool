Created at;Closed at;Updated at;State;Labels;Comments;Number;Title;Url;Html url;Body;User name;User email;Milestone created at;Milestone due on;Milestone descrtiption;Milestone state;Milestone title;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 21:02;21.3.2018 3:22;21.3.2018 3:22;closed;[bug, unstable formatting];1;1;Imports following standalone comments sometimes produce non-deterministic styling;https://api.github.com/repos/ambv/black/issues/1;https://github.com/ambv/black/issues/1;This converges to a stable formatting afterwards but is unacceptable from a usability standpoint.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 21:03;17.4.2018 21:52;17.4.2018 21:52;closed;[bug, lib2to3];0;2;Cannot parse `f(*[] or [])`;https://api.github.com/repos/ambv/black/issues/2;https://github.com/ambv/black/issues/2;;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 21:04;9.4.2018 23:36;9.4.2018 23:36;closed;[bug, lib2to3];0;3;"Cannot parse `rf""""`";https://api.github.com/repos/ambv/black/issues/3;https://github.com/ambv/black/issues/3;;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 21:05;11.4.2018 23:56;11.4.2018 23:56;closed;[enhancement];0;4;Automatically add/remove parentheses around if/elif/while/imports;https://api.github.com/repos/ambv/black/issues/4;https://github.com/ambv/black/issues/4;This will improve formatting quite a bit.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 21:05;24.3.2018 1:16;24.3.2018 1:16;closed;[enhancement];2;5;`# fmt: off` / `# fmt: on` handling;https://api.github.com/repos/ambv/black/issues/5;https://github.com/ambv/black/issues/5;This is documented but not actually implemented yet.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 23:11;15.3.2018 19:22;15.3.2018 20:55;closed;[];3;6;relative imports convert `. .` to `..`;https://api.github.com/repos/ambv/black/issues/6;https://github.com/ambv/black/issues/6;Excited about the effort - thanks for kicking this off! Hopefully of what yapf once dreamed    One quick issue when scanning the output: is this intended?    ```  # existing  from ..convert import from_iris    # black  from . .convert import from_iris  ```;max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 23:22;15.3.2018 19:29;15.3.2018 19:29;closed;[];1;7;Unneeded spaces added after open parens?;https://api.github.com/repos/ambv/black/issues/7;https://github.com/ambv/black/issues/7;Weirdness around the space after the parentheses. Also weird because I'd have thought the existing line was fine, and fit into the 79 characters I passed as an option    ```python  # existing  -    new_coord_names = (coord_names | set(vars_to_create)) - set(vars_to_remove)  -    # black  +    new_coord_names = ( coord_names | set(vars_to_create)) - set(  +        vars_to_remove  +    )  ```;max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.3.2018 23:32;16.3.2018 3:36;16.3.2018 3:40;closed;[];8;8;Python 3.5- compatibility issue;https://api.github.com/repos/ambv/black/issues/8;https://github.com/ambv/black/issues/8;```python      …      **kwargs,  )  ```;kennethreitz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 2:45;16.3.2018 0:03;16.3.2018 0:03;closed;[enhancement];3;9;Add a --check flag;https://api.github.com/repos/ambv/black/issues/9;https://github.com/ambv/black/issues/9;For continuous integration, it would be helpful to have a `--check` flag that returns a non-zero status code without changing the source files.;jtdoepke;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 7:41;15.3.2018 19:09;15.3.2018 20:20;closed;[];2;10;Add Python 3-only classifier;https://api.github.com/repos/ambv/black/issues/10;https://github.com/ambv/black/pull/10;https://pypi.python.org/pypi?%3Aaction=list_classifiers;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 8:11;15.3.2018 19:07;15.3.2018 20:19;closed;[];1;11;README: Use HTTPS;https://api.github.com/repos/ambv/black/issues/11;https://github.com/ambv/black/pull/11;;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:10;15.3.2018 18:57;15.3.2018 20:19;closed;[];1;12;Update code formatting;https://api.github.com/repos/ambv/black/issues/12;https://github.com/ambv/black/pull/12;!XXX doesn't render as code formatting, XXX does.    Before:    ![image](https://user-images.githubusercontent.com/1324225/37451090-19dc72ba-2839-11e8-8449-edf1b678b2e0.png)    After:    ![image](https://user-images.githubusercontent.com/1324225/37451083-11b0d2d4-2839-11e8-8bf7-e5481b163469.png)  ;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:25;15.3.2018 19:22;15.3.2018 19:22;closed;[];1;13;Weird handling of 'from . import';https://api.github.com/repos/ambv/black/issues/13;https://github.com/ambv/black/issues/13;Possibly related to #6, this strange removal of space:    ```diff  -from . import hazmat  +from .import hazmat  ```;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:26;15.3.2018 20:53;15.3.2018 21:10;closed;[];3;14;Adds E251 unexpected space after equals;https://api.github.com/repos/ambv/black/issues/14;https://github.com/ambv/black/issues/14;macOS High Sierra  Python 3.6.4  black==18.3a0    ```python  # existing  def __init__(params={}):      pass    #black  def __init__(params= {}):      pass  ```    ```console  # existing  $ pycodestyle 1.py    # black  $ pycodestyle 2.py  2.py:1:21: E251 unexpected spaces around keyword / parameter equals  ```  ;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:27;15.3.2018 22:55;15.3.2018 22:58;closed;[];1;15;~ is an unary operator that shouldn't have a space after it;https://api.github.com/repos/ambv/black/issues/15;https://github.com/ambv/black/issues/15;This change looks wrong to me:  ```diff  -            if flags & ~select.EPOLLIN and waiters.write_task is not None:  +            if flags & ~ select.EPOLLIN and waiters.write_task is not None:  ```;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:31;24.4.2018 1:09;24.4.2018 1:09;closed;[comments, design];6;16;Shouldn't change the indentation of comments;https://api.github.com/repos/ambv/black/issues/16;https://github.com/ambv/black/issues/16;This kind of changes the meaning of the comment a lot :-).    ```diff               else:                   timeout = 0  -                # and loop back to the start  +        # and loop back to the start           for event in events:  ```    (Actual code [is here](https://github.com/python-trio/trio/blob/aee2676fd5096daf2849db9756242a30e0aa1f30/trio/_core/_io_kqueue.py#L45-L53), for reference.);njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:32;15.3.2018 20:53;15.3.2018 20:54;closed;[];3;17;Another strange space insertion;https://api.github.com/repos/ambv/black/issues/17;https://github.com/ambv/black/issues/17;```diff  -        def socket_ready(what, sock, result=_core.Value(None)):  +        def socket_ready(what, sock, result= _core.Value(None)):  ```;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:34;17.3.2018 9:00;17.3.2018 9:01;closed;[bug, unstable formatting];1;18;Black produced different code on the second pass of the formatter;https://api.github.com/repos/ambv/black/issues/18;https://github.com/ambv/black/issues/18;"```console  $ cat setup.py  ```  ```python  #!/usr/bin/env python  from setuptools import find_packages, setup      setup(      name=""pylast"",      version=""2.2.0.dev0"",      author=""Amr Hassan <amr.hassan@gmail.com> and Contributors"",      install_requires=['six'],      tests_require=['mock', 'pytest', 'coverage', 'pycodestyle', 'pyyaml',                     'pyflakes', 'flaky'],      description=""A Python interface to Last.fm and Libre.fm"",      author_email=""amr.hassan@gmail.com"",      url=""https://github.com/pylast/pylast"",      classifiers=[          ""Development Status :: 5 - Production/Stable"",          ""License :: OSI Approved :: Apache Software License"",          ""Topic :: Internet"",          ""Topic :: Multimedia :: Sound/Audio"",          ""Topic :: Software Development :: Libraries :: Python Modules"",          ""Programming Language :: Python :: 2"",          ""Programming Language :: Python :: 2.7"",          ""Programming Language :: Python :: 3"",          ""Programming Language :: Python :: 3.4"",          ""Programming Language :: Python :: 3.5"",          ""Programming Language :: Python :: 3.6"",          ""Programming Language :: Python :: Implementation :: CPython"",          ""Programming Language :: Python :: Implementation :: PyPy"",      ],      python_requires='>=2.7.10, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',      keywords=[""Last.fm"", ""music"", ""scrobble"", ""scrobbling""],      packages=find_packages(exclude=('tests*',)),      license=""Apache2""  )    # End of file  ```  ```console  $ black setup.py  error: cannot format setup.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /var/folders/kt/j77sf4_n6fnbx6pg199rbx700000gn/T/blk_d33mlhef.log  $ cat /var/folders/kt/j77sf4_n6fnbx6pg199rbx700000gn/T/blk_d33mlhef.log  ```  ```diff  --- source  +++ first pass  @@ -1,16 +1,16 @@   #!/usr/bin/env python   from setuptools import find_packages, setup  -      setup(       name=""pylast"",       version=""2.2.0.dev0"",       author=""Amr Hassan <amr.hassan@gmail.com> and Contributors"",       install_requires=['six'],  -    tests_require=['mock', 'pytest', 'coverage', 'pycodestyle', 'pyyaml',  -                   'pyflakes', 'flaky'],  +    tests_require=[  +        'mock', 'pytest', 'coverage', 'pycodestyle', 'pyyaml', 'pyflakes', 'flaky'  +    ],       description=""A Python interface to Last.fm and Libre.fm"",       author_email=""amr.hassan@gmail.com"",       url=""https://github.com/pylast/pylast"",       classifiers=[           ""Development Status :: 5 - Production/Stable"",  @@ -28,10 +28,9 @@           ""Programming Language :: Python :: Implementation :: PyPy"",       ],       python_requires='>=2.7.10, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',       keywords=[""Last.fm"", ""music"", ""scrobble"", ""scrobbling""],       packages=find_packages(exclude=('tests*',)),  -    license=""Apache2""  +    license=""Apache2"",   )  -   # End of file       --- first pass  +++ second pass  @@ -29,8 +29,7 @@       ],       python_requires='>=2.7.10, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',       keywords=[""Last.fm"", ""music"", ""scrobble"", ""scrobbling""],       packages=find_packages(exclude=('tests*',)),       license=""Apache2"",  -)  -# End of file  +)  # End of file         ```";hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 9:58;21.3.2018 2:58;21.3.2018 2:58;closed;[design];5;19;Opinions: do not remove logical block new line inside of functions;https://api.github.com/repos/ambv/black/issues/19;https://github.com/ambv/black/issues/19;Just ran black on one of the repos I have. While many things are fine or OK, I have several business logic files where only new lines were removed between logical blocks inside of functions.    Even by looking at black's own codebase it would benefit from newline separation inside of some functions, like this one: https://github.com/ambv/black/blob/master/black.py#L1188    Wall of text is not making something more readable, especially for people with sight disabilities. But maybe I'm missing some trend in Python community, so would like to hear others' opinions on this.;Sapphire64;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 10:00;21.3.2018 2:58;21.3.2018 2:58;closed;[bug, lib2to3];1;20;error: cannot format hoge.py: Cannot parse: 1:4: def async():;https://api.github.com/repos/ambv/black/issues/20;https://github.com/ambv/black/issues/20;In Python <3.7 `async` can be used as an identifier, but black errors if it is used.    Sample code:    ```python  def async(): ...  ```  ;ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 10:06;17.3.2018 5:45;17.3.2018 5:52;closed;[bug, good first issue];3;21;black introduces PEP 8 violation: operators should go at beginning of lines when possible;https://api.github.com/repos/ambv/black/issues/21;https://github.com/ambv/black/issues/21;"```   @contextmanager   def ki_manager(deliver_cb, restrict_keyboard_interrupt_to_checkpoints):       if (  -        threading.current_thread() != threading.main_thread()  -        or signal.getsignal(signal.SIGINT) != signal.default_int_handler  +        threading.current_thread() != threading.main_thread() or  +        signal.getsignal(signal.SIGINT) != signal.default_int_handler       ):  ```    Ok, technically PEP 8 waffles a bit b/c it used to recommend the other version. But these days it says that operator-at-beginning ""usually results in more readable code"" and ""For new code [operator-at-beginning] style is suggested"".  ";njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 10:26;30.3.2018 6:11;30.3.2018 6:56;closed;[bug, comments];4;22;Standalone comments inside nested bracketed expressions block the expression from wrapping;https://api.github.com/repos/ambv/black/issues/22;https://github.com/ambv/black/issues/22;This is... not what I expected black to do :-)    ```diff       # Capture each of the exceptions in the MultiError along with each of their causes and contexts       if isinstance(exc_value, MultiError):           embedded = []           for exc in exc_value.exceptions:               if exc not in _seen:                   embedded.append(  -                    traceback.TracebackException.from_exception(  -                        exc,  -                        limit=limit,  -                        lookup_lines=lookup_lines,  -                        capture_locals=capture_locals,  -                        # copy the set of _seen exceptions so that duplicates  -                        # shared between sub-exceptions are not omitted  -                        _seen=set(_seen)  -                    )  +                    traceback.TracebackException.from_exception(exc, limit=limit, lookup_lines=lookup_lines, capture_locals=capture_locals, _seen=set(_seen))  +                    # copy the set of _seen exceptions so that duplicates  +                    # shared between sub-exceptions are not omitted                   )  ```;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 10:44;16.3.2018 3:23;16.3.2018 3:24;closed;[];2;23;Long lines in dictionary comprehensions break due to trailing comma;https://api.github.com/repos/ambv/black/issues/23;https://github.com/ambv/black/issues/23;This input:  ```python  {k: v for k, v in this_is_a_very_long_variable_which_will_cause_a_trailing_comma_which_breaks_the_comprehension}  ```    becomes    ```python  {      k: v      for k,      v in this_is_a_very_long_variable_which_will_cause_a_trailing_comma_which_breaks_the_comprehension,  }  ```    Note the trailing comma after `...comprehension`, this is not allowed in dictionary comprehensions.;ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 12:13;15.3.2018 13:19;15.3.2018 19:08;closed;[];0;24;add python_requires to setup.py;https://api.github.com/repos/ambv/black/issues/24;https://github.com/ambv/black/pull/24;This makes Black play nicer with tools like Pipenv :);kennethreitz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 17:58;19.3.2018 19:07;20.3.2018 0:54;closed;[];7;25;Add piping from stdin to stdout with a -;https://api.github.com/repos/ambv/black/issues/25;https://github.com/ambv/black/pull/25;Being able to format code by piping it through the formatter makes it much easier to integrate with tools like google/vim-codefmt or Chiel92/vim-autoformat.    My Python is okay-but-not-fantastic and I'm not toally happy with the way I've modified main(), and am not sure how best to test this. Happy to put the work into improving the PR, though.;treuherz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 21:16;null;16.10.2018 21:59;open;[enhancement, help wanted];12;26;Merge implicitly concatenated string literals that fit on one line;https://api.github.com/repos/ambv/black/issues/26;https://github.com/ambv/black/issues/26;Black could make single-line strings over multiple lines (i.e. a number of single quotes strings on multiple lines surrounded by parentheses) more efficient, by resizing them to the full length of the line.    Even if that was overreach, there's a peculiar situation where you end up with multiple strings _on the same line_, like below:      ```python  -        warnings.warn('Dataset.sel_points is deprecated: use Dataset.sel()'  -                      'instead.', DeprecationWarning, stacklevel=2)  -  +        warnings.warn(  +            'Dataset.sel_points is deprecated: use Dataset.sel()' 'instead.',  +            DeprecationWarning,  +            stacklevel=2,  +        )  ```;max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 22:04;22.3.2018 17:44;22.3.2018 17:44;closed;[bug, duplicate, unstable formatting];1;27;Black produced different code on the second pass of the formatter (2);https://api.github.com/repos/ambv/black/issues/27;https://github.com/ambv/black/issues/27;Using current master, https://github.com/ambv/black/commit/fece8ae4218f2e35d2e5cb6825e2b2b9d8f34662.  ```diff  --- source  +++ first pass  @@ -9,278 +9,217 @@   # Note that not all possible configuration values are present in this   # autogenerated file.   #   # All configuration values have a default;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 22:05;17.3.2018 9:00;17.3.2018 9:01;closed;[bug, unstable formatting];3;28;Black produced different code on the second pass of the formatter (3);https://api.github.com/repos/ambv/black/issues/28;https://github.com/ambv/black/issues/28;"Using current master, https://github.com/ambv/black/commit/fece8ae4218f2e35d2e5cb6825e2b2b9d8f34662.  ```diff  --- source  +++ first pass  @@ -1,6 +1,6 @@  -#  +#    # The Python Imaging Library.   # $Id$   #   # Basic McIdas support for PIL   #  @@ -13,39 +13,36 @@   # Copyright (c) Secret Labs AB 1997.   # Copyright (c) Fredrik Lundh 1997.   #   # See the README file for information on usage and redistribution.   #  -   import struct   from . import Image, ImageFile      __version__ = ""0.2""         def _accept(s):       return s[:8] == b""\x00\x00\x00\x00\x00\x00\x00\x04""        +  +   ##   # Image plugin for McIdas area images.  -   class McIdasImageFile(ImageFile.ImageFile):  -       format = ""MCIDAS""       format_description = ""McIdas area file""          def _open(self):  -           # parse area file directory           s = self.fp.read(256)           if not _accept(s) or len(s) != 256:               raise SyntaxError(""not an McIdas area file"")              self.area_descriptor_raw = s           self.area_descriptor = w = [0] + list(struct.unpack(""!64i"", s))  -           # get mode           if w[11] == 1:               mode = rawmode = ""L""           elif w[11] == 2:               # FIXME: add memory map support  @@ -58,19 +55,15 @@           else:               raise SyntaxError(""unsupported McIdas format"")              self.mode = mode           self.size = w[10], w[9]  -           offset = w[34] + w[15]  -        stride = w[15] + w[10]*w[11]*w[14]  -  +        stride = w[15] + w[10] * w[11] * w[14]           self.tile = [(""raw"", (0, 0) + self.size, offset, (rawmode, stride, 1))]         # --------------------------------------------------------------------   # registry  -   Image.register_open(McIdasImageFile.format, McIdasImageFile, _accept)  -   # no default extension       --- first pass  +++ second pass  @@ -62,8 +62,9 @@           self.tile = [(""raw"", (0, 0) + self.size, offset, (rawmode, stride, 1))]         # --------------------------------------------------------------------   # registry  -Image.register_open(McIdasImageFile.format, McIdasImageFile, _accept)  -# no default extension  +Image.register_open(  +    McIdasImageFile.format, McIdasImageFile, _accept  +)  # no default extension       ```";hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 22:37;15.3.2018 23:04;15.3.2018 23:04;closed;[];1;29;Fixed malformed link to pathlib;https://api.github.com/repos/ambv/black/issues/29;https://github.com/ambv/black/pull/29;;danidee10;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.3.2018 23:55;16.3.2018 0:07;16.3.2018 0:07;closed;[];2;30;Certain kwargs get a space inserted before the equals sign;https://api.github.com/repos/ambv/black/issues/30;https://github.com/ambv/black/issues/30;For example if the empty tuple is a default it gets a space    ```  $ cat kwarg_change.py  def example(a, b=()):      return a + b  $ venv/bin/black kwarg_change.py  reformatted kwarg_change.py  $ cat kwarg_change.py  def example(a, b= ()):      return a + b  ```    but if `True` if the default, no change is needed:    ```  $ cat kwarg_same.py  def example(a, b, c=True):      if c:          return a        else:          return b  $ venv/bin/black kwarg_same.py  kwarg_same.py already well formatted, good job.  ```    ----    Environment info:    ```  $ venv/bin/pip show black  Name: black  Version: 18.3a0  Summary: The uncompromising code formatter.  Home-page: https://github.com/ambv/black  Author: £ukasz Langa  Author-email: lukasz@langa.pl  License: MIT  Location: .../venv/lib/python3.6/site-packages  Requires: click, attrs  ```;dhermes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.3.2018 0:05;16.3.2018 7:57;16.3.2018 7:57;closed;[];1;31;When an expression is in star-args, a space gets added;https://api.github.com/repos/ambv/black/issues/31;https://github.com/ambv/black/issues/31;For example, the expression `gidgets[:2]` is treated differently than `gidgets` when passed as star args.    For the file `star_arg.py`:    ```python  def f(*widgets):      result = 0      for widget in widgets:          result += widget      return result      def g(a, b, c, d):      gidgets = (a, b, c)      if d > 4:          return f(*gidgets[:2])        else:          return f(*gidgets)  ```    Running `black` (installed from `HEAD` as in #30) adds the space between the `*` and the star arg:    ```  $ venv-HEAD/bin/black star_arg.py  reformatted star_arg.py  ```    See the diff    ```diff  diff --git a/star_arg.py b/star_arg.py  index e98997c..12ce82d 100644  --- a/star_arg.py  +++ b/star_arg.py  @@ -8,7 +8,7 @@ def f(*widgets):   def g(a, b, c, d):       gidgets = (a, b, c)       if d > 4:  -        return f(*gidgets[:2])  +        return f(* gidgets[:2])         else:           return f(*gidgets)  ```;dhermes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.3.2018 0:15;24.4.2018 1:09;24.4.2018 1:13;closed;[comments, design];3;32;`black` mishandles functions that end in a comment;https://api.github.com/repos/ambv/black/issues/32;https://github.com/ambv/black/issues/32;"For the repro file `too_many_returns.py`, I have a `pylint: disable` / `pylint: enable` at the beginning and end of a function (but it is within the scope of the function):    ```python  """"""``black`` issue repro.""""""      def squared(value):      """"""Just squares a number.""""""      # pylint: disable=too-many-return-statements      if value == 1:          return 1        elif value == 2:          return 4        elif value == 3:          return 9        elif value == 4:          return 16        elif value == 5:          return 25        elif value == 6:          return 36        elif value == 7:          return 49        elif value == 8:          return 64        elif value == 9:          return 81        elif value == 10:          return 100        else:          return value * value      # pylint: enable=too-many-return-statements      def cubed(value):      """"""Just cubes a number.""""""      return value * squared(value)  ```    Running `black` (installed from `HEAD` as in #30) does two ""strange"" things:    - Moves the `# pylint: enable` comment to just before the next function  - Adds 2 empty lines in between the two functions (so there is now 4, instead of 2)    ```  $ venv-HEAD/bin/black too_many_returns.py  reformatted too_many_returns.py  ```    See the diff    ```diff  diff --git a/too_many_returns.py b/too_many_returns.py  index b7251d5..3b65b6c 100644  --- a/too_many_returns.py  +++ b/too_many_returns.py  @@ -36,9 +36,11 @@ def squared(value):          else:           return value * value  -    # pylint: enable=too-many-return-statements        +  +  +# pylint: enable=too-many-return-statements   def cubed(value):       """"""Just cubes a number.""""""       return value * squared(value)  ```    ----    I realize the `pylint: enable...` at the end isn't needed, since the disable is scoped to the function, but I figured you'd still want to see this surprising reformatted result.";dhermes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.3.2018 0:23;19.3.2018 19:14;19.3.2018 19:21;closed;[];11;33;"Numpy-style indexing gets ""mushed"" (i.e. loses a space)";https://api.github.com/repos/ambv/black/issues/33;https://github.com/ambv/black/issues/33;"For the repro file `its_science.py`    ```python  def first_column1d(values):      """"""First column, as a 1D array.""""""      return values[:, 0]      def first_column2d(values):      """"""First column, but still a 2D array.""""""      return values[:, 0:1]  ```    Running `black` (installed from `HEAD` as in #30)    ```  $ venv-HEAD/bin/black its_science.py  reformatted its_science.py  ```    changes the ""exotic"" slice argument:    ```diff  diff --git a/its_science.py b/its_science.py  index f3c4a8b..3a5dba0 100644  --- a/its_science.py  +++ b/its_science.py  @@ -5,4 +5,4 @@ def first_column1d(values):      def first_column2d(values):       """"""First column, but still a 2D array.""""""  -    return values[:, 0:1]  +    return values[:,0:1]  ```    ----    PS @ambv This is my fourth and last issue (for now) and it's just ""wrong"" things I encountered when running this on a large codebase of mine. I am **SOOOOO** happy you have created `black` and look forward to evangelizing it in the community.";dhermes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.3.2018 12:55;17.3.2018 1:34;17.3.2018 1:34;closed;[];1;34;black produces long lines for top-level code;https://api.github.com/repos/ambv/black/issues/34;https://github.com/ambv/black/issues/34;Operating system: Mac OS X 10.12.5  Python version: 3.6.1  Black version: 18.3a2  Does also happen on master: Yes    black produces long lines for top-level code that isn't in a function. For example, the following:    ```python  session = get_session()  result = session.query(models.Customer.id).filter(      models.Customer.account_id == account_id,      models.Customer.email == email_address,  ).order_by(      models.Customer.id.asc(),  ).all()  ```    becomes:    ```python  session = get_session()  result = session.query(models.Customer.id).filter(models.Customer.account_id == account_id, models.Customer.email == email_address).order_by(models.Customer.id.asc(),).all()  ```;svisser;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.3.2018 13:00;17.3.2018 1:10;17.3.2018 14:38;closed;[];4;35;black inserts 'unnecessary' newline for consistency;https://api.github.com/repos/ambv/black/issues/35;https://github.com/ambv/black/issues/35;Operating system: Mac OS X 10.12.5  Python version: 3.6.1  Black version: 18.3a2  Does also happen on master: Yes    ```python  def example(session):      result = session.query(models.Customer.id).filter(          models.Customer.account_id == account_id,          models.Customer.email == email_address,      ).order_by(          models.Customer.id.asc(),      ).all()  ```    becomes:    ```python  def example(session):      result = session.query(models.Customer.id).filter(          models.Customer.account_id == account_id, models.Customer.email == email_address      ).order_by(          models.Customer.id.asc(),      ).all(      )  ```    Although the newline in `all()` is consistent with the other calls above it, I think it's unlikely that the code would be written this way normally.  ;svisser;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.3.2018 3:52;17.3.2018 5:45;18.3.2018 16:35;closed;[];5;36;Line breaks before logical operators;https://api.github.com/repos/ambv/black/issues/36;https://github.com/ambv/black/pull/36;This addresses https://github.com/ambv/black/issues/21 where the PEP 8 guidelines state that it's preferred for lines to be broken before a logical operator, rather than afterwards.     However, flake8 yells at me with ``W503 line break before binary operator``, so :sweat_smile: ;autophagy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.3.2018 5:04;17.3.2018 9:29;17.3.2018 9:29;closed;[bug, help wanted];2;37;Black installs on Python 3.5 and older from the wheel;https://api.github.com/repos/ambv/black/issues/37;https://github.com/ambv/black/issues/37;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: ubuntu16.04  Python version: Python 3.5.2   Black version:  Does also happen on master:     after I install black  by using  `pip3 install black` ,   and execute command `black`, error occur.      ----  root@leguproject001:~/Pocsuite# black  Traceback (most recent call last):    File ""/usr/local/bin/black"", line 7, in <module>      from black import main    File ""/usr/local/lib/python3.5/dist-packages/black.py"", line 72      sources: List[Path] = []             ^  SyntaxError: invalid syntax    ";xiaomingdaily;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.3.2018 19:19;17.3.2018 21:15;18.3.2018 0:52;closed;[];3;38;Add files generated during test to ignores;https://api.github.com/repos/ambv/black/issues/38;https://github.com/ambv/black/pull/38;null;giuscri;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.3.2018 13:43;27.3.2018 4:39;27.3.2018 4:39;closed;[documentation, good first issue];4;39;Document missing trailing comma on function calls with unpacking on non-3.6 files;https://api.github.com/repos/ambv/black/issues/39;https://github.com/ambv/black/issues/39;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Mac OS 10.13.3  Python version: 3.6.4  Black version: 18.3a2  Does also happen on master: Yes    To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.3.2018 16:42;21.3.2018 3:20;21.3.2018 3:20;closed;[bug, comments];5;40;Black introduces E302 with a Comment at Line 0 and no Imports;https://api.github.com/repos/ambv/black/issues/40;https://github.com/ambv/black/issues/40;Operating system: Debian 9  Python version: 3.6.4  Black version: black.py, version 18.3a2    Black converts this:    ```python  # License/Header comment    def includeme(config):      pass  ```  into this:  ```python  # License/Header comment  def includeme(config):      pass  ```  which causes this:  ```  ./compute/storage/__init__.py:14:1: E302 expected 2 blank lines, found 0  ```;SethMichaelLarson;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.3.2018 15:08;19.3.2018 17:53;19.3.2018 17:53;closed;[];3;41;Black should not write to the file directly;https://api.github.com/repos/ambv/black/issues/41;https://github.com/ambv/black/issues/41;Writing to a file directly has all sorts of drawback:    - A file may not be a real file (it may be something faking to be a file to make it readable)  - You may not have the permission to write the file right now.  - Something else might be writing on the file.  - IDE integration might want to use the output of the tool to do something before applying the changes.  - You have no easy way to make a diff of the changes.    Black should output the changes on stdout by default.    If you want the changes to be applied, you do: black file.py > file.py    If you want the changed to be able to be applied implicitly, you can add an option such as --in-place.  This is what sed or gofmt do.    Alternatively, you can specify more write modes, life cargo does: https://github.com/rust-lang-nursery/rustfmt;ksamuel;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.3.2018 19:32;21.3.2018 2:58;21.3.2018 2:58;closed;[];0;42;Can't parse module names with async in them?;https://api.github.com/repos/ambv/black/issues/42;https://github.com/ambv/black/issues/42;Minimal repro:    ```  from util.async import (abc, foo, bar)  ```    error: cannot format /tmp/foo.py: Cannot parse: 1:10: from util.async import (abc, foo, bar)    This is with python3.6 + master;adsharma;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.3.2018 11:46;21.3.2018 3:18;21.3.2018 3:18;closed;[];3;43;Introduces 'W503 line break before binary operator' and 'E303 too many blank lines (3)';https://api.github.com/repos/ambv/black/issues/43;https://github.com/ambv/black/issues/43;Operating system: macOS  Python version: 3.6.4  Black version: latest master: https://github.com/ambv/black/commit/10d8976a79f5a7f7e5e36369a81d9e5c983332d1  Does also happen on master: yes    To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 5:23;22.3.2018 2:36;22.3.2018 2:38;closed;[bug, good first issue];1;46;Extra space in kwarg unpacking;https://api.github.com/repos/ambv/black/issues/46;https://github.com/ambv/black/issues/46;I thought I'd seen this (and maybe put an issue in already on this?) but I can't find it anywhere. So here goes:    ```diff  -        return security_screen(**self.screen_kwargs)  +        return security_screen(** self.screen_kwargs)  ```    Operating system: MacOS  Python version: 3.6.4  Black version: black, version 18.3a3  Does also happen on master: Yes    ;max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 10:42;21.3.2018 15:51;21.3.2018 15:51;closed;[invalid, not a bug];1;47;Support for tab indentation;https://api.github.com/repos/ambv/black/issues/47;https://github.com/ambv/black/issues/47;Black always output 4 spaces for indentation.    It would be nice to have a --use-tabs or similar to tell it to output tabs instead. By manually switching the '    '*self.depth into '\t'*self.depth in the Line.__str__() method it seems to support this rather nicely.    I'm not sure if there are other edge cases to consider (i see another '    ' literal in the code but i don't understand when it applies)    Would something like this be considered ?;rslinckx;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 14:00;21.3.2018 15:49;27.9.2018 1:59;closed;[not a bug];7;48;pylint: [pylint] C0330:Wrong hanging indentation before block (add 4 spaces).;https://api.github.com/repos/ambv/black/issues/48;https://github.com/ambv/black/issues/48;Operating system: Win7 x64  Python version: 3.6.0  Black version: black==18.3a3 installed from pypi into venv  Does also happen on master:    Code:  ```  def doc_dl_job(      doc_ids,      dl_folder,      root_url=None,      api_username=None,      api_password=None,      updatedcontent_root_url=None,  ):      '''Download documents by list of doc ids.'''      api = API(api_username, api_password, root_url=root_url)  ```    Pylint complains about all lines with function arguments.    Command: `black -l 100 testfile.py`;mrkafk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 14:54;23.3.2018 7:19;23.3.2018 7:19;closed;[bug, lib2to3];1;49;Space before method brackets for built-in functions;https://api.github.com/repos/ambv/black/issues/49;https://github.com/ambv/black/issues/49;"I have the problem that black does a reformat of built-in functions, in my case on exec and eval as those have been statements in Python 2 but are methods in Python 3.     ```patch python  -        return exec(""code"", {}, {})  +        return exec (""code"", {}, {})  ````    Operating system: MacOS  Python version: 3.6.4  Black version: black, version 18.3a3  Does also happen on master: Yes    ";loechel;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 16:13;23.3.2018 1:34;23.3.2018 1:36;closed;[];5;50;Add --no-error flag to allow for 0 exit code when reformatting;https://api.github.com/repos/ambv/black/issues/50;https://github.com/ambv/black/pull/50;When using the package with IntelliJ's file watcher the console pops up on command errors.  Currently the package returns a 1 exit code when it reformatted at least one file.    This flag adds the possibility to still get 0 after that.;MichalPodeszwa;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 17:49;31.3.2018 20:21;26.5.2018 2:50;closed;[enhancement, help wanted];21;51;Consider being even more opinionated about quotes;https://api.github.com/repos/ambv/black/issues/51;https://github.com/ambv/black/issues/51;"One thing I've come to appreciate from JS land is that even though ' and "" are interchangeable, you can set the linters to require one or the other. My Python code is littered with alternating ' and "" strings, sometimes even in the same dictionary, like so:    ```python  {      'My key': ""has a value"",      ""my quote"": 'is doubled',  }  ```  I don't have an opinion on which is best (and I don't want to), but I wish to hell my code was consistent. There are good reasons to use one or the other (if the string contains other quotes, for example), but in general, I wish they were all the same. Maybe it could adjust any string that is enclosed in `'` characters and does not contain a `""` character to be wrapped with `""` characters (or vice versa):    e.g  `'hello' becomes ""hello""`  `'She said ""yes""'` doesn't change  `""Don't do that""` never changes.    Should also be able to change all triple quotes to the same character as well unless the string contains the inverse quote.";dusty-phillips;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 18:22;6.4.2018 17:02;6.4.2018 17:02;closed;[documentation, good first issue];3;52;Document that W503 generated by pycodestyle is not PEP 8-compliant;https://api.github.com/repos/ambv/black/issues/52;https://github.com/ambv/black/issues/52;"Not sure if feature or bug.    ```bash   $ black --version  black, version 18.3a3   $ flake8 --version  3.5.0 (mccabe: 0.6.1, pycodestyle: 2.3.1, pyflakes: 1.6.0) CPython 3.6.2 on Linux   $ cat test.py  def meh(eh):      if (""a"" not in eh or (""b"" not in eh and ""c"" not in eh and ""d"" not in eh) or ""e"" not in eh):          return True   $ black .      reformatted test.py   $ cat test.py  def meh(eh):      if (          ""a"" not in eh          or (""b"" not in eh and ""c"" not in eh and ""d"" not in eh)          or ""e"" not in eh      ):          return True   $ flake8 --select=W  ./test.py:4:9: W503 line break before binary operator  ./test.py:5:9: W503 line break before binary operator   $   ```";dusty-phillips;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 22:39;null;2.4.2018 19:02;open;[documentation, good first issue];5;53;Create PEP 8-style document with the intended formatting style explicitly described;https://api.github.com/repos/ambv/black/issues/53;https://github.com/ambv/black/issues/53;This will help users identify whether what they see is a bug or a feature.    A document like this also helps with giving reasons for specific behavior.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 22:53;22.3.2018 2:02;22.3.2018 2:49;closed;[];3;54;attrs<17.3.0 does not provide dataclass;https://api.github.com/repos/ambv/black/issues/54;https://github.com/ambv/black/issues/54;Operating system: Linux  Python version: 3.6.4  Black version: 18.3a3  Does also happen on master: N/A    I installed black install an existing project that makes use of attrs via hypothesis. Since black doesn't require a specific version of attrs, the existing installation was used causing this issue. In order to fix the issue, I installed the latest version of [attrs==17.4.0](https://pypi.org/project/attrs/17.4.0/). The old version was 17.2.0, which doesn't provide `attr.dataclass`. Looks like `attr.dataclass` was introduced in version 17.3.0.    Regarding if this issue occurs on master: not really. Installing black by itself into a clean virtualenv doesn't cause any problems, since the latest version of attrs is used.    Solution may be to pin the dependency at:    ```python  install_requires=['click', 'attrs>17.2.0'],  ```    in https://github.com/ambv/black/blob/1b696555e18afdfee3ca45526370de1af2cd961d/setup.py#L43;jeremylow;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 23:22;22.3.2018 2:36;22.3.2018 2:37;closed;[bug, invalid code];1;55;Cannot parse dict comprehension with negative number;https://api.github.com/repos/ambv/black/issues/55;https://github.com/ambv/black/issues/55;Operating system: MacOS 10.12.6  Python version: 3.6  Black version: 18.3a3  Does also happen on master: yes    `{a: b * -2 for a, b in dictionary.items()}`  becomes  `{a: b * -2for a, b in dictionary.items()}`    which, surprisingly to me, doesn't break, but is clearly wrong.    `{a: b * 2 for a, b in dictionary.items()}`  is not affected by this issue (black leaves it alone.);vaer-k;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.3.2018 23:37;24.4.2018 20:55;24.4.2018 20:55;closed;[comments, design];5;56;What about comments before functions?;https://api.github.com/repos/ambv/black/issues/56;https://github.com/ambv/black/issues/56;i don't know whether `black` handles this phenomenon purposely this way. i usually put annotations regarding a specific function in general right before it's definition:    ```python  # foobar functions      def bar() -> None:      pass    # TODO add type annotations  def foo():      pass  ```    `black` adds two lines between the annotation and a specific function which looks like general, rather module oriented comments or 'section headings' i usually use as well:    ```python  # foobar functions      def bar() -> None:      pass      # TODO add type annotations      def foo():      pass  ```    are there rationales i'm not aware of that lead to this transformation or could this behaviour get changed?    edit: interestingly the snippets in the `README` also contain such style.;funkyfuture;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 0:05;22.3.2018 2:02;22.3.2018 5:29;closed;[documentation];2;57;Document standard input/output handling;https://api.github.com/repos/ambv/black/issues/57;https://github.com/ambv/black/issues/57;Hi!    Thanks for the great package!    I'm interested to implement Emacs text editor integration for black.    Is it possible to pass file content to standard input followed by EOF and get the formatted code at the standard output?    Instead of replacing file content in place. This will allow preserving undo history of the editor buffer.    Regards, Artem.;proofit404;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 4:50;22.3.2018 4:51;22.3.2018 4:51;closed;[];1;58;Black puts a space before exec() (E211);https://api.github.com/repos/ambv/black/issues/58;https://github.com/ambv/black/issues/58;Operating system: Debian 9  Python version: 3.6.4  Black version: 18.3a3    Black converts the following code:  ```python  exec('import os')  ```  into:  ```python  exec ('import os')  ```  which produces this flake error:  ```  setup.py:22:9: E211 whitespace before '('  ```;SethMichaelLarson;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 13:56;23.3.2018 0:34;23.3.2018 0:34;closed;[bug, invalid code];2;59;Internal error on a complex variable type annotation;https://api.github.com/repos/ambv/black/issues/59;https://github.com/ambv/black/issues/59;Black reports internal error on this code    ```python  import typing as t    filters: t.List[      t.Tuple[str, t.Union[str, t.List[t.Optional[str]]]],  ] = []  ```    Operating system: Ubuntu  Python version: 3.6.3  Black version: 18.3a3  Does also happen on master: yes  ;roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 14:02;23.3.2018 7:53;23.3.2018 7:53;closed;[bug];1;60;Space removed before () when used as default function argument;https://api.github.com/repos/ambv/black/issues/60;https://github.com/ambv/black/issues/60;This  ```python  import typing as t    def f1(x: t.Tuple[int, ...] = ()):      pass  ```    becomes this  ```python  import typing as t    def f1(x: t.Tuple[int, ...] =()):      pass  ```      Operating system: Ubuntu  Python version: 3.6.3  Black version: 18.3a3  Does also happen on master: yes;roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 15:37;22.3.2018 17:42;22.3.2018 17:42;closed;[];1;61;join strings if they are put onto the same line ;https://api.github.com/repos/ambv/black/issues/61;https://github.com/ambv/black/issues/61;"great job, but i found a nitpick ^^    got:  ```diff  @@ -49,12 +50,11 @@ def dump_version(root, version, write_to, template=None):       if template is not None:           dump = template.format(version=version)       else:  -        raise ValueError((  -            ""bad file format: '%s' (of %s) \n""  -            ""only *.txt and *.py are supported"") % (  -            os.path.splitext(target)[1],  -            target  -        ))  +        raise ValueError(  +            (""bad file format: '%s' (of %s) \n"" ""only *.txt and *.py are supported"") %  +            (os.path.splitext(target)[1], target)  +        )  +       with open(target, 'w') as fp:           fp.write(dump)     @@ -70,18 +70,20 @@ def _do_parse(root, parse):           parse_result = parse(root)           if isinstance(parse_result, string_types):               warnings.warn(  -                ""version parse result was a string\n""  -                ""please return a parsed version"",  -                category=DeprecationWarning)  +                ""version parse result was a string\n"" ""please return a parsed version"",  +                category=DeprecationWarning,  +            )               # we use ScmVersion here in order to keep legacy code working               # for 2.0 we should use meta               parse_result = ScmVersion(parse_result)           version = parse_result or _version_from_entrypoint(  ```    expected  ```diff  @@ -49,12 +50,11 @@ def dump_version(root, version, write_to, template=None):       if template is not None:           dump = template.format(version=version)       else:  -        raise ValueError((  -            ""bad file format: '%s' (of %s) \n""  -            ""only *.txt and *.py are supported"") % (  -            os.path.splitext(target)[1],  -            target  -        ))  +        raise ValueError(  +            (""bad file format: '%s' (of %s) \nonly *.txt and *.py are supported"") %  +            (os.path.splitext(target)[1], target)  +        )  +       with open(target, 'w') as fp:           fp.write(dump)     @@ -70,18 +70,20 @@ def _do_parse(root, parse):           parse_result = parse(root)           if isinstance(parse_result, string_types):               warnings.warn(  -                ""version parse result was a string\n""  -                ""please return a parsed version"",  -                category=DeprecationWarning)  +                ""version parse result was a string\nplease return a parsed version"",  +                category=DeprecationWarning,  +            )               # we use ScmVersion here in order to keep legacy code working               # for 2.0 we should use meta               parse_result = ScmVersion(parse_result)           version = parse_result or _version_from_entrypoint(    ```";RonnyPfannschmidt;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 15:52;23.3.2018 16:57;23.3.2018 16:57;closed;[bug, comments];2;62;Black puts standalone comments inside short exploded expressions *after* the expression;https://api.github.com/repos/ambv/black/issues/62;https://github.com/ambv/black/issues/62;  gotten:  ```diff           cwd=str(cwd),  -        env=_always_strings(dict(  -            os.environ,  -            # try to disable i18n  -            LC_ALL='C',  -            LANGUAGE='',  -            HGPLAIN='1',  -        ))  +        env=_always_strings(dict(os.environ, LC_ALL='C', LANGUAGE='', HGPLAIN='1')),  +        # try to disable i18n       )  ```;RonnyPfannschmidt;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 16:48;2.4.2018 19:02;2.4.2018 19:02;closed;[bug, comments, unstable formatting];5;63;"Comments in a dict: ""Black produced different code on the second pass""";https://api.github.com/repos/ambv/black/issues/63;https://github.com/ambv/black/issues/63;Operating system: macOS High Sierra  Python version: 3.6.4  Black version: black==18.3a3  Does also happen on master: Yes    ```python  latex_elements = {  # The paper size ('letterpaper' or 'a4paper').  #'papersize': 'letterpaper',    # The font size ('10pt', '11pt' or '12pt').  #'pointsize': '10pt',    # Additional stuff for the LaTeX preamble.  #'preamble': '',    # Latex figure (float) alignment  #'figure_align': 'htbp',  }  ```    ```console  $ black 2.py  error: cannot format 2.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /var/folders/kt/j77sf4_n6fnbx6pg199rbx700000gn/T/blk_zqa031lp.log  ```    ```diff  --- source  +++ first pass  @@ -1,15 +1,10 @@  -latex_elements = {  -# The paper size ('letterpaper' or 'a4paper').  -#'papersize': 'letterpaper',  +latex_elements = {}  +    # The paper size ('letterpaper' or 'a4paper').  +    # 'papersize': 'letterpaper',  +    # The font size ('10pt', '11pt' or '12pt').  +    # 'pointsize': '10pt',  +    # Additional stuff for the LaTeX preamble.  +    # 'preamble': '',  +    # Latex figure (float) alignment  +    # 'figure_align': 'htbp',     -# The font size ('10pt', '11pt' or '12pt').  -#'pointsize': '10pt',  -  -# Additional stuff for the LaTeX preamble.  -#'preamble': '',  -  -# Latex figure (float) alignment  -#'figure_align': 'htbp',  -}  -  -    --- first pass  +++ second pass  @@ -1,10 +1,10 @@   latex_elements = {}  -    # The paper size ('letterpaper' or 'a4paper').  -    # 'papersize': 'letterpaper',  -    # The font size ('10pt', '11pt' or '12pt').  -    # 'pointsize': '10pt',  -    # Additional stuff for the LaTeX preamble.  -    # 'preamble': '',  -    # Latex figure (float) alignment  -    # 'figure_align': 'htbp',  +# The paper size ('letterpaper' or 'a4paper').  +# 'papersize': 'letterpaper',  +# The font size ('10pt', '11pt' or '12pt').  +# 'pointsize': '10pt',  +# Additional stuff for the LaTeX preamble.  +# 'preamble': '',  +# Latex figure (float) alignment  +# 'figure_align': 'htbp',       ```  ;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 19:14;23.3.2018 16:51;23.3.2018 16:51;closed;[];5;64;Black produces lines longer than 88;https://api.github.com/repos/ambv/black/issues/64;https://github.com/ambv/black/issues/64;"Operating system: macOS  Python version: 3.6.2  Black version: 18.3a3  Does also happen on master: Yes    This *may* be intentional, but I'm attempting to get this working on a codebase, and I noticed that it's producing some lines that are longer than the 88 limit that black defaults to, but which could easily be broken down into compliant lines.    Things like:    ```python                      response.cache_control.stale_while_revalidate = stale_while_revalidate                      response.cache_control.stale_if_error = stale_if_error                      response.cache_control.max_age = seconds  ```    could instead be written as:      ```python                      response.cache_control.stale_while_revalidate = \                          stale_while_revalidate                      response.cache_control.stale_if_error = stale_if_error                      response.cache_control.max_age = seconds  ```    Another example is:    ```python      assert exc.value.faultString == ""RuntimeError: This API has been removed. Please Use BigQuery instead.""  ```    Which could instead be written as:      ```python      assert exc.value.faultString == \          ""RuntimeError: This API has been removed. Please Use BigQuery instead.""  ```    or    ```python      assert exc.value.faultString == (          ""RuntimeError: This API has been removed. Please Use BigQuery instead."")  ```    or something similiar";dstufft;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 19:20;7.6.2018 2:04;7.6.2018 2:39;closed;[design];23;65;Configuration;https://api.github.com/repos/ambv/black/issues/65;https://github.com/ambv/black/issues/65;It would be nice if there was the option to store black's line length and --safe/--fast options in setup.cfg;spapanik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.3.2018 21:14;23.3.2018 17:02;23.3.2018 17:02;closed;[bug, comments];2;66;Bad formatting on deeply nested dict/list/dict;https://api.github.com/repos/ambv/black/issues/66;https://github.com/ambv/black/issues/66;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Linux  Python version: 3.7  Black version: 18.3a3  Does also happen on master: yes    --    I ran black against one of my projects and it ended up changing a data structure in a surprising way -- I ended up with a list that contained multiple dicts across many lines into a single unreadable line:    ```  -            ""scheduled_changes"": [  -                {  -                    ""sc_id"": 1, ""when"": 10000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": False, ""sc_data_version"": 1,  -                    ""permission"": ""rule"", ""username"": ""janet"", ""options"": {""products"": [""foo""]}, ""data_version"": None,  -                    ""signoffs"": {""bill"": ""releng""}, ""required_signoffs"": {},  -                },  -                {  -                    ""sc_id"": 2, ""when"": 20000000, ""scheduled_by"": ""bill"", ""change_type"": ""update"", ""complete"": False, ""sc_data_version"": 1,  -                    ""permission"": ""release_locale"", ""username"": ""ashanti"", ""options"": None, ""data_version"": 1,  -                    ""signoffs"": {""bill"": ""releng"", ""mary"": ""relman""}, ""required_signoffs"": {""releng"": 1, ""relman"": 1},  -                    ""original_row"": dbo.permissions.select({""permission"": ""release_locale"", ""username"": ""ashanti""})[0],  -                },  -                {  -                    ""sc_id"": 3, ""when"": 30000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": True, ""sc_data_version"": 2,  -                    ""permission"": ""permission"", ""username"": ""bob"", ""options"": None, ""data_version"": None, ""signoffs"": {},  -                    ""required_signoffs"": {},  -                    # No original_row on completed changes.  -                },  -                {  -                    ""sc_id"": 4, ""when"": 76000000, ""scheduled_by"": ""bill"", ""change_type"": ""delete"", ""complete"": False, ""sc_data_version"": 1,  -                    ""permission"": ""scheduled_change"", ""username"": ""mary"", ""options"": None, ""data_version"": 1,  -                    ""signoffs"": {""bill"": ""releng"", ""mary"": ""relman""}, ""required_signoffs"": {""releng"": 1, ""relman"": 1},  -                    ""original_row"": dbo.permissions.select({""permission"": ""scheduled_change"", ""username"": ""mary""})[0],  -                },  -                {  -                    ""sc_id"": 5, ""when"": 98000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": False, ""sc_data_version"": 1,  -                    ""permission"": ""rule"", ""username"": ""joe"", ""options"": {""products"": [""fake""]}, ""data_version"": None,  -                    ""signoffs"": {}, ""required_signoffs"": {""releng"": 1},  -                },  -                {  -                    ""sc_id"": 6, ""when"": 38000000, ""scheduled_by"": ""bill"", ""change_type"": ""update"", ""complete"": False, ""sc_data_version"": 1,  -                    ""permission"": ""release"", ""username"": ""bob"", ""options"": {""products"": [""a"", ""b""]}, ""data_version"": 1,  -                    ""signoffs"": {}, ""required_signoffs"": {""releng"": 1},  -                    ""original_row"": dbo.permissions.select({""permission"": ""release"", ""username"": ""bob""})[0],  -                },  -            ],  +            ""scheduled_changes"": [{""sc_id"": 1, ""when"": 10000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": False, ""sc_data_version"": 1, ""permission"": ""rule"", ""username"": ""janet"", ""options"": {""products"": [""foo""]}, ""data_version"": None, ""signoffs"": {""bill"": ""releng""}, ""required_signoffs"": {}}, {""sc_id"": 2, ""when"": 20000000, ""scheduled_by"": ""bill"", ""change_type"": ""update"", ""complete"": False, ""sc_data_version"": 1, ""permission"": ""release_locale"", ""username"": ""ashanti"", ""options"": None, ""data_version"": 1, ""signoffs"": {""bill"": ""releng"", ""mary"": ""relman""}, ""required_signoffs"": {""releng"": 1, ""relman"": 1}, ""original_row"": dbo.permissions.select({""permission"": ""release_locale"", ""username"": ""ashanti""})[0]}, {""sc_id"": 3, ""when"": 30000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": True, ""sc_data_version"": 2, ""permission"": ""permission"", ""username"": ""bob"", ""options"": None, ""data_version"": None, ""signoffs"": {}, ""required_signoffs"": {}}, {""sc_id"": 4, ""when"": 76000000, ""scheduled_by"": ""bill"", ""change_type"": ""delete"", ""complete"": False, ""sc_data_version"": 1, ""permission"": ""scheduled_change"", ""username"": ""mary"", ""options"": None, ""data_version"": 1, ""signoffs"": {""bill"": ""releng"", ""mary"": ""relman""}, ""required_signoffs"": {""releng"": 1, ""relman"": 1}, ""original_row"": dbo.permissions.select({""permission"": ""scheduled_change"", ""username"": ""mary""})[0]}, {""sc_id"": 5, ""when"": 98000000, ""scheduled_by"": ""bill"", ""change_type"": ""insert"", ""complete"": False, ""sc_data_version"": 1, ""permission"": ""rule"", ""username"": ""joe"", ""options"": {""products"": [""fake""]}, ""data_version"": None, ""signoffs"": {}, ""required_signoffs"": {""releng"": 1}}, {""sc_id"": 6, ""when"": 38000000, ""scheduled_by"": ""bill"", ""change_type"": ""update"", ""complete"": False, ""sc_data_version"": 1, ""permission"": ""release"", ""username"": ""bob"", ""options"": {""products"": [""a"", ""b""]}, ""data_version"": 1, ""signoffs"": {}, ""required_signoffs"": {""releng"": 1}, ""original_row"": dbo.permissions.select({""permission"": ""release"", ""username"": ""bob""})[0]}],  +            # No original_row on completed changes.  ```";mozbhearsum;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.3.2018 8:34;17.5.2018 0:27;17.5.2018 7:30;closed;[enhancement, help wanted];42;67;Fluent interfaces;https://api.github.com/repos/ambv/black/issues/67;https://github.com/ambv/black/issues/67;"Operating system: Mac OS  Python version: 3.6.4  Black version: 18.3a3  Does also happen on master: yes    ---    Black removes trailing backlashes, which can be used, for instance with yapf, to signal ""don't join these line"".    This is problematic, for instance, if one uses the ""fluent interface"" idiom, which can lead to long chains of attribute accesses in a given expression.    Here's an example:    ```  -        return sa.sql \  -            .select([sa.sql.func.count(membership.c.user_id)]) \  -            .where(membership.c.group_id == cls.id) \  -            .group_by(membership.c.group_id) \  -            .label('members_count')  +        return sa.sql.select([sa.sql.func.count(membership.c.user_id)]).where(  +            membership.c.group_id == cls.id  +        ).group_by(  +            membership.c.group_id  +        ).label(  +            'members_count'  +        )  ```    The easiest solution would be to keep the line break in the presence of a backslash.  ";sfermigier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.3.2018 8:37;23.3.2018 16:57;23.3.2018 16:57;closed;[];3;68;Black changes '#:' to '# :';https://api.github.com/repos/ambv/black/issues/68;https://github.com/ambv/black/issues/68;Operating system: Mac OS  Python version: 3.6.4  Black version: 18.3a3  Does also happen on master: yes    ---    '#:' are used by Sphinx to generate documentation on object attributes.    Black erroneously changes them to '# :', like in this example:    ```  -    #: Environment variable used to locate a config file to load last (after  -    #: instance config file). Use this if you want to override some settings  -    #: on a configured instance.  +    # : Environment variable used to locate a config file to load last (after  +    # : instance config file). Use this if you want to override some settings  +    # : on a configured instance.  ```;sfermigier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.3.2018 8:45;23.3.2018 16:48;23.3.2018 16:48;closed;[];2;69;Black could split long import statements;https://api.github.com/repos/ambv/black/issues/69;https://github.com/ambv/black/issues/69;Operating system: Mac OS  Python version: 3.6.4  Black version: 18.3a3  Does also happen on master: yes    ---    Black joins long import statements, like in this example:    ```  -from flask import Blueprint, Flask, _request_ctx_stack, abort, \  -    appcontext_pushed, current_app, g, render_template, request, \  -    request_started  +from flask import Blueprint, Flask, _request_ctx_stack, abort, appcontext_pushed, current_app, g, render_template, request, request_started  ```    In this case, and unlike in issue https://github.com/ambv/black/issues/67 , it's OK to ignore the backslashes, but it would be better if the line was split to the proper length afterwards.    Since isort (https://pypi.python.org/pypi/isort) does a very good job at sorting and formatting imports, it's not a big deal if one is willing to run `isort` after `black`. OTOH, since Black aims at providing an integrated solution, Black should probably do the splitting (and leave the sorting to isort, since this can have side effects).  ;sfermigier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.3.2018 17:14;25.3.2018 3:00;25.3.2018 3:59;closed;[documentation, good first issue];5;70;create Sphinx docs and ReadTheDocs hosting;https://api.github.com/repos/ambv/black/issues/70;https://github.com/ambv/black/issues/70;We should have Sphinx documentation in the repo, and probably host them on RTD.;carljm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.3.2018 21:09;23.3.2018 22:27;23.3.2018 22:27;closed;[];1;71;add sphinx docs skeleton;https://api.github.com/repos/ambv/black/issues/71;https://github.com/ambv/black/pull/71;Partially addresses #70.    A first pass at docs.;willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.3.2018 15:15;24.3.2018 20:02;24.3.2018 21:09;closed;[];4;72;Reduce noise;https://api.github.com/repos/ambv/black/issues/72;https://github.com/ambv/black/issues/72;IMO `already well formatted, good job` lines are pretty useless, especially on big projects. Currently it's not possible to silence them without some bash magic since all output is printed to stderr. Would it make sense to provide an option to not print these lines?;roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.3.2018 15:22;31.3.2018 20:52;31.3.2018 20:52;closed;[bug, design];4;73;Lines should break before all binary operators;https://api.github.com/repos/ambv/black/issues/73;https://github.com/ambv/black/issues/73;Style of line breaks is not consistent.    ```python  (      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  )    (      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  )    (      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  )    (      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa      and aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  )    (      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa      or aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  )  ```    According to [PEP8](https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator), lines should break before all binary operators.;roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.3.2018 11:58;27.3.2018 7:56;27.3.2018 7:56;closed;[bug, empty lines];1;74;Empty lines within functions and class body definitions are not removed;https://api.github.com/repos/ambv/black/issues/74;https://github.com/ambv/black/issues/74;This is considered already formatted by black    ```python  def test():      1                  2      class X:              1  ```    Operating system: Ubuntu  Python version: 3.6.3  Black version: 18.3a3  Does also happen on master: yes  ;roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.3.2018 18:54;31.3.2018 20:21;26.5.2018 2:38;closed;[];12;75;Normalize string quotes;https://api.github.com/repos/ambv/black/issues/75;https://github.com/ambv/black/pull/75;Convert simple double-quoted strings to single-quoted. Convert triple (single) quoted strings to triple (double) quoted. Do not touch any strings that have backslashes or quotes inside the string.    Fixes #51.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.3.2018 9:53;26.3.2018 10:00;26.3.2018 10:03;closed;[];2;76;README: Consistently style the name;https://api.github.com/repos/ambv/black/issues/76;https://github.com/ambv/black/pull/76;;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.3.2018 10:38;26.3.2018 10:43;26.3.2018 10:43;closed;[];3;77;Include .out file(s) in the distribution;https://api.github.com/repos/ambv/black/issues/77;https://github.com/ambv/black/pull/77;> FileNotFoundError: [Errno 2] No such file or directory: '/home/user/pkg/build/black/src/black-18.3a4/tests/debug_visitor.out';polyzen;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.3.2018 13:28;27.3.2018 1:47;3.4.2018 8:23;closed;[];14;78;Do not show messages when file was read from standard input;https://api.github.com/repos/ambv/black/issues/78;https://github.com/ambv/black/issues/78;When running `black -` messages `- already well formatted, good job.` and `reformatted -` should not be shown.;proofit404;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.3.2018 13:38;26.3.2018 22:41;26.3.2018 22:41;closed;[];5;79;Add Emacs text editor integration to the README.;https://api.github.com/repos/ambv/black/issues/79;https://github.com/ambv/black/pull/79;;proofit404;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.3.2018 22:33;27.3.2018 3:41;27.3.2018 3:41;closed;[bug, lib2to3];1;80;Cannot format if at least one space on empty line in file;https://api.github.com/repos/ambv/black/issues/80;https://github.com/ambv/black/issues/80;Operating system: MacOS 10.12.6  Python version: 3.6.4  Black version: 18.3a4  Does also happen on master: yes      ```  import sys       def printunc():      pass  ```    This small file with tiny whitespace on 3rd line will not parse with error `error: cannot format test.py: Cannot parse: 3:0: `  Is it normal behavior?        ;movalex;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.3.2018 19:03;9.4.2018 21:00;10.4.2018 15:47;closed;[];8;81;README: Add instructions for PyCharm;https://api.github.com/repos/ambv/black/issues/81;https://github.com/ambv/black/pull/81;"Instructions to add `black` to ""External Tools"" in PyCharm.    Adapted from https://kirankoduru.github.io/python/pylint-with-pycharm.html";stevoisiak;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.3.2018 6:26;28.3.2018 19:12;28.3.2018 19:32;closed;[];2;82;document Black classes, functions, exceptions;https://api.github.com/repos/ambv/black/issues/82;https://github.com/ambv/black/pull/82;;willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.3.2018 7:08;30.3.2018 19:49;30.3.2018 20:11;closed;[];2;83;[WIP] use sphinx-click to autodoc cli;https://api.github.com/repos/ambv/black/issues/83;https://github.com/ambv/black/pull/83;Opening as a WIP since the PR doesn't really improve on what we have currently. It's an option to autodoc the CLI now or in the future.;willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.3.2018 12:20;28.3.2018 18:22;28.3.2018 18:22;closed;[];1;84;black doesn't respect the line length in a list with comments;https://api.github.com/repos/ambv/black/issues/84;https://github.com/ambv/black/issues/84;Hi,    I've stumbled upon the following problem. Trying to reformat the code:    ```python  test = [      (None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)      # et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea t  ]  ```    Produces:    ```  test_black.py already well formatted, good job.  ```    Which is clearly not the case since the lines are too long. I think it has something to do with the comment in the list.    Operating system: Ubuntu 16.04  Python version: 3.6.1  Black version: master  Does also happen on master: yes;Lukas0907;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.3.2018 0:40;29.3.2018 16:27;29.3.2018 16:27;closed;[documentation, question];1;85;How long will Black keep formatting Python 2 files?;https://api.github.com/repos/ambv/black/issues/85;https://github.com/ambv/black/issues/85;question, not a bug  https://github.com/python/peps/blob/master/pep-0373.txt  python2 support is to be dropped in 2020.  Does mantainer plan to drop 2.7 altogether at some point? If yes, when will that happen?    I consider using Black in existing projects. In my company we still use 2.7, my rough estimation is we will need at least a year to fully migrate.;fried-sausage;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.3.2018 13:17;29.3.2018 20:26;29.3.2018 20:26;closed;[design, enhancement, wontfix];3;86;Should black remove unused imports?;https://api.github.com/repos/ambv/black/issues/86;https://github.com/ambv/black/issues/86;I've noticed that right now Black doesn't do that.  I'm wondering whether it's something that Black should take care of?;MichalPodeszwa;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.3.2018 21:19;1.4.2018 0:46;1.4.2018 0:46;closed;[enhancement];3;87;Support diff output;https://api.github.com/repos/ambv/black/issues/87;https://github.com/ambv/black/issues/87;Over on Microsoft/vscode-python#1153 people are asking for support of Black in VS Code. Having diff output from black itself would make this a bit easier for someone to do.;brettcannon;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.3.2018 22:43;30.3.2018 0:21;4.4.2018 13:19;closed;[];3;88;Fix --check with multiple files;https://api.github.com/repos/ambv/black/issues/88;https://github.com/ambv/black/pull/88;Passing multiple files with --check would previously result in the report being printed as if the files had been written to:    ```console  $ black --check foo.py   would reformat foo.py  $ black --check foo.py bar.py   reformatted foo.py  bar.py already well formatted, good job.  All done! ? ? ?  1 file reformatted, 1 file left unchanged.  ```    Now the output is correct when multiple files are checked.;anowlcalledjosh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.3.2018 2:40;30.3.2018 15:36;30.3.2018 15:36;closed;[];2;89;use conda for readthedocs;https://api.github.com/repos/ambv/black/issues/89;https://github.com/ambv/black/pull/89;This PR adds 2 yaml files so that RTD will use conda to build the docs environment.     [Rendered test docs on RTD](http://test-black.readthedocs.io/en/doc-conda/reference/reference_summary.html);willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.3.2018 10:55;24.4.2018 21:42;25.4.2018 6:21;closed;[design];8;90;What's up with the extra newline after return/yield/etc?;https://api.github.com/repos/ambv/black/issues/90;https://github.com/ambv/black/issues/90;It seems very idiosyncratic – are there any existing style guides that do this? I think of vertical whitespace as a separator, not a way of emphasizing the previous line. Why do you put the emphasis line after the control statement, instead of before it? Why do these statements in particular need extra emphasis? If they do, then wouldn't it be better to configure your syntax highlighter to wrap them in `<b><blink>...</blink></b>` or something? Should we ask Guido to rename the tokens to `RETURN` and `YIELD` to make sure no-one misses them? (Presumably during the transition period we'd have to do `from __future__ import SHOUTY_TOKENS`, but `black` could insert that for us.)    Of course all style guidelines are idiosyncratic and part of the reward for spending lots of time working on a tool like `black` is to make sure that it's *your* idiosyncratic preferences that everyone ends up using, so feel free to ignore this. But I figured I'd at least open an issue so people can click the little emoji buttons before it gets closed as WONTFIX.;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.3.2018 16:03;12.4.2018 8:34;12.4.2018 8:34;closed;[design];10;91;Suggestion: Don't join pretty formatted tuples/dicts even if they fit in one line;https://api.github.com/repos/ambv/black/issues/91;https://github.com/ambv/black/issues/91;"Could we add extra logic that won't always join lines if they fit into max length?  I believe that it's very common for people to pretty format such data structures with each entry on new line.  For example such code formatting in django docs:  <img width=""909"" alt=""2018-03-30 16 50 20"" src=""https://user-images.githubusercontent.com/367259/38139995-97ad649e-343a-11e8-9423-880e9b177697.png"">      ```  $ cat a.py  YEAR_IN_SCHOOL_CHOICES = (      ('FR', 'Freshman'),      ('SO', 'Sophomore'),      ('JR', 'Junior'),      ('SR', 'Senior'),  )    $ cat a.py| black -  YEAR_IN_SCHOOL_CHOICES = (      ('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior')  )    $ cat a.py  CONST = {      'a': 'a',      'b': 'b',  }    $ cat a.py| black -  CONST = {'a': 'a', 'b': 'b'}  ```    Something like what prettier do for js objects would be ideal:    ```  $ cat a.js  CONST = {    a: 'a',    b: 'b',  }    $ prettier a.js  CONST = {    a: 'a',    b: 'b',  }";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.3.2018 17:54;null;18.9.2018 21:03;open;[];4;92;[WIP] Trying some different options for a PEP8-like style reference;https://api.github.com/repos/ambv/black/issues/92;https://github.com/ambv/black/pull/92;[rendered guide landing page](http://test-black.readthedocs.io/en/style-guide/style_guide/style_guide.html)    1. [one possible style for content page](http://test-black.readthedocs.io/en/style-guide/style_guide/line_wrap.html)  2. [another option](http://test-black.readthedocs.io/en/style-guide/style_guide/guards.html)    Goals:  - more visual than text  - examples (input and Black) displayed  - make it easy to reference back to PEP 8;willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.3.2018 0:18;31.3.2018 1:48;31.3.2018 1:48;closed;[duplicate];1;93;Consider rule for fluent interface / method chaining;https://api.github.com/repos/ambv/black/issues/93;https://github.com/ambv/black/issues/93;Particularly in py-data, we often use long method chains - aka fluent programming    The 'best' approach to grouping items in a chained statement is by method, including any arguments that method takes. By 'best', I mean groups of items which are self-contained - i.e. the items within a group influence other items in their group, but don't influence items outside of their group    But at the moment black is splitting methods _from_ their arguments, while grouping methods where possible. Take a case:    ```diff       result = (  -        data_set  -        .round(0)  -        .isin([0])  -        .sel(dim2=0, dim3='a')  -        .isel(dim1=[0, 1])  -        .drop(['time', 'dim3', 'dim2', 'numbers'])  -        .squeeze()  +        data_set.round(0).isin([0]).sel(dim2=0, dim3='a').isel(  +            dim1=[0, 1]  +        ).drop(  +            ['time', 'dim3', 'dim2', 'numbers']  +        ).squeeze()       )  ```    Here, `.isel(dim1=[0, 1])` is a self-contained group of information;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.3.2018 2:15;31.3.2018 20:52;31.3.2018 20:53;closed;[];10;94;Lines now break before all delimiters;https://api.github.com/repos/ambv/black/issues/94;https://github.com/ambv/black/pull/94;The default behaviour is that now all lines break *before* delimiters,  instead of afterwards. The special cases for this are commas and  behaviour around args.    Resolves #73     I've also added my full name to the contributors list :wink:;autophagy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.3.2018 2:39;1.4.2018 9:17;1.4.2018 10:18;closed;[bug, invalid code];2;95;Error formatting 3 files in trio;https://api.github.com/repos/ambv/black/issues/95;https://github.com/ambv/black/issues/95;Using an install of black master (fa159bb3576b0d8a79) running on Debian testing's python 3.6, trying to format the trio source code, it fails on 3 different files. Reproduction script:    ```  $ git clone git@github.com:python-trio/trio.git  $ cd trio  $ git checkout 24cf95a62e9c6b683f7f875201dc2649a33230d8  $ black trio  ```    Errors in the output:    ```  error: cannot format trio/tests/test_socket.py: 18  error: cannot format trio/tests/test_highlevel_open_tcp_stream.py: INTERNAL ERROR: Black produced invalid code: invalid syntax (<unknown>, line 298). Please report a bug on https://github.com/ambv/black/issues.  This invalid output might be helpful: /tmp/blk_usla4iw_.log  error: cannot format trio/_core/tests/test_run.py: INTERNAL ERROR: Black produced code that is not equivalent to the source.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /tmp/blk_8btywbcq.log  ```    Here are the log files:    [blk_8btywbcq.log](https://github.com/ambv/black/files/1865051/blk_8btywbcq.log)  [blk_usla4iw_.log](https://github.com/ambv/black/files/1865052/blk_usla4iw_.log)  ;njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.3.2018 22:38;31.3.2018 23:42;31.3.2018 23:42;closed;[];3;96;describe how black handles string literals;https://api.github.com/repos/ambv/black/issues/96;https://github.com/ambv/black/pull/96;This adds an explanation to the README and a docstring to `normalize_string_quotes()`;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.4.2018 23:01;3.4.2018 8:01;3.4.2018 8:01;closed;[];4;97;Use IntEnum instead of Enum;https://api.github.com/repos/ambv/black/issues/97;https://github.com/ambv/black/pull/97;The code is failing to detect properly that we are running in check mode because the `Enum` class is not being used properly. It's defined as:    ```  class WriteBack(Enum):      NO = 0      YES = 1      DIFF = 2  ```    And then in the code you can see this:    ```      report = Report(check=not write_back)  ```    However, that code always yields `False`:    ```  >>> class WriteBack(Enum):  ...     NO = 0  ...     YES = 1  ...     DIFF = 2  ...  >>> not WriteBack.NO  False  >>> not WriteBack.YES  False  >>> not WriteBack.DIFF  False  ```    This issue basically causes `black --check .` to always return 0.    Using `IntEnum` instead causes the logic to work as expected:    ```  >>> class WriteBack(IntEnum):  ...     NO = 0  ...     YES = 1  ...     DIFF = 2  ...  >>> not WriteBack.NO  True  >>> not WriteBack.YES  False  >>> not WriteBack.DIFF  False  ```  ;dbarrosop;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.4.2018 12:44;4.4.2018 23:45;4.4.2018 23:45;closed;[];4;98;Strings spanning multiple lines;https://api.github.com/repos/ambv/black/issues/98;https://github.com/ambv/black/issues/98;"Hi, thanks for creating black. I love it!    I have one issue though:  ```  x = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" \      ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" \      ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" \      ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" \      ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""  ```  is formatted to:  ```  x = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"" ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""  ```  i.e. one very long line.  Is this wanted behaviour?  ";ikatanic;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 3:26;12.4.2018 8:30;12.4.2018 8:30;closed;[bug, comments, lib2to3];3;99;Black can't parse lib2to3;https://api.github.com/repos/ambv/black/issues/99;https://github.com/ambv/black/issues/99;Installed black from master, and ran `black cpython/Lib/lib2to3` against a checkout of cpython/master.  Most files were fine, but six files fail to format.  Snipped output below:        error: cannot format fixes/fix_tuple_params.py: Cannot parse: 33:0:                   #patterns      ...      error: cannot format fixer_base.py: Cannot parse: 34:0:                     # Lower numbers will be run first.      ...      error: cannot format tests/data/different_encoding.py: cannot use --safe with this file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 12:35;4.4.2018 22:20;4.4.2018 22:20;closed;[];4;100;INTERNAL ERROR: Black produced code that is not equivalent to the source.;https://api.github.com/repos/ambv/black/issues/100;https://github.com/ambv/black/issues/100;"Operating system: Arch Linux  Python version: `Python 3.6.4`  Black version: `black, version 18.4a0`  Does also happen on master: Not tested when I started to write this issue but it's confusing when `blacking` code from different branches :joy_cat: :+1:     Hello @ambv and thanks for this :+1: I was using it for replacement of autopep8 in private project and I feel like it was time to test it in some of my Open Source projects.    So as black told me to report a bug so kindly:  > error: cannot format PyFunceble.py: INTERNAL ERROR: Black produced code that is not equivalent to the source.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /tmp/blk_z44me8pc.log    Here am I.    Here's the diff out of virtualenv:    ```diff  --- src  +++ dst  @@ -38877,11 +38877,11 @@                         s=                           'Expired:(.*)',  # str                       )  # /Str                       Str(                         s=  -                        ""Date d\\'expiration:(.*)"",  # str  +                        ""Date d'expiration:(.*)"",  # str                       )  # /Str                   )  # /List               )  # /Assign               If(                 body=  ```    and the diff into `virtualenv`:    ```diff  --- src  +++ dst  @@ -38877,11 +38877,11 @@                         s=                           'Expired:(.*)',  # str                       )  # /Str                       Str(                         s=  -                        ""Date d\\'expiration:(.*)"",  # str  +                        ""Date d'expiration:(.*)"",  # str                       )  # /Str                   )  # /List               )  # /Assign               If(                 body=  ```    The affected code was [PyFunceble](https://github.com/funilrys/PyFunceble/blob/9d22026da06169c92231ad0c5f9be0b0906537f4/PyFunceble.py#L2395) for the following line:    ```python  r'Date d\'expiration:(.*)']  ```    Thanks again :1st_place_medal:     Have a nice day/night.";funilrys;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 13:28;4.4.2018 18:53;4.4.2018 18:53;closed;[];2;101;Fix --check for multiple files;https://api.github.com/repos/ambv/black/issues/101;https://github.com/ambv/black/pull/101;Report would always be created with `check=False` in case of multiple files. Now we pass the correct flag value instead of guessing it.;ikatanic;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 15:55;4.4.2018 18:54;4.4.2018 18:54;closed;[];1;102;`--check` flag does not return status of 1 for directories of unformatted code;https://api.github.com/repos/ambv/black/issues/102;https://github.com/ambv/black/issues/102;"Operating system: macOS 10.13.4 (High Sierra)  Python version: 3.6.3  Black version: 18.4a0  Also happen on master: yes    ### Expected behaviour  When running `black --check repo`, where repo is a directory path with incorrectly formatted python code it returns a status code of 1 and the message `would reformat repo/`.    ### Actual behaviour    When running `black --check repo`, where repo is a directory path with incorrectly formatted python code, it outputs the message as though it was run without the `--check` flag and exits with a status of 0.    ### Steps to reproduce behaviour    ```  $ mkdir test_black  $ cd test_black/  $ virtualenv ve  Using base prefix '/Users/testuser/.pyenv/versions/3.6.3'  New python executable in /Users/testuser/test_black/ve/bin/python3.6  Also creating executable in /Users/testuser/test_black/ve/bin/python  Installing setuptools, pip, wheel...done.  $ source ve/bin/activate  (ve) $ git clone git@github.com:ambv/black.git  Cloning into 'black'...  remote: Counting objects: 691, done.  remote: Compressing objects: 100% (51/51), done.  remote: Total 691 (delta 42), reused 52 (delta 30), pack-reused 610  Receiving objects: 100% (691/691), 1.38 MiB | 941.00 KiB/s, done.  Resolving deltas: 100% (416/416), done.  (ve) $ pip install -e black/  Obtaining file:///Users/testuser/test_black/black  Collecting click (from black==18.4a0)    Using cached click-6.7-py2.py3-none-any.whl  Collecting attrs>=17.4.0 (from black==18.4a0)    Using cached attrs-17.4.0-py2.py3-none-any.whl  Installing collected packages: click, attrs, black    Running setup.py develop for black  Successfully installed attrs-17.4.0 black click-6.7  (ve) $ black --version  black, version 18.4a0  (ve) $ mkdir repo  (ve) $ echo ""print('foobar')"" > repo/foobar.py  (ve) $ black --check repo/foobar.py   would reformat repo/foobar.py  (ve) $ echo $?  1  (ve) $ black --check repo  would reformat repo/foobar.py  (ve) $ echo $?  1  (ve) $ echo ""print('baz')"" > repo/baz.py  (ve) $ black --check repo/baz.py   would reformat repo/baz.py  (ve) $ black --check repo  reformatted repo/baz.py  reformatted repo/foobar.py  All done! ? ? ?  2 files reformatted.  (ve) $ echo $?  0  (ve) $ cat repo/foobar.py   print('foobar')  (ve) $ cat repo/baz.py   print('baz')  ```  The code remains unformatted, but the output of the command is unexpected.";nathanbegbie;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 18:01;4.4.2018 22:19;5.4.2018 0:10;closed;[];17;103;Adapter for pre-commit;https://api.github.com/repos/ambv/black/issues/103;https://github.com/ambv/black/issues/103;I'm not sure if its doable today (given explicit Python 3.6 requirement), but would be great to provide out of the box support for the pre-commit framework: https://pre-commit.com/;dcramer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 19:59;4.4.2018 22:19;5.4.2018 0:10;closed;[];2;104;Add integration for pre-commit.com;https://api.github.com/repos/ambv/black/issues/104;https://github.com/ambv/black/pull/104;Fixes #103;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 21:00;4.4.2018 22:20;4.4.2018 22:20;closed;[];1;105;Handle backslashes in raw strings while normalizing;https://api.github.com/repos/ambv/black/issues/105;https://github.com/ambv/black/pull/105;In raw strings, a single backslash means a literal backslash. It is also used to escape quotes if it precedes them. This means it is impossible to change the quote type for strings that contain an unescaped version of the other quote type (see test cases).  Fixes #100;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 23:04;5.4.2018 0:09;5.4.2018 0:09;closed;[];1;106;Update `language-version` => `language_version`;https://api.github.com/repos/ambv/black/issues/106;https://github.com/ambv/black/pull/106;;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.4.2018 23:08;5.4.2018 0:07;5.4.2018 0:08;closed;[];3;107;Add a description for `black`;https://api.github.com/repos/ambv/black/issues/107;https://github.com/ambv/black/pull/107;Bikeshedding welcome, this is the string appears on the hooks page    See also: https://github.com/pre-commit/pre-commit.github.io/pull/160;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 1:43;null;5.4.2018 3:31;open;[documentation];4;108;#NÁZEV?;https://api.github.com/repos/ambv/black/issues/108;https://github.com/ambv/black/issues/108;"Mentioned briefly on [twitter](https://twitter.com/theomn/status/981596730696245248)    Given a 2.7 codebase with print statements in it, such as this `bad.py`:    ```python    def plain_print(arg):      """"""simple function to print things plainly""""""          print arg  ```  `black` reports the following:  ```  $ black bad.py   error: cannot format bad.py: cannot use --safe with this file";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 10:48;19.4.2018 7:30;19.4.2018 7:30;closed;[design, enhancement];14;109;Suggestion: Cache already formatted files;https://api.github.com/repos/ambv/black/issues/109;https://github.com/ambv/black/issues/109;"We have a decently sized Python code base and running black is ""slow"" (~10 seconds), which can be a bit annoying when run often. A solution for this would be to cache already formatted files (eg by storing a checksum of them in a file somewhere).    I've implemented a hacky solution for this and for my project, on a fully black-ed + cacheed run takes ~1s vs the ~10s for fully black-ed + uncached. The initial run (fully non-black + uncached) takes significantly longer, so clearly more work is needed should this feature be desired, but before I continue working on this I want to know if this is something that is desired and could eventually be merged in.";ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 11:19;5.4.2018 11:28;5.4.2018 11:28;closed;[];3;110;Handle arbitrary number of backslashes during string normalization;https://api.github.com/repos/ambv/black/issues/110;https://github.com/ambv/black/pull/110;This should handle the issue found in #99 where black would output invalid code;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 11:30;12.4.2018 8:30;12.4.2018 8:30;closed;[bug];2;111;Formatting of unpacking inside dictionary literal;https://api.github.com/repos/ambv/black/issues/111;https://github.com/ambv/black/issues/111;"Expected:  ```python  params = {      ""id"": ""1"",      ""type"": ""type"",      ""started_at"": now(),      ""ended_at"": now() + timedelta(days=10),      ""priority"": 1,      ""import_session_id"": 1,      **kwargs,  }  ```    Actual:  ```python  params = {      ""id"": ""1"",      ""type"": ""type"",      ""started_at"": now(),      ""ended_at"": now() + timedelta(days=10),      ""priority"": 1,      ""import_session_id"": 1, **kwargs  }  ```  Operating system: Ubuntu  Python version: 3.6   Black version: 18.4a0  Does also happen on master: yes";roganov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 12:21;12.4.2018 8:30;12.4.2018 8:30;closed;[bug, comments, lib2to3];1;112;Cannot parse: 5:0:         # add_compiler(compiler);https://api.github.com/repos/ambv/black/issues/112;https://github.com/ambv/black/issues/112;Operating system: macOS High Sierra  Python version: 3.6.4  Black version: 18.4a0  Does also happen on master: Yes    ```console  $ cat 1.py  ```    ```python  if 'PYTHON' in os.environ:      add_compiler(compiler_from_env())  else:      # for compiler in compilers.values():          # add_compiler(compiler)      add_compiler(compilers[(7.0, 32)])      # add_compiler(compilers[(7.1, 64)])  ```    ```console  $ black 1.py  error: cannot format 1.py: Cannot parse: 5:0:         # add_compiler(compiler)  ```;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.4.2018 21:07;9.4.2018 20:35;9.4.2018 20:35;closed;[];3;113;black not producing flake8 compatible code;https://api.github.com/repos/ambv/black/issues/113;https://github.com/ambv/black/issues/113;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Linux  Python version: 3.6.3  Black version: 18.4a0  Does also happen on master: yes    I've run black on a codebase that is already flake8 compatible, and it ends up reformatting things in such a way that it fails a whole bunch of flake8 checks. For example:  ```  ?  balrog git:(black2) ? flake8 auslib scripts uwsgi *.py client  ?  balrog git:(black2) ? black -l 120 --fast auslib scripts uwsgi *.py agent client   ?  balrog git:(black2) ? flake8 auslib scripts uwsgi *.py client  auslib/db.py:21:121: E501 line too long (162 > 120 characters)  from auslib.util.rulematching import matchChannel, matchVersion, matchBuildID, matchMemory, matchSimpleExpression, matchCsv, matchLocale, matchBoolean, matchRegex                                                                                                                          ^  auslib/db.py:1779:17: W503 line break before binary operator                  & ((self.buildTarget == updateQuery[""buildTarget""]) | (self.buildTarget == null()))                  ^  auslib/db.py:1780:17: W503 line break before binary operator                  & ((self.headerArchitecture == updateQuery[""headerArchitecture""]) | (self.headerArchitecture == null()))                  ^  auslib/db.py:2061:21: W503 line break before binary operator                      | (self.db.releases.name == self.db.rules.fallbackMapping)                      ^  auslib/log.py:9:121: E501 line too long (134 > 120 characters)  log_format = ""%(asctime)s - %(levelname)s - PID: %(process)s - Request: %(requestid)s - %(name)s.%(funcName)s#%(lineno)s: %(message)s""  ```    One of the diffs that seems to be causing some of the issues is:  ```  -                ((self.product == updateQuery['product']) | (self.product == null())) &  -                ((self.buildTarget == updateQuery['buildTarget']) | (self.buildTarget == null())) &  -                ((self.headerArchitecture == updateQuery['headerArchitecture']) | (self.headerArchitecture == null()))  +                ((self.product == updateQuery[""product""]) | (self.product == null()))  +                & ((self.buildTarget == updateQuery[""buildTarget""]) | (self.buildTarget == null()))  +                & ((self.headerArchitecture == updateQuery[""headerArchitecture""]) | (self.headerArchitecture == null()))  ```    (And many more - it looks like around ~150 total flake8 failures).    This can be reproduced locally by cloning https://github.com/mozilla/balrog, changing tox.ini's max-line-length to 120 (I'm planning to change the line length at the same time as reformatting with Black), and running flake8 before & after running black.";mozbhearsum;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.4.2018 10:24;6.4.2018 17:02;6.4.2018 17:02;closed;[];2;114;Document that W503 is not compliant with PEP 8;https://api.github.com/repos/ambv/black/issues/114;https://github.com/ambv/black/pull/114;This should hopefully address #52 :sparkles: ;autophagy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.4.2018 10:44;9.4.2018 23:36;9.4.2018 23:36;closed;[];4;115;Add support for all valid string literals;https://api.github.com/repos/ambv/black/issues/115;https://github.com/ambv/black/pull/115;Fixes #3. This was the cause for black not being able to support `rf` strings. Now this forked version of `lib2to3` only parses valid string literals as defined by https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.4.2018 11:34;27.9.2018 16:49;27.9.2018 16:49;closed;[enhancement, not a bug];10;116;Vim plugin doesn't work with statically compiled Python;https://api.github.com/repos/ambv/black/issues/116;https://github.com/ambv/black/issues/116;"Operating system: Arch  Python version: 3.6.4  Black version: master  Does also happen on master: yep  vim version: 8.0 - https://gist.github.com/zsol/9c3d853bebc66128f611ae5a4d9d4c69    ```  Error detected while processing /home/zsol/.vim/plugin/black.vim:  line  101:  Traceback (most recent call last):    File ""<string>"", line 43, in <module>    File ""/home/zsol/.vim/black/lib/python3.6/site-packages/black.py"", line 32, in <module>      from attr import dataclass, Factory    File ""/home/zsol/.vim/black/lib/python3.6/site-packages/attr/__init__.py"", line 5, in <module>      from . import converters, exceptions, filters, validators    File ""/home/zsol/.vim/black/lib/python3.6/site-packages/attr/filters.py"", line 7, in <module>      from ._compat import isclass    File ""/home/zsol/.vim/black/lib/python3.6/site-packages/attr/_compat.py"", line 139, in <module>      set_closure_cell = make_set_closure_cell()    File ""/home/zsol/.vim/black/lib/python3.6/site-packages/attr/_compat.py"", line 131, in make_set_closure_cell      set_closure_cell = ctypes.pythonapi.PyCell_Set    File ""/usr/lib/python3.6/ctypes/__init__.py"", line 361, in __getattr__      func = self.__getitem__(name)    File ""/usr/lib/python3.6/ctypes/__init__.py"", line 366, in __getitem__      func = self._FuncPtr((name_or_ordinal, self))  AttributeError: vim: undefined symbol: PyCell_Set  ```    full trace: https://gist.github.com/zsol/3b800e69ed8995252e8be368b962790e";zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.4.2018 11:42;11.4.2018 4:01;24.9.2018 14:48;closed;[];5;117;Pre-commit integration issue;https://api.github.com/repos/ambv/black/issues/117;https://github.com/ambv/black/issues/117;I couldn't install this version and seems `pre-commit` integration is broken because of it.;sfdye;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.4.2018 11:50;30.5.2018 21:56;30.5.2018 22:01;closed;[design];72;118;Single quotes option;https://api.github.com/repos/ambv/black/issues/118;https://github.com/ambv/black/issues/118;Hi! Although Black _now_ prefers doubles, can we have an option to keep single quotes? Forcing double quotes would make this great project unusable for many users who picked the rule of using single quotes.    Operating system: MacOS  Python version: 3.6  Black version: 18.4a0  Does also happen on master: yes      ;bofm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.4.2018 10:54;16.5.2018 7:16;16.5.2018 7:16;closed;[design];2;119;Brackets break a line when code is in multiple lines;https://api.github.com/repos/ambv/black/issues/119;https://github.com/ambv/black/issues/119;"Python version: 3.6.4  Black version: 18.4a0  Does also happen on master: yes    It's a little difficult to explain my problem. But I think the example below should be clear.    what black outputs:    ```python  a_function_who_return_a_list(      ""a really really really really really long string with one line""  )[      0  ]    a_function_who_return_a_function(      """"""a string with      two lines""""""  )(      ""argument""  )  ```    what I expect:    ```python  a_function_who_return_a_list(      ""a really really really really really long string with one line""  )[0]    a_function_who_return_a_function(      """"""a string with      two lines""""""  )(""argument"")  ```  ";ocavue;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.4.2018 11:53;13.4.2018 20:31;13.4.2018 20:31;closed;[bug, unstable formatting];1;120;Different output between first and second pass if original string escapes quotes unnecessarily;https://api.github.com/repos/ambv/black/issues/120;https://github.com/ambv/black/issues/120;"Example string: `'he said \""hello\""'`  First pass formats it as `""he said \""hello\""""`  Second pass formats it as `'he said ""hello""'`";zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.4.2018 12:08;11.4.2018 10:38;11.4.2018 10:38;closed;[duplicate];1;121;Black considers `from x import (y,)` well-formatted;https://api.github.com/repos/ambv/black/issues/121;https://github.com/ambv/black/issues/121;Does also happen on master: yes    I would expect *Black* to remove the parenthesis here and produce  ```  from x import y  ```;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.4.2018 22:49;11.4.2018 22:58;11.4.2018 22:58;closed;[];1;122;Cannot parse complex dict/list expansion;https://api.github.com/repos/ambv/black/issues/122;https://github.com/ambv/black/issues/122;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Ubuntu 16.04  Python version: 3.6.5  Black version: 18.4a0 and master  Does also happen on master: Yes    It seems black fail parsing file containing dict/list expansion combined with if/else structure:  ```  (venv) ?  black git:(master) ? cat dict_expansion.py   print(**{} if True else {})  (venv) ?  black git:(master) ? cat list_exansion.py   print(*[] if True else [])  (venv) ?  black git:(master) ? python dict_expansion.py     (venv) ?  black git:(master) ? python list_exansion.py     (venv) ?  black git:(master) ? python -m black dict_expansion.py   error: cannot format dict_expansion.py: Cannot parse: 1:6: print(**{} if True else {})  (venv) ?  black git:(master) ? python -m black list_exansion.py   error: cannot format list_exansion.py: Cannot parse: 1:10: print(*[] if True else [])  ```    However if parenthesis are added before the expansion (e.g. `print(**({} if True else {}))`) black works fine.    And btw thanks for this awesome tool, I've got already [two](https://github.com/touilleMan/godot-python) [projects](https://github.com/scille/parsec-cloud) converted to it ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.4.2018 22:52;12.4.2018 4:55;29.4.2018 18:04;closed;[];2;123;Add windows support for black vim plugin;https://api.github.com/repos/ambv/black/issues/123;https://github.com/ambv/black/pull/123;This is mostly a best effort support, and I only tested it on my  machine.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.4.2018 23:06;12.4.2018 20:19;12.4.2018 20:19;closed;[bug];1;124;Tests fail on windows;https://api.github.com/repos/ambv/black/issues/124;https://github.com/ambv/black/issues/124;"I suspected this had more to do with my git client setup than an actual bug, but since I'm just using the stock GitHub Windows GUI and these files open just fine in notepad, I thought I'd file an issue here.    The problem is caused by these characters: https://github.com/ambv/black/blob/master/tests/expression.py#L138-L139    ```  ERROR: test_expression_diff (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""c:\users\zsolz\documents\github\black\tests\test_black.py"", line 165, in test_expression_diff      tmp_file = Path(black.dump_to_file(source))    File ""c:\users\zsolz\documents\github\black\black.py"", line 2161, in dump_to_file      f.write(lines)    File ""C:\Users\zsolz\.virtualenvs\black-TlIYXM7K\lib\tempfile.py"", line 483, in func_wrapper      return func(*args, **kwargs)    File ""C:\Users\zsolz\.virtualenvs\black-TlIYXM7K\lib\encodings\cp1252.py"", line 19, in encode      return codecs.charmap_encode(input,self.errors,encoding_table)[0]  UnicodeEncodeError: 'charmap' codec can't encode character '\u0142' in position 4011: character maps to <undefined>  ```    ```  ERROR: test_expression_ff (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""c:\users\zsolz\documents\github\black\tests\test_black.py"", line 150, in test_expression_ff      tmp_file = Path(black.dump_to_file(source))    File ""c:\users\zsolz\documents\github\black\black.py"", line 2161, in dump_to_file      f.write(lines)    File ""C:\Users\zsolz\.virtualenvs\black-TlIYXM7K\lib\tempfile.py"", line 483, in func_wrapper      return func(*args, **kwargs)    File ""C:\Users\zsolz\.virtualenvs\black-TlIYXM7K\lib\encodings\cp1252.py"", line 19, in encode      return codecs.charmap_encode(input,self.errors,encoding_table)[0]  UnicodeEncodeError: 'charmap' codec can't encode character '\u0142' in position 4011: character maps to <undefined>  ```    ";zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.4.2018 0:42;20.8.2018 15:47;20.8.2018 15:47;closed;[bug, lib2to3];2;125;Can't parse `return (i * 2 async for i in arange(n))`;https://api.github.com/repos/ambv/black/issues/125;https://github.com/ambv/black/issues/125;Title says all.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.4.2018 9:33;12.4.2018 20:19;29.4.2018 18:04;closed;[];3;126;Open temporary files with utf-8 encoding;https://api.github.com/repos/ambv/black/issues/126;https://github.com/ambv/black/pull/126;This is not the default on Windows. Fixes #124 ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.4.2018 20:42;24.4.2018 22:46;24.4.2018 22:46;closed;[design];5;127;Wrapping imports is incompatible with isort;https://api.github.com/repos/ambv/black/issues/127;https://github.com/ambv/black/issues/127;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Mac OS X 10.13.4  Python version: 3.6.5  Black version: 18.4a1  Does also happen on master: Yes    For example,  ```  from django.http import HttpResponse, HttpResponseBadRequest, JsonResponse, HttpResponse, HttpRequest  ```    would be formatted as    ```  from django.http import (      HttpResponse, HttpResponseBadRequest, JsonResponse, HttpResponse, HttpRequest  )  ```    This is probably personal, but this looks a little bit weird. I would suggest this as a better formatting:  ```  from django.http import (      HttpRequest,      HttpResponse,      HttpResponseBadRequest,      JsonResponse,  )  ```;shivawu;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.4.2018 22:20;13.4.2018 20:31;13.4.2018 20:31;closed;[];2;128;Handle unnecessarily escaped strings;https://api.github.com/repos/ambv/black/issues/128;https://github.com/ambv/black/pull/128;Remove extraneous backslashes from the original string. This stabilizes formatting output, so fixes #120.  ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.4.2018 7:46;24.4.2018 18:36;24.4.2018 18:36;closed;[enhancement, help wanted];5;129;Plugin installation via Vim plugin managers (Vundle, etc.);https://api.github.com/repos/ambv/black/issues/129;https://github.com/ambv/black/issues/129;It would be nice to have `black` vim plugin installed via popular vim package managers e.g. Vundle.  ;skgbanga;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.4.2018 23:58;23.4.2018 21:35;23.4.2018 21:35;closed;[bug];4;130;--diff doesn't display full file path;https://api.github.com/repos/ambv/black/issues/130;https://github.com/ambv/black/issues/130;Operating system: Ubuntu 16.04.4  Python version: 3.6.3  Black version: 18.4a2  Does also happen on master: I believe so    Doing `black --diff path/to/foo.py` results in:    ```diff  --- foo.py  (original)  +++ foo.py  (formatted)  @@ -39,24 +39,21 @@  ...  ```    caused by the following two lines:    https://github.com/ambv/black/blob/f294cc272c3aa5b8d3cd35b9f9283721b7e458d8/black.py#L298-L299    IMO, Black should print the full path to each file it formats in `--diff` output to be consistent with the behaviour of other diff-producing programs. Not printing the full path also makes it hard to read several concatenated diffs (especially when filenames are duplicated in different directories).;anowlcalledjosh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.4.2018 0:33;24.4.2018 18:36;24.4.2018 18:43;closed;[];10;131;Add install instructions for Vim plugin;https://api.github.com/repos/ambv/black/issues/131;https://github.com/ambv/black/pull/131;"As far as I can see, there are basically two options here:    - put the Vim plugin in the root of the repo (in `plugin/black.vim` rather than `vim/plugin/black.vim`)      That makes installing it really easy:      ```    Plug 'ambv/black'    ```      but means you have a Vim-specific `plugin` directory in the root of the repo.    - leave the Vim plugin where it is, in the `vim` directory      This makes installation marginally less easy (and I also don't know how this method works with e.g. Pathogen or `packadd`):      ```    Plug 'ambv/black', {'rtp': 'vim'}    ```      but keeps the repo ""cleaner""(?)    I've done the latter, but I'm happy to defer to anybody's preference.    (I guess you could also have a separate `black.vim` repo that has the normal Vim plugin structure";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.4.2018 11:47;16.4.2018 10:34;16.4.2018 10:35;closed;[bug];1;132;Trailing comma is removed in complex dict literal;https://api.github.com/repos/ambv/black/issues/132;https://github.com/ambv/black/issues/132;Operating system: Ubuntu 16.04.4  Python version: 3.6.3  Black version: 18.4a2  Does also happen on master: yes (since 18.4a2 == master)    Testcase:    ```python  mapping = {      A: 0.25 * (10.0 / 12),      B: 0.1 * (10.0 / 12),      C: 0.1 * (10.0 / 12),      D: 0.1 * (10.0 / 12),  }  ```    ```diff  $ black --diff test.py  --- test.py  (original)  +++ test.py  (formatted)  @@ -1,7 +1,7 @@   mapping = {       A: 0.25 * (10.0 / 12),       B: 0.1 * (10.0 / 12),       C: 0.1 * (10.0 / 12),  -    D: 0.1 * (10.0 / 12),  +    D: 0.1 * (10.0 / 12)   }  ```    Black actively inserts trailing commas elsewhere, so I guess this is not intended.;anowlcalledjosh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.4.2018 15:12;22.4.2018 0:10;22.4.2018 0:10;closed;[bug, invalid code];1;133;Failure to reformat a lamba expression;https://api.github.com/repos/ambv/black/issues/133;https://github.com/ambv/black/issues/133;"Operating system: Ubuntu Bionic  Python version: 3.6.5  Black version: 18.4a2  Does also happen on master: yes (or, rather, with 18.4a2, but that's the latest commit on master)    I hit an error with black formatting https://github.com/openstack/python-openstackclient/blob/30b2203dc75a4fc776875b02258f8d54660249d7/openstackclient/tests/unit/compute/v2/test_server.py    The black log is  [blk_4urz_4d8.log](https://github.com/ambv/black/files/1912566/blk_4urz_4d8.log)    I isolated it down to the following as a reproduction case:    ```  foo = (lambda port_id, ignore_missing:         {""port1"": port1_resource,          ""port2"": port2_resource}[port_id])  ```    It seems to be line-length + lambda related. If I change the code to     ```  foo = (lambda port_id, ignore_missing:         {""a1"": a1_resource,          ""a2"": a2_resource}[port_id])  ```    it works.";emonty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.4.2018 20:24;16.4.2018 21:48;16.4.2018 22:59;closed;[design, wontfix];2;134;Gradual adoption: option to only format PEP8 errors;https://api.github.com/repos/ambv/black/issues/134;https://github.com/ambv/black/issues/134;If I were starting a project from scratch, I'd start with enforcing `black`. But most code is written on existing projects, and converting everything to `black` requires a high degree of confidence and share of agreement within contributors.    What do you think about enabling an option in `black` to reformat only:  - Code that violates PEP8 / some rules  - Code that has been changed    One of the nice attributes of `autopep8` is that it only changes code where there's a problem. This has two big advantages to adoption:  - The impact is limited to strict, unambiguous improvements  - Projects don't require everyone to agree that `autopep8` is the correct tool - an individual / subset can start using it for their contributions     Thanks again for the project;max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.4.2018 23:53;19.4.2018 0:47;19.4.2018 0:48;closed;[];7;135;SublimeText integration;https://api.github.com/repos/ambv/black/issues/135;https://github.com/ambv/black/issues/135;Hello,    I started a plugin for SublimeText 3 :  https://github.com/jgirardet/sublack    not yet in package control, you have to clone the repo to use it.    Only one feature at the moment : run black on the current file.    Opinions and tests are welcome.    Jimmy    ;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.4.2018 8:09;19.4.2018 2:27;19.4.2018 3:57;closed;[];4;136;Added caching;https://api.github.com/repos/ambv/black/issues/136;https://github.com/ambv/black/pull/136;This implements what was discussed in #109.    With this change,  Black will cache already formatted files using their file size and modification timestamp. The cache is per-user and will always be used unless Black is used with --diff or with code provided via standard input.    Cache files are located at:    * Windows: `C:\\Users\<username>\AppData\Local\black\black\Cache\<version>\cache.pkl`  * macOS: `/Users/<username>/Library/Caches/black/<version>/cache.pkl`  * Linux: `/home/<username>/.cache/black/<version>/cache.pkl`    This is the first time that I've used pipenv and I'm not sure that the changes to the lockfile are correct. Please let me know how I can fix this if necessary. ;ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.4.2018 9:30;17.4.2018 22:24;17.4.2018 22:24;closed;[];1;137;add sublack plugin for sublimetext;https://api.github.com/repos/ambv/black/issues/137;https://github.com/ambv/black/pull/137;;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.4.2018 10:07;17.4.2018 21:52;19.4.2018 1:59;closed;[];3;138;Parse complex expressions in parameters after * and **;https://api.github.com/repos/ambv/black/issues/138;https://github.com/ambv/black/pull/138;Allow `test`s after * and **, instead of only `expr`s in lib2to3's grammar. Fixes #2 ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.4.2018 11:33;19.4.2018 2:07;19.4.2018 2:08;closed;[not a bug, wontfix];1;139;Output if `--check` and `--quiet` are used;https://api.github.com/repos/ambv/black/issues/139;https://github.com/ambv/black/issues/139;Do I understand correctly that `--check` flag is basically a linter mode?    When I'm using it that way I don't want it to print 100 lines about already well formatted files, so naturally I use `--quiet` as well. But that also suppresses lines about not well formatted files, so even though exit code is non-zero there is nothing on stdout or stderr, which is not helpful.    What do you think about it?;ikatanic;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.4.2018 1:44;9.5.2018 8:59;9.5.2018 8:59;closed;[design];1;140;Black doesn't automatically manage parentheses in control flow statements and assignments;https://api.github.com/repos/ambv/black/issues/140;https://github.com/ambv/black/issues/140;Hi. I noticed that in this situation black doesn't reformat 79 line length:  ```  [alexbozhenko@alexbozhenko-fedora-20HGS1LM00 black]$ cat /etc/fedora-release   Fedora release 27 (Twenty Seven)  [alexbozhenko@alexbozhenko-fedora-20HGS1LM00 black]$ python3 -V  Python 3.6.3rc1+  [alexbozhenko@alexbozhenko-fedora-20HGS1LM00 ~]$ black --version  black, version 18.4a2  ```    [alexbozhenko@alexbozhenko-fedora-20HGS1LM00 ~]$ cat /tmp/test.py   ```  class Host(db.Model):        @property      def is_deploying(self):          return self.update_bios or self.reset_raid or self.install_os or self.debug_firmware  ```  ```  [alexbozhenko@alexbozhenko-fedora-20HGS1LM00 ~]$ black --line-length 79 /tmp/test.py   /tmp/test.py already well formatted, good job.  ```  Despite last line is 93 chars.    Does also happen on master?  -Yes    If I wrap 'return' condition in parentheses it does reformat.;alexbozhenko;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.4.2018 2:07;24.4.2018 21:22;24.4.2018 21:22;closed;[bug];4;141;Black does not follow line length rule with ternary expression;https://api.github.com/repos/ambv/black/issues/141;https://github.com/ambv/black/issues/141;"Operating system: MacOS  Python version: 3.6.4  Black version: 18.4a2  Does also happen on master: yes    Code:   ```  x = {      'a': (          some_very_long_value           if some_condition_smsmms           else another_long_value_smsmsms      )  }  ```    is being formatted to     ```  x = {      ""a"": (          some_very_long_value if some_condition else another_very_very_very_long_value      )  }  ```  by **black** despite line length settings.   ";hotsyk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.4.2018 10:00;19.4.2018 0:39;19.4.2018 2:50;closed;[];3;142;Support line range?;https://api.github.com/repos/ambv/black/issues/142;https://github.com/ambv/black/issues/142;Did black support line range? Like I have huge python file to edit, and just want to format part of the file (in Vim mostly)    In Vim I see `No range allowed`, so did black support line range? Or just vim-plugin didn't have that feature?;laixintao;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.4.2018 10:14;20.4.2018 10:16;29.4.2018 18:02;closed;[];4;143;Fix parsing of async for in comprehensions;https://api.github.com/repos/ambv/black/issues/143;https://github.com/ambv/black/pull/143;This basically merges in changes to lib2to3 from  https://github.com/python/cpython/commit/ac317700ce7439e38a8b420218d9a5035bba92ed    Fixes #125 ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.4.2018 10:31;null;12.9.2018 12:54;open;[design, enhancement, good first issue, help wanted];20;144;Black should have an opinion about doc strings;https://api.github.com/repos/ambv/black/issues/144;https://github.com/ambv/black/issues/144;"Operating system: Ubuntu 16.04  Python version: 3.6.1  Black version: master  Does also happen on master: yes    Hi,    currently Black doesn't seem to have an opinion about doc strings or rather where the quotes should go.    Black claims for this file for example that it is already formatted:    ```python  def test():      """"""This is one possibility.        Very important stuff here.      """"""      def test2():      """"""This is another one possibility.        Very important stuff here.""""""      def test3():      """"""      This is another one possibility.        Very important stuff here.      """"""      def test4():      """"""      What about this?      """"""      def test5():      """"""What about this?        Some people also like to have an empty line at the end of the doc string.        """"""  ```    The tool pydocstyle (in the spirit of PEP-0257) at least complains that the closing quotes should go on a separate line and if the docstring fits one line it should only span one line.    It would be nice if that could be incorporated in Black as well.    Thanks for the great work!    Lukas.  ";Lukas0907;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.4.2018 8:13;7.5.2018 19:25;7.5.2018 19:25;closed;[enhancement, good first issue, help wanted];12;145;Black should remove empty parentheses after class names;https://api.github.com/repos/ambv/black/issues/145;https://github.com/ambv/black/issues/145;```  class SomeClass():      ...  ```  should be just  ```  class SomeClass:      ....  ```    Those are equivalent both on Python 3 and Python 2.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 6:06;20.4.2018 6:53;20.4.2018 6:53;closed;[];1;146;Make a black badge for README.md files;https://api.github.com/repos/ambv/black/issues/146;https://github.com/ambv/black/issues/146;This is a fun super low pri one.    Can we make a `black` badge to add to project README.md like tests passing + coverage.    If I get time I'll work out how to do such a thing. Just wanted to see if others would like this and think it's valuable.;cooperlees;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 9:46;null;15.8.2018 17:12;open;[design, question];4;147;Should delimiters of different priorities be extra-indented?;https://api.github.com/repos/ambv/black/issues/147;https://github.com/ambv/black/issues/147;"Black takes an interesting decision regarding how to treat strings as  dictionary values.    Following dict has a very long string:    ```python   params = {          ""prompt"": ""consent"",          ""response_type"": ""code"",          ""access_type"": ""offline"",          ""client_id"": google_client_id,          ""scope"": ""profile email https://www.googleapis.com/auth/contacts.readonly https://www.googleapis.com/auth/drive.readonly"",          ""redirect_uri"": google_callback_uri,          ""state"": state,      }  ```    As Black won't split the string, I manually edited it to this:    ```python    params = {          ""prompt"": ""consent"",          ""response_type"": ""code"",          ""access_type"": ""offline"",          ""client_id"": google_client_id,          ""scope"": ""profile ""                    + ""email https://www.googleapis.com/auth/contacts.readonly ""                    + ""https://www.googleapis.com/auth/drive.readonly"",          ""redirect_uri"": google_callback_uri,          ""state"": state,      }  ```    But Black than changes to this:    ```python      params = {          ""prompt"": ""consent"",          ""response_type"": ""code"",          ""access_type"": ""offline"",          ""client_id"": google_client_id,          ""scope"": ""profile ""          + ""email https://www.googleapis.com/auth/contacts.readonly ""          + ""https://www.googleapis.com/auth/drive.readonly"",          ""redirect_uri"": google_callback_uri,          ""state"": state,      }  ```    I think the indentation here is important for readability, as one might mistake the broken line as dict pairs.    ======================================  Operating system: macOS  Python version: 3.6.4  Black version: 18.4a2  Does also happen on master: yes      ";yarinb;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 10:30;9.5.2018 8:59;27.5.2018 17:43;closed;[enhancement];9;148;Math expressions and readability;https://api.github.com/repos/ambv/black/issues/148;https://github.com/ambv/black/issues/148;"It is not a bug, just a feedback. I start to use black for a project with math formula and I think black sometimes makes the code less readable.    Two simple examples:    ### Equations not fitting on one line    ```  if True:      if True:          PK1_fft = np.real(              + vx_fft.conj() * fx_fft              + vy_fft.conj() * fy_fft              + vz_fft.conj() * fz_fft          )  ```    is transformed by `black -l 82` into    ```  if True:      if True:          PK1_fft = np.real(              +vx_fft.conj()              * fx_fft              + vy_fft.conj()              * fy_fft              + vz_fft.conj()              * fz_fft          )  ```    The result is clearly less readable. It would be nice that black keeps the code as it is in such cases.    ### Spaces around pow operator    ```  result = 2 * x**2 + 3 * x**(2/3)  ```  is transformed by `black` into  ```  result = 2 * x ** 2 + 3 * x ** (2 / 3)  ```  which is less readable.    It seems to me it would make sense to allow ""no space around `**`"" because of the high precedence of the exponentiation (https://docs.python.org/3/reference/expressions.html#operator-precedence).    ";paugier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 12:34;23.4.2018 20:23;24.4.2018 14:51;closed;[enhancement, good first issue, help wanted];4;149;Make check and diff not mutually exclusive;https://api.github.com/repos/ambv/black/issues/149;https://github.com/ambv/black/issues/149;Operating system: Ubuntu 16.04  Python version:  ```  $ python --version  Python 3.6.3  ```  Black version:  ```  $ black --version  black, version 18.4a2  ```  ---    Running `black --check --diff` exits with:  > Error: Options --check and --diff are mutually exclusive    In CI it's nice to have auto-formatters explain exactly what it wants to change so running `--check` and `--diff` would be useful. Sadly `--diff` alone exits 0 if it needs to change things so I can't just use that.;tomelliff;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 17:13;21.4.2018 21:15;22.4.2018 6:16;closed;[];1;150;fixed cache file location in readme;https://api.github.com/repos/ambv/black/issues/150;https://github.com/ambv/black/pull/150;I just realized I never updated the paths to the pickle files for caching in the readme. Sorry about that.;ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 19:34;22.4.2018 12:44;22.4.2018 13:00;closed;[];20;151;#NÁZEV?;https://api.github.com/repos/ambv/black/issues/151;https://github.com/ambv/black/issues/151;"Operating system: Win 10 x86  Python version: 3.6.5 64 bit  Black version: 18.4a2  Does also happen on master: Throws this backtrace instead:  ```  Traceback (most recent call last):    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\Scripts\black-script.py"", line 11, in <module>      load_entry_point('black==18.4a2', 'console_scripts', 'black')()    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\click\core.py"", line 722, in __call__      return self.main(*args, **kwargs)    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\click\core.py"", line 697, in main      rv = self.invoke(ctx)    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\click\core.py"", line 895, in invoke      return ctx.invoke(self.callback, **ctx.params)    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\click\core.py"", line 535, in invoke      return callback(*args, **kwargs)    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\click\decorators.py"", line 17, in new_func      return f(get_current_context(), *args, **kwargs)    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\black.py"", line 211, in main      sources, line_length, write_back, fast, quiet, loop, executor    File ""c:\program files\python36\lib\asyncio\base_events.py"", line 468, in run_until_complete      return future.result()    File ""C:\Users\nikolaus.waxweiler\AppData\Local\Python\Python36\site-packages\black.py"", line 296, in schedule_formatting      loop.add_signal_handler(signal.SIGINT, cancel, _task_values)    File ""c:\program files\python36\lib\asyncio\events.py"", line 499, in add_signal_handler      raise NotImplementedError  NotImplementedError  ```    Running `black .` works fine, but `black --check .` returns the error code 1 instead. It should search for `./**/*.py` and check everything. Reason: I'd like to write  ```  [testenv:black]  deps = black  commands = black --check .  ```  in my tox.ini and not worry about exact paths, wildcards, etc.";madig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 23:44;18.5.2018 2:32;18.5.2018 2:32;closed;[design];7;152;Black should always explode multiline collection literals;https://api.github.com/repos/ambv/black/issues/152;https://github.com/ambv/black/issues/152;"Operating system: macOS  Python version: 3.6.1  Black version: 18.4a2  Does also happen on master:  Yes    After running black, I've gotten code formatted like:    ```python  class Classifier(db.ModelBase):        __tablename__ = ""trove_classifiers""      __table_args__ = (          Index(""trove_class_class_idx"", ""classifier""), Index(""trove_class_id_idx"", ""id"")      )        __repr__ = make_repr(""classifier"")        id = Column(Integer, primary_key=True, nullable=False)      classifier = Column(Text, unique=True)      deprecated = Column(Boolean, nullable=False, server_default=sql.false())      l2 = Column(Integer)      l3 = Column(Integer)      l4 = Column(Integer)      l5 = Column(Integer)  ```    While I understand the intention is for a sequence that can fit on one line to be on one line, this list here obviously *can't* fit on one line (it's been broken over 3 lines!) but it can only fit onto one line when you remove part of the syntax that makes it a list/tuple/whatever.    I think that it would be easier to read if the detection of a multi-line sequence was more aggressive, either it should *all* fit onto one line, or it should be formatted like:    ```python  class Classifier(db.ModelBase):        __tablename__ = ""trove_classifiers""      __table_args__ = (          Index(""trove_class_class_idx"", ""classifier""),          Index(""trove_class_id_idx"", ""id""),      )        __repr__ = make_repr(""classifier"")        id = Column(Integer, primary_key=True, nullable=False)      classifier = Column(Text, unique=True)      deprecated = Column(Boolean, nullable=False, server_default=sql.false())      l2 = Column(Integer)      l3 = Column(Integer)      l4 = Column(Integer)      l5 = Column(Integer)  ```";dstufft;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.4.2018 23:52;21.4.2018 0:03;21.4.2018 0:03;closed;[duplicate];1;153;Bare lambdas get needlessly broken into multiple lines;https://api.github.com/repos/ambv/black/issues/153;https://github.com/ambv/black/issues/153;Operating system: macOS  Python version: 3.6.3  Black version: ``master`` (https://github.com/ambv/black/commit/244694182463141115cb8eaf5afadbaf4a8ed67f)    Given code like:    ```python          db_request.find_service = pretend.call_recorder(              lambda *args, **kwargs: pretend.stub(                  csp_policy={},                  merge=lambda _: {},                  enabled=False,                  verify_response=pretend.call_recorder(lambda _: None),                  find_userid=pretend.call_recorder(lambda _: None),                  find_userid_by_email=pretend.call_recorder(lambda _: None),                  update_user=lambda *args, **kwargs: None,                  create_user=create_user,                  add_email=add_email,              ),          )  ```    It is being formatted like:    ```python          db_request.find_service = pretend.call_recorder(              lambda *args,              **kwargs: pretend.stub(                  csp_policy={},                  merge=lambda _: {},                  enabled=False,                  verify_response=pretend.call_recorder(lambda _: None),                  find_userid=pretend.call_recorder(lambda _: None),                  find_userid_by_email=pretend.call_recorder(lambda _: None),                  update_user=lambda *args,                  **kwargs: None,                  create_user=create_user,                  add_email=add_email,              ),          )  ```    The original version formatting of this code is more readable than the new version and there does not appear to be any reason for black to be splitting the args/kwargs to these lambda onto multiple lines, when a single line would suffice.  ;dstufft;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.4.2018 2:29;24.4.2018 20:55;24.4.2018 20:55;closed;[bug, comments, empty lines];0;154;Adds blank lines after comment between decorators;https://api.github.com/repos/ambv/black/issues/154;https://github.com/ambv/black/issues/154;Given t.py:  ```python  @property  # TODO: X  @property  def foo():      pass  ```    Running `black --diff t.py` gives:  ```diff  --- t-black.py  (original)  +++ t-black.py  (formatted)  @@ -1,6 +1,8 @@   @property   # TODO: X  +  +   @property   def foo():       pass   ```    Where flake8 then complains:    > stdin:5:1: E304 blank lines found after function decorator    Operating system: Arch Linux  Python version: 3.6.5  Black version: 18.4a2  Does also happen on master: Haven't checked.;blueyed;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.4.2018 10:59;23.4.2018 12:35;23.4.2018 12:35;closed;[];5;155;[#149] Make check and diff not mutually exclusive;https://api.github.com/repos/ambv/black/issues/155;https://github.com/ambv/black/pull/155;This change adds the ability to use both `--check` and `--diff` together to see the proposed changes and adds a test to verify that these options can indeed be called together.;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.4.2018 11:57;21.4.2018 21:16;29.4.2018 18:02;closed;[];2;156;Skip handling signals on event loops that don't support it;https://api.github.com/repos/ambv/black/issues/156;https://github.com/ambv/black/pull/156;This fixes a regression that caused Black on Windows to fail when working on a directory with more than one file.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.4.2018 23:06;1.5.2018 7:49;27.8.2018 1:01;closed;[design, enhancement, help wanted];4;157;Slicing is not formatted according to PEP 8;https://api.github.com/repos/ambv/black/issues/157;https://github.com/ambv/black/issues/157;"I always found what other formatters are doing here wrong and currently Black is also doing the wrong thing.    ### Needs changing    The explicit PEP 8 recommendation is:    **YES**:  ```py3  ham[lower + offset : upper + offset]  ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]  ```    ~NO~:  ```  ham[lower + offset:upper + offset]  ham[:upper_fn(x):step_fn(x)], ham[::step_fn(x)]  ```    Essentially, we should treat `:` as an ""operator"" inside slices when any operand of the slice includes punctuation (dots, brackets, and other math, binary or logic operators).    More examples:  **YES**  ```py3  ham[lower * unit + offset * unit : upper * unit + offset * unit]  ```    ~NO~:  ```  ham[lower*unit+offset*unit : upper*unit+offset*unit]  ```    Note that PEP 8 allows for the following that [we cannot properly enforce](https://github.com/ambv/black/issues/148):  ```  ham[lower+offset : upper+offset]  ```    Black won't do that because ""lower"", ""upper"", or ""offset"" can be arbitrary complexity and then operator hugging isn't improving readability anymore.    ### Already well formatted  Black is already formatting the other PEP 8 recommendation well:    **YES**:  ```py3  ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]  ham[lower:upper], ham[lower:upper:], ham[lower::step]  ```    ~NO~:  ```  ham[1: 9], ham[1 :9], ham[1:9 :3]  ham[lower : : upper]  ham[ : upper]  ```    (edited: a previous version of this issue suggested hugging operators but I since realized this cannot be performed consistently)  ";ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.4.2018 10:05;24.4.2018 20:56;24.4.2018 20:56;closed;[bug];2;158;Line length changes are not taken into account for cached files;https://api.github.com/repos/ambv/black/issues/158;https://github.com/ambv/black/issues/158;After running `black file.py`, `black file.py -l 80` doesn't even try reformatting `file.py` if it hasn't changed since the previous invocation.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.4.2018 13:56;23.4.2018 20:23;29.4.2018 18:02;closed;[];2;159;Fix tests on windows;https://api.github.com/repos/ambv/black/issues/159;https://github.com/ambv/black/pull/159;Due to the way ProcessPoolExecutor uses `multiprocessing` to spawn new processes on windows, we would need to wrap our test functions in `if __name__ == __main__`. Instead, just patch in ThreadPoolExecutor because we don't really care about performance during these tests.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.4.2018 6:16;23.4.2018 8:32;23.4.2018 8:32;closed;[];3;160;add trailing comma in function definitions;https://api.github.com/repos/ambv/black/issues/160;https://github.com/ambv/black/issues/160;Operating system: ubuntu 16.04  Python version: 3.5.2  Black version: 18.4a2  Does also happen on master: yes    background:     I'm running python 3.5 in the production environment and 3.6 for development. For 3.6, all three functions below work well. But for 3.5, function `f_wrong` has SyntaxError because it has trailing comma right after `keyword_argument_g`.    test file:    ```  def f_correct1(      position_argument_a,      position_argument_b,      position_argument_c,      position_argument_d,      position_argument_e,      position_argument_f,      position_argument_g,  ):      return [position_argument_a, position_argument_g]      def f_correct2(      *,      keyword_argument_a,      keyword_argument_b,      keyword_argument_c,      keyword_argument_d,      keyword_argument_e,      keyword_argument_f,      keyword_argument_g  # no trailing comma here    ):      return [keyword_argument_a, keyword_argument_g]      def f_wrong(      *,      keyword_argument_a,      keyword_argument_b,      keyword_argument_c,      keyword_argument_d,      keyword_argument_e,      keyword_argument_f,      keyword_argument_g,  ):      return [keyword_argument_a, keyword_argument_g]  ```    shell output:  ```  bash-3.2$ pyenv local system ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.4.2018 12:43;23.4.2018 20:23;25.4.2018 3:46;closed;[];3;161;[#149] Make check and diff not mutually exclusive;https://api.github.com/repos/ambv/black/issues/161;https://github.com/ambv/black/pull/161;;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.4.2018 22:36;23.4.2018 23:19;23.4.2018 23:19;closed;[];3;162;Put the PSF license in blib2to3/ to mark that code.;https://api.github.com/repos/ambv/black/issues/162;https://github.com/ambv/black/pull/162;The blib2to3/ code is PSF licensed as that is where the code originated.  This change just drops a proper copy of that license file into the  directory tree to make that clear.;gpshead;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.4.2018 4:14;24.4.2018 20:56;25.4.2018 3:47;closed;[];3;163;Make cache work with non-default line lenghts;https://api.github.com/repos/ambv/black/issues/163;https://github.com/ambv/black/pull/163;Fixes #158    Stores the cache per-line-length-setting. ;ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.4.2018 10:09;24.4.2018 18:37;24.4.2018 19:33;closed;[];3;164;Add Vundle instructions for vim plugin;https://api.github.com/repos/ambv/black/issues/164;https://github.com/ambv/black/pull/164;#129  Add Vundle install instructions;alejandrodnm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.4.2018 14:59;20.8.2018 15:47;20.8.2018 15:48;closed;[];7;165;Support parsing of async generators in non-async functions;https://api.github.com/repos/ambv/black/issues/165;https://github.com/ambv/black/pull/165;This is a new syntax added in python3.7, so black can't verify that reformatting will not change the ast unless black itself is run with 3.7. We'll need to change the error message black gives in this case. @ambv any ideas?    Fixes #125.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.4.2018 16:42;24.4.2018 18:38;25.4.2018 3:46;closed;[];2;166;[#154] Handle comments between decorators properly;https://api.github.com/repos/ambv/black/issues/166;https://github.com/ambv/black/pull/166;;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.4.2018 0:18;27.4.2018 19:38;27.4.2018 19:38;closed;[];1;167;Comparison with rustfmt seems misplaced;https://api.github.com/repos/ambv/black/issues/167;https://github.com/ambv/black/issues/167;> In terms of inspiration, Black is about as configurable as gofmt and rustfmt are. This is deliberate.    [and yet][1]:    > Rustfmt is designed to be very configurable.    [1]: https://github.com/rust-lang-nursery/rustfmt/blob/master/Configurations.md    rustfmt also seems to have [somewhat different ideas behind it][2], e.g.:    > ### Heuristic rather than algorithmic  >  > Many formatting tools use a very general algorithmic or even algebraic tool for pretty printing. This results in very elegant code, but I believe does not give the best results.    or    > ### Use the source code as guidance  >  > There are often multiple ways to format code and satisfy standards. Where this is the case, we should use the source code as a hint for reformatting. Furthermore, where the code has been formatted in a particular way that satisfies the coding standard, it should not be changed    [2]: https://github.com/rust-lang-nursery/rustfmt/blob/master/Design.md    NB: I have only just started using Rust, so it's possible that I've got totally the wrong end of the stick :);anowlcalledjosh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.4.2018 3:53;22.5.2018 2:03;22.5.2018 2:03;closed;[];4;168;Maybe its time to export ChangeLog to a file of its own say CHANGELOG.rst;https://api.github.com/repos/ambv/black/issues/168;https://github.com/ambv/black/issues/168;Title says it all.;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.4.2018 6:33;25.4.2018 18:41;25.4.2018 18:41;closed;[duplicate];2;169;Maybe black should consider precedence of binary operations when splitting expressions?;https://api.github.com/repos/ambv/black/issues/169;https://github.com/ambv/black/issues/169;"Here's an odd bit of formatting that black gave me, using black on latest master with `-l 79`:    ```python  def test_foo():      expected = (          [(""before_run"",)]          + 6          * [(""schedule"", task), (""before"", task), (""after"", task)]          + [(""after_run"",)]      )  ```    This is weird because the `*` binds more tightly than the `+`, so it's actually 6 copies of that list. If I add explicit parentheses around the `*` operation, then black gives me the much more sensible:    ```python  def test_foo():      expected = (          [(""before_run"",)]          + (6 * [(""schedule"", task), (""before"", task), (""after"", task)])          + [(""after_run"",)]      )  ```    So that's a workaround, but maybe black should realize that `*` binds more tightly than `+` and treat the first case the same way as it treats the parenthesized case? Or insert parentheses, or... something? It feels like black has enough information here to do something better.";njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.4.2018 11:08;25.4.2018 11:13;25.4.2018 11:13;closed;[];2;170;"Reformatting print()s that span multiple lines does not remove extraneous ""s";https://api.github.com/repos/ambv/black/issues/170;https://github.com/ambv/black/issues/170;"Operating system: Linux  Python version: 3.6.3rc1  Black version: 18.4a1  Does also happen on master: Yes (18.4a3 cloned today)    Original code:  ```              self.logger.debug(                  f'Skipped {skipped_count} virtual '                  f'interfaces for {device.name}'              )  ```    black'd code:  ```              self.logger.debug(                  f""Skipped {skipped_count} virtual "" f""interfaces for {device.name}""              )  ```    Could black detect that it's done this (with or without f-string markers), and remove the ' "" "" ' that results, or is that considered too invasive a change to the code?";cricalix;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.4.2018 16:03;25.4.2018 23:30;25.4.2018 23:30;closed;[];1;171;not an issue, but wanted to say....great name! lol;https://api.github.com/repos/ambv/black/issues/171;https://github.com/ambv/black/issues/171;;cmorgan;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.4.2018 12:08;26.4.2018 16:50;26.4.2018 16:50;closed;[];1;172;Odd formatting with split ternary in dict literal;https://api.github.com/repos/ambv/black/issues/172;https://github.com/ambv/black/issues/172;"Operating system: mac OS 10.13.4 (High Sierra)  Python version: 3.6.5  Black version: 1445bea  Does also happen on master: Yes    Given this input:    ```python  data = {      ""a"": compute_a_value_this_is_so_long() if some_condition_long_condition else compute_another_value(),      ""b"": 10  }  ```    Black gives me:    ```python  data = {      ""a"": compute_a_value_this_is_so_long()      if some_condition_long_condition      else compute_another_value(),      ""b"": 10,  }  ```    The `if` and `else` on the same indentation level as the keys looks very odd and hard to parse at a glance to me. Moving it up one level and possibly adding parens makes it easier to read/prettier to me.    ```python  data = {      ""a"": (          compute_a_value_this_is_so_long()          if some_condition_long_condition          else compute_another_value()      ),      ""b"": 10,  }  ```    Of course this is not the only solution and maybe others think the current code is okay. Just my 2 cents.";ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.4.2018 20:38;22.5.2018 2:07;22.5.2018 15:53;closed;[bug, comments];3;173;Long inline comment on condition statement with braces and and in statement results in unexpected error.;https://api.github.com/repos/ambv/black/issues/173;https://github.com/ambv/black/issues/173;"Operating system: Ubuntu 16.04  Python version: Python 3.6.5  Black version: 18.4a3  Does also happen on master: yes at revision 1445bea97        if x[""id""] in yyyyyyyyyyyyy:  # xxxxxxxx xxxxxxx xxxxxxxxxx xxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          pass    Results in an unclear error message:      error: cannot format /path/to/file/to/format.py: (-1, 10)    Traced this back to where it is originally raised, but I don't have enough context to troubleshoot further at this point:        Traceback (most recent call last):        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/bin/black"", line 11, in <module>          sys.exit(main())        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/click/core.py"", line 722, in __call__          return self.main(*args, **kwargs)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/click/core.py"", line 697, in main          rv = self.invoke(ctx)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/click/core.py"", line 895, in invoke          return ctx.invoke(self.callback, **ctx.params)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/click/core.py"", line 535, in invoke          return callback(*args, **kwargs)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/click/decorators.py"", line 17, in new_func          return f(get_current_context(), *args, **kwargs)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 201, in main          reformat_one(sources[0], line_length, fast, write_back, report)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 244, in reformat_one          src, line_length=line_length, fast=fast, write_back=write_back        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 336, in format_file_in_place          src_contents, line_length=line_length, fast=fast        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 396, in format_file_contents          dst_contents = format_str(src_contents, line_length=line_length)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 424, in format_str          for line in split_line(current_line, line_length=line_length, py36=py36):        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 1733, in split_line          split_line(l, line_length=line_length, inner=True, py36=py36)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 1728, in split_line          for l in split_func(line, py36):        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 1823, in right_hand_split          result.append(leaf, preformatted=True)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 731, in append          self.bracket_tracker.mark(leaf)        File ""/home/mshantz/.virtualenvs/tmp-f7a837d7b440787/lib/python3.6/site-packages/black.py"", line 627, in mark          opening_bracket = self.bracket_match.pop((self.depth, leaf.type))      For reference, these similar statements format fine:        # one character less on yyy variable      if x[""id""] in yyyyyyyyyyyy:  # xxxxxxxx xxxxxxx xxxxxxxxxx xxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          pass      # equality instead of contains      if x[""id""] == yyyyyyyyyyyyy:  # xxxxxxxx xxxxxxx xxxxxxxxxx xxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          pass  ";meshantz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.4.2018 12:29;9.5.2018 6:09;9.5.2018 6:09;closed;[bug, help wanted];8;174;NeoVim raises errors: Error detected while processing function provider#python3#Call;https://api.github.com/repos/ambv/black/issues/174;https://github.com/ambv/black/issues/174;Howdy! Sorry, you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Ubuntu 18.04  Python version: 3.6.5  Black version: black.py, version 18.4a3  Does also happen on master: I don't know    To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.4.2018 13:27;27.4.2018 23:23;28.4.2018 5:32;closed;[];2;175;Files not reformatted with Black cache and inconsistent output;https://api.github.com/repos/ambv/black/issues/175;https://github.com/ambv/black/issues/175;Operating system:  Python version: 3.6.3  Black version: 18.4a3  Does also happen on master: yes    Steps to reproduce:  `black --check myproject`  _1 file would be reformatted, 68 files would be left unchanged._    Run it again:  `black --check myproject`  _All done!  69 files would be left unchanged._    So I cannot reformat the code:  `black myproject`  _All done!  69 files would be left unchanged._    If I remove the cache file, it works and the file is reformatted.;frossigneux;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.4.2018 23:57;19.8.2018 23:27;19.8.2018 23:27;closed;[];4;176;Atom/Nuclide integration;https://api.github.com/repos/ambv/black/issues/176;https://github.com/ambv/black/issues/176;The README mentions that you're working on Atom/Nuclide integration. I'm looking forward to such a thing but would like to be able to asynchronously track progress/availability. If this works for you, this issue can remain open (and interested parties can subscribe) until there's progress (and you'll have a set of interested parties to beta test / contribute).    Thoughts?;mojodna;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.4.2018 15:03;16.5.2018 7:13;16.5.2018 7:13;closed;[enhancement];1;177;Don't always wrap in invisible parentheses;https://api.github.com/repos/ambv/black/issues/177;https://github.com/ambv/black/issues/177;"Don't wrap multiline asserts into bracers if one part fits into one line and another already in brackets.             data = [{              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",          }]          assert data == [{              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",              ""a"": ""b"",          }]        after black    ```  +        data = [  +            {  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +                ""a"": ""b"",  +            }  +        ]  +        assert (  +            data  +            == [  +                {  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                    ""a"": ""b"",  +                }  +            ]  +        )  ```    Can't we have same formatting for asserts as we have for assignments?              assert data == [              {                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",                  ""a"": ""b"",              }          ]  ";kalekseev;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.4.2018 7:15;1.5.2018 7:49;1.6.2018 23:14;closed;[];7;178;Format subscriptions in a PEP-8 compliant way;https://api.github.com/repos/ambv/black/issues/178;https://github.com/ambv/black/pull/178;Fixes #157;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.4.2018 8:26;29.4.2018 9:50;29.4.2018 18:02;closed;[];1;179;fix type errors in setup.py;https://api.github.com/repos/ambv/black/issues/179;https://github.com/ambv/black/pull/179;;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.4.2018 9:23;7.5.2018 19:15;7.5.2018 19:15;closed;[];4;180;Removing empty parentheses after class name;https://api.github.com/repos/ambv/black/issues/180;https://github.com/ambv/black/pull/180;Hi @ambv,  This is WIP.  would like to get early feedback on this as this is my first PR request.  This is working but 2 tests are failing, I am working on them to fix(if you have any suggestion to pass, would be appreciated). I am also in working on adding new tests after fixing the failed tests.  ;skapil;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.4.2018 7:42;30.4.2018 8:56;30.4.2018 9:10;closed;[];3;181;feature_request(comments): wrap comments;https://api.github.com/repos/ambv/black/issues/181;https://github.com/ambv/black/issues/181;### 1. Summary  It would be nice, if comments would be wrapped to next lines.  ### 2. Argumentation  [**Citation**](https://github.com/ambv/black#line-length) from Black description:  > You can also increase it, but remember that people with sight disabilities find it harder to work with line lengths exceeding 100 characters. It also adversely affects side-by-side diff review on typical screen resolutions. Long lines also make it harder to present code neatly in documentation or talk slides.  All of the above can be attributed to the comments.  ### 3. Configuration  **Example**: I have a file `SashaBlack.py`:  ```python # Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.  ```  ### 4. Steps to reproduce      black SashaBlack.py  **or**      black --line-length 120 SashaBlack.py  ### 5. Expected behavior  ```python # Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna # aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. # Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint # occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ```  ### 6. Actual behavior  No changes.  ```text D:\SashaDemoRepositories\SashaBlackDebugging>black --line-length 120 SashaBlack.py D:\SashaDemoRepositories\SashaBlackDebugging\SashaBlack.py already well formatted, good job. ```  Thanks.;Kristinita;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.4.2018 8:59;null;22.6.2018 18:49;open;[];2;182;feature_request(formatting): wrap long strings;https://api.github.com/repos/ambv/black/issues/182;https://github.com/ambv/black/issues/182;"### 1. Summary  It would be nice, if Black will wrap long strings.  ### 2. Example  I have `SashaLongStrings.py` file:  ```python print(""She's the one for me, She's my ecstasy, She's the one I need. She's one in a million, She's once in a lifetime, She made me discover one of the stars above us."") ```  Line contains 168 characters.  I run command:      black --line-length 120 SashaLongStrings.py  Result:  ```python print(""She's the one for me, She's my ecstasy, She's the one I need. She's one in a million, She's once in a lifetime, ""       ""She made me discover one of the stars above us."") ```  Lines contains ? 120 symbols.  ### 3. Details  See more details in my question in [**Software Recommendations**](https://softwarerecs.stackexchange.com/q/47931/23324).  Thanks.";Kristinita;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.5.2018 5:36;7.5.2018 20:15;7.5.2018 20:15;closed;[bug];1;183;Different code on second pass;https://api.github.com/repos/ambv/black/issues/183;https://github.com/ambv/black/issues/183;The project formatted is https://github.com/ray-project/ray/. The file `python/ray/dataframe/test/test_dataframe.py` failed to format the same way twice, and the CLI told me to report it. [Here's the diff log](https://gist.github.com/de317064551ea817d7b9e8798e69cbe3).;alok;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.5.2018 22:22;2.5.2018 13:44;2.5.2018 13:44;closed;[];4;184;upload on conda-forge;https://api.github.com/repos/ambv/black/issues/184;https://github.com/ambv/black/issues/184;@ambv if you agree I would like to upload black on the [conda-forge repository](https://conda-forge.org/). Is this ok for you? Would you like to be added as a feedstock maintainer together with me?  ;carlodri;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.5.2018 11:58;7.5.2018 19:41;7.5.2018 20:33;closed;[bug, invalid code];5;185;Trailing comma after from .. import;https://api.github.com/repos/ambv/black/issues/185;https://github.com/ambv/black/issues/185;Operating system: Ubuntu 16.04  Python version: 3.6.5  Black version: 18.4a4  Does also happen on master: yes    The following import:  ```  from datetime import (      timedelta,  )  ```  is incorrectly transformed to:    ```  from datetime import timedelta,  ```    Thankfully caught by black --safe who told me: INTERNAL ERROR: Black produced invalid code: trailing comma not allowed without surrounding parentheses (<unknown>, line 1). ;jooon;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.5.2018 20:42;3.5.2018 5:23;3.5.2018 5:23;closed;[];1;186;In pycharm python 3.6 long comments are not reformatted ;https://api.github.com/repos/ambv/black/issues/186;https://github.com/ambv/black/issues/186;"I am using Pycharm 2018.1 Community Edition.  I was playing around with Black and I noticed  it did not reformat a long comment that is 223 characters     <img width=""1193"" alt=""screen shot 2018-05-02 at 11 41 03 am"" src=""https://user-images.githubusercontent.com/15060668/39542560-c0c85c30-4dfd-11e8-929a-95a53b43ac73.png"">    even though the output after running black was     ""reformatted <path/to/file> ""    I also tried running  black --line-length 120 <path/to/file>  but got the message that the file had already been formatted     Operating system: OS X  Python version: 3.6  Black version: 18.4a4  Does also happen on master: yes    ";nemessisc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.5.2018 21:59;3.5.2018 5:25;3.5.2018 5:25;closed;[];2;187;"Should this be  ""_cede_ control""";https://api.github.com/repos/ambv/black/issues/187;https://github.com/ambv/black/pull/187;;davidszotten;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.5.2018 22:59;10.5.2018 0:26;10.5.2018 0:26;closed;[enhancement];1;188;"Don't use u""..."" in Python 2.7 when there's `from __future__ import unicode_literals`";https://api.github.com/repos/ambv/black/issues/188;https://github.com/ambv/black/issues/188;Since all literals will be unicode in this case, it should be fine to just use normal double quoted strings rather than prefix them with `u`.    Operating system: CentOS7  Python version: 3.6  Black version: 18.4a4;jeffdunn;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.5.2018 14:10;4.5.2018 22:52;5.5.2018 10:54;closed;[];3;189;Remove unnecessary shebang lines;https://api.github.com/repos/ambv/black/issues/189;https://github.com/ambv/black/pull/189;Since black.py is not marked as executable, the shebang in black.py serves  no purpose. black should be invoked through its entry point any way.    token.py is an internal module without a __name__ == '__main__' block or  other executable code. It contains just list of constants and small  helper functions.    Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.5.2018 11:07;7.5.2018 19:12;7.5.2018 19:12;closed;[];3;190;Output something when no files are reformatted;https://api.github.com/repos/ambv/black/issues/190;https://github.com/ambv/black/pull/190;Just executing ``black`` without any argument does not print any message  to stdout or stderr. It's rather confusing, because the user doesn't  know what happened.    In ``len(sources) == 0`` case, black now prints ``No files  reformatted``.    Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.5.2018 11:08;7.5.2018 19:11;7.5.2018 19:11;closed;[];2;191;Add more files/directories to .gitignore;https://api.github.com/repos/ambv/black/issues/191;https://github.com/ambv/black/pull/191;Ignore .tox, black.egg-info and __pycache__ directories.    Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.5.2018 11:29;19.5.2018 23:07;19.5.2018 23:07;closed;[];3;192;blib2to3 tries to store grammar pickle in global site-packages;https://api.github.com/repos/ambv/black/issues/192;https://github.com/ambv/black/issues/192;"``blib2to3`` tries to store a version specific pickle of the grammar in the global site-package directory. This works fine for user-owned installations in a virtual env but not for OS vendored installation. Users typically don't have permission to write to system-wide site-packages directory.    ```  $ strace black  ...  openat(AT_FDCWD, ""/usr/lib/python3.6/site-packages/blib2to3/Grammar3.6.5.final.0.pickle"", O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0666) = -1 EACCES (Permission denied)  stat(""/usr/lib/python3.6/site-packages/blib2to3/PatternGrammar.txt"", {st_mode=S_IFREG|0644, st_size=793, ...}) = 0  stat(""/usr/lib/python3.6/site-packages/blib2to3/PatternGrammar3.6.5.final.0.pickle"", 0x7ffc225e5c40) = -1 ENOENT (No such file or directory)  openat(AT_FDCWD, ""/usr/lib/python3.6/site-packages/blib2to3/PatternGrammar.txt"", O_RDONLY|O_CLOEXEC) = 3  fstat(3, {st_mode=S_IFREG|0644, st_size=793, ...}) = 0  ...  ```    I tracked down the write through ``Grammar.dump``, ``load_grammar`` and ``load_packaged_grammar`` to https://github.com/ambv/black/blob/master/blib2to3/pygram.py. The ``load_grammar`` takes a pickle file name as ``gp`` argument, but ``load_packaged_grammar`` and ``pygram`` don't use it.    Some pickle files are checked into git but not installed by ``setup.py``, too.";tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.5.2018 23:25;16.5.2018 7:13;16.5.2018 7:13;closed;[bug];2;193;can't format python2 valid syntax;https://api.github.com/repos/ambv/black/issues/193;https://github.com/ambv/black/issues/193;"A fairly ugly open-source python2 file ends in ""cannot format"":    ```  $ curl  https://raw.githubusercontent.com/atlas0fd00m/rfcat/master/rflib/bits.py > bits.py && \   python2 bits.py && \   black bits.py    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                   Dload  Upload   Total   Spent    Left  Speed  100 20012  100 20012    0     0  20012      0  0:00:01 --:--:--  0:00:01  125k  error: cannot format /home/dcarlson/bits.py: (-1, 8)  ```    Operating system: Fedora 27  Python version: 2.7.14-10.fc27 & 3.6.5-1.fc27.x86_64  Black version: black-18.4a4    Does also happen on master: yes (reported version 18.4a5)  (yes, I did the virtualenv stuff, a-ok)";thecubic;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.5.2018 1:24;8.5.2018 2:35;8.5.2018 2:35;closed;[];1;194;Slicing with omitted operand is not formatted according to PEP 8;https://api.github.com/repos/ambv/black/issues/194;https://github.com/ambv/black/issues/194;"Black suggests putting a space before the slice operator when the LHS has an operator but the RHS is omitted, which looks like it doesn't comply with PEP-8 (emphasis mine):    > However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. **Exception: when a slice parameter is omitted, the space is omitted.**      Looks like it was introduced by PR #178.    Python version: 3.6  Black version: black, version 18.4a5  Does also happen on master: yes    ```  $ cat test.py  x = ""hello""  x[0 + -1:]  $ black --diff test.py  --- test.py  (original)  +++ test.py  (formatted)  @@ -1,3 +1,3 @@   x = ""hello""  -x[0 + -1:]  +x[0 + -1 :]    reformatted test.py  ```      ";terrelln;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.5.2018 14:57;null;2.7.2018 11:01;open;[design, enhancement];8;195;flake8 #noqa comments get moved a place where they're ignored;https://api.github.com/repos/ambv/black/issues/195;https://github.com/ambv/black/issues/195;Operating system: Linux  Python version: 3.6  Black version: 18.4a5  Does also happen on master: ?    Using a long list of `typing` imports with #noqa because my code is py2 compatible so I'm using the comment syntax for type hints    original code    ```  from typing import Dict, List, Set, ...  # noqa  ```    becomes    ```  from typing import (      Dict,      List,      Set,      ...,  )  # noqa  ```    but flake8 wants    ```  from typing import (  # noqa      Dict,      List,      Set,      ...,  )  ```;shish;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.5.2018 16:54;29.5.2018 9:58;29.5.2018 10:05;closed;[];5;196;Nested Function Definitions Introduce Whitespace;https://api.github.com/repos/ambv/black/issues/196;https://github.com/ambv/black/issues/196;Operating system: macOS  Python version: 3.6  Black version: black, version 18.4a4  Does also happen on master: Yes    Black is persistent about function declarations having vertical whitespace even though pep8 only prescribes them for top-level and class method declarations.    Examples:  https://github.com/python/cpython/blob/master/Lib/contextlib.py#L600-L618    ### Example    ```python  from functools import wraps      def my_decorator(func=None, a=1, b=2):      def decorator(func):          @wraps(func)          def wrapper(*args, **kwargs):              kwargs.update(dict(a=a, b=b))              return func(*args, **kwargs)          return wrapper        if func:          return decorator(func)      return decorator  ```    ### Result    ```diff  kstone@mbp ~> black --diff .  --- test.py  (original)  +++ test.py  (formatted)  @@ -1,14 +1,18 @@   from functools import wraps         def my_decorator(func=None, a=1, b=2):  +       def decorator(func):  +           @wraps(func)           def wrapper(*args, **kwargs):               kwargs.update(dict(a=a, b=b))               return func(*args, **kwargs)  +           return wrapper         if func:           return decorator(func)       return decorator     reformatted test.py  ```;kevinastone;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.5.2018 22:51;9.5.2018 6:08;9.5.2018 6:08;closed;[];2;197;Addresses #174 Neovim Error;https://api.github.com/repos/ambv/black/issues/197;https://github.com/ambv/black/pull/197;Neovim uses stdout for `msgpack` communication and the `subprocess` call for `virtualenv` was leaking that stream. Fix is to attach to a `subprocess.PIPE`.    **Before:**    ```  vim +BlackUpgrade  Upgrading Black with pip...  Error detected while processing function provider#python3#Call:  line   18:  ch 2 sent an invalid message, closed.  Press ENTER or type command to continue  ```    **After**:  ```  vim +BlackUpgrade    Upgrading Black with pip...  DONE! You are all set, thanks for waiting ? ? ?  Press ENTER or type command to continue  ```;coxley;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.5.2018 7:36;10.5.2018 0:40;10.5.2018 0:40;closed;[enhancement];2;198;Standardize case for string prefixes;https://api.github.com/repos/ambv/black/issues/198;https://github.com/ambv/black/issues/198;"In implementing a fix for #188 it occurred to me that black could also standardize the case of string literal prefixes (presumably to lowercase). For example, change `R""string""` to `r""string""`.    @ambv is this something you'd be open to doing? ";JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.5.2018 7:47;10.5.2018 0:26;10.5.2018 0:28;closed;[];2;199;Remove u prefix if unicode_literals is present;https://api.github.com/repos/ambv/black/issues/199;https://github.com/ambv/black/pull/199;Fixes #188, #198.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.5.2018 9:40;10.5.2018 0:26;10.5.2018 8:58;closed;[];2;200;Adding Jupyter Notebook magic command;https://api.github.com/repos/ambv/black/issues/200;https://github.com/ambv/black/pull/200;;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.5.2018 9:49;9.5.2018 17:05;9.5.2018 17:05;closed;[];2;201;black must be run twice when used with pre-commit;https://api.github.com/repos/ambv/black/issues/201;https://github.com/ambv/black/issues/201;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Mac OS 10.13.4  Python version: 3.6.5 (through pyenv)  Black version: 18.4a4  Does also happen on master:  yes    To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.5.2018 23:57;15.5.2018 7:13;15.5.2018 7:13;closed;[];4;202;Check for broken symlinks before checking file data;https://api.github.com/repos/ambv/black/issues/202;https://github.com/ambv/black/pull/202;New unit test fails without the check in the code, passed afterwards.;miggaiowski;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.5.2018 5:27;19.5.2018 23:07;19.5.2018 23:07;closed;[];4;203;move blib2to3 grammar cache to black cache;https://api.github.com/repos/ambv/black/issues/203;https://github.com/ambv/black/pull/203;"Implements #192    Changes the location of the pickle cache of blib2to3 from sites packages to black cache dir. Unlike the ""already formatted files"" cache, this is stored version independent (to prevent circular imports, though this could be worked around).    Note: I've noticed that the `.pyi` files in blib2to3 don't include some of the APIs in the `.py` files (my IDE complained about that), should I update these or should changes to blib2to3 be kept minimal?";ojii;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.5.2018 13:42;13.5.2018 23:36;22.7.2018 23:28;closed;[];10;204;Configuration of one-per-line import splitting?;https://api.github.com/repos/ambv/black/issues/204;https://github.com/ambv/black/issues/204;Currently if there is an import line which is too long:    ```python  from my_app.something.blah import remove_weekends, get_daily_shape, another_import  ```    Imports will be updated to be one per line. Not everyone wants this as it takes up vertical screen space adds more scrolling.    ```python  from my_app.something.blah import (      remove_weekends,      get_daily_shape,      another_import,  )  ```    Can we get a configuration option to update imports to take advantage of available space on each line? For example:    ```python  from my_app.something.blah import (      remove_weekends, get_daily_shape, another_import,  )  ```;richardARPANET;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.5.2018 15:20;12.5.2018 18:53;12.5.2018 19:01;closed;[];2;205;Is the concatenating lines with strings intended like this?;https://api.github.com/repos/ambv/black/issues/205;https://github.com/ambv/black/issues/205;"Operating system: Arch Linux  Python version: 3.6  Black version: 18.4a4  Does also happen on master: dunno - I don't even know if it is a bug or a feature yet.    With default line length black turns        fmt = (          ""%(asctime)s %(filename)s.%(funcName)s:%(lineno)d %(levelname)s: ""          ""%(message)s""      )    into        fmt = (          ""%(asctime)s %(filename)s.%(funcName)s:%(lineno)d %(levelname)s: "" ""%(message)s""      )    I would expect to either leave it alone or concatenate the strings like:        fmt = (          ""%(asctime)s %(filename)s.%(funcName)s:%(lineno)d %(levelname)s: %(message)s""      )    Is this behaviour intended?";obestwalter;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.5.2018 19:26;12.5.2018 19:44;12.5.2018 19:44;closed;[];3;206;fix a spelling typo;https://api.github.com/repos/ambv/black/issues/206;https://github.com/ambv/black/pull/206;;paralax;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.5.2018 15:45;15.5.2018 21:09;15.5.2018 21:09;closed;[enhancement, help wanted];1;207;Add a mode for pyi files;https://api.github.com/repos/ambv/black/issues/207;https://github.com/ambv/black/issues/207;This is a feature request;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.5.2018 19:21;14.5.2018 19:36;14.5.2018 19:36;closed;[wontfix];1;208;black line length isn't correctly enforced for comments in dicts;https://api.github.com/repos/ambv/black/issues/208;https://github.com/ambv/black/issues/208;"Operating system: MacOS  Python version: Python 3.6.5  Black version: black, version 18.4a4  Does also happen on master: yes    Given python code like this:    ```python  f(      {          ""k"": {              # NOTE: many of these are also set in kwarg defaults above";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.5.2018 13:40;15.5.2018 13:41;15.5.2018 13:41;closed;[];1;209;Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.;https://api.github.com/repos/ambv/black/issues/209;https://github.com/ambv/black/issues/209;```  $ pipenv install black  Installing black…  Collecting black    Downloading https://files.pythonhosted.org/packages/db/c8/c587383e6b57a07b9937ac29ff93f845aa3d344aa9242f0eba13163eaa2b/black-18.4a4-py36-none-any.whl (67kB)  Requirement already satisfied: attrs>=17.4.0 in /home/g/.local/share/virtualenvs/thesis-W6OBZlR6/lib/python3.6/site-packages (from black) (18.1.0)  Collecting click (from black)    Downloading https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl (71kB)  Collecting appdirs (from black)    Downloading https://files.pythonhosted.org/packages/56/eb/810e700ed1349edde4cbdc1b2a21e28cdf115f9faf263f6bbf8447c1abf3/appdirs-1.4.3-py2.py3-none-any.whl  Installing collected packages: click, appdirs, black  Successfully installed appdirs-1.4.3 black-18.4a4 click-6.7    Adding black to Pipfile's [packages]…  Pipfile.lock (7076dc) out of date, updating to (f7eff5)…  Locking [dev-packages] dependencies…  Locking [packages] dependencies…    Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.    You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.    Hint: try $ pipenv lock --pre if it is a pre-release dependency.  Could not find a version that matches black  Tried: 18.3a0, 18.3a0, 18.3a1, 18.3a1, 18.3a2, 18.3a2, 18.3a3, 18.3a3, 18.3a4, 18.3a4, 18.4a0, 18.4a0, 18.4a1, 18.4a1, 18.4a2, 18.4a2, 18.4a3, 18.4a3, 18.4a4, 18.4a4  There are incompatible versions in the resolved dependencies.    ```;giuscri;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.5.2018 15:10;15.5.2018 21:09;18.5.2018 17:34;closed;[];2;210;Add support for pyi files;https://api.github.com/repos/ambv/black/issues/210;https://github.com/ambv/black/pull/210;Fixes #207. This commit applies the format to all of typeshed: https://github.com/JelleZijlstra/typeshed/commit/0fe45a0726362f63084ad7714bc819d7bd6a3eb1.    One thing I haven't done yet is removing blank lines between classes with trivial bodies (see e.g. here: https://github.com/JelleZijlstra/typeshed/commit/0fe45a0726362f63084ad7714bc819d7bd6a3eb1#diff-fc608da07debda33805668ed07dd237eL249).;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.5.2018 15:57;15.5.2018 19:46;15.5.2018 19:46;closed;[];4;211;Black adding this to Python 3 files: # -*- coding: utf-8 -*-;https://api.github.com/repos/ambv/black/issues/211;https://github.com/ambv/black/issues/211;Operating system: OS X 10.13.4  Python version: 3.6.5  Black version: stable  Does also happen on master: yes    Black is adding (without need) this line at the beginning of each of my Python 3 scripts. In Python 3, there is not need for this anymore. Would it be possible remove it? Or at least giving the option to prevent adding this line?    `# -*- coding: utf-8 -*-`    Thanks for your support. Let me know if I can help.  ;vcajes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.5.2018 2:37;null;16.5.2018 4:15;open;[enhancement];1;212;not (x in y) -> x not in y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.5.2018 16:30;16.5.2018 18:24;16.5.2018 18:24;closed;[];2;213;Surprising reformatting of [0][0];https://api.github.com/repos/ambv/black/issues/213;https://github.com/ambv/black/issues/213;"Input:    ```  is_view = bool(      list(          self.execute(              name,              ""SELECT count(*) from sqlite_master WHERE type = 'view' and name=:n"",              {""n"": table},          )      )[0][0]  )  ```    Output:    ```  is_view = bool(      list(          self.execute(              name,              ""SELECT count(*) from sqlite_master WHERE type = 'view' and name=:n"",              {""n"": table},          )      )[          0      ][          0      ]  )  ```    Verified just now using https://black.now.sh/ which says it's running `v18.4a4`";simonw;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.5.2018 17:46;16.5.2018 18:23;16.5.2018 18:23;closed;[];2;214;"Black doesn't do too well on ""method pipelining""-style code.";https://api.github.com/repos/ambv/black/issues/214;https://github.com/ambv/black/issues/214;"Black (version 18.4a4 at least) doesn't do to well I feel on ""method pipeline""-style code, which is a pretty common pattern for anything that does data pipelines (pandas, etc.)    Before (taken straight from Tom's Augspurger's method chaining blog post, from his Modern Pandas series: https://tomaugspurger.github.io/method-chaining):    ```  def read(fp):      df = (pd.read_csv(fp)              .rename(columns=str.lower)              .drop('unnamed: 36', axis=1)              .pipe(extract_city_name)              .pipe(time_to_datetime, ['dep_time', 'arr_time', 'crs_arr_time', 'crs_dep_time'])              .assign(fl_date=lambda x: pd.to_datetime(x['fl_date']),                      dest=lambda x: pd.Categorical(x['dest']),                      origin=lambda x: pd.Categorical(x['origin']),                      tail_num=lambda x: pd.Categorical(x['tail_num']),                      unique_carrier=lambda x: pd.Categorical(x['unique_carrier']),                      cancellation_code=lambda x: pd.Categorical(x['cancellation_code'])))      return df  ```    After:    ```  def read(fp):      df = (          pd.read_csv(fp).rename(columns=str.lower).drop(""unnamed: 36"", axis=1).pipe(              extract_city_name          ).pipe(              time_to_datetime, [""dep_time"", ""arr_time"", ""crs_arr_time"", ""crs_dep_time""]          ).assign(              fl_date=lambda x: pd.to_datetime(x[""fl_date""]),              dest=lambda x: pd.Categorical(x[""dest""]),              origin=lambda x: pd.Categorical(x[""origin""]),              tail_num=lambda x: pd.Categorical(x[""tail_num""]),              unique_carrier=lambda x: pd.Categorical(x[""unique_carrier""]),              cancellation_code=lambda x: pd.Categorical(x[""cancellation_code""]),          )      )      return df  ```    I know this is all subjective to some extend, but I feel the ""after"" is a lot less readable than the ""before"" here.";chrish42;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.5.2018 23:16;17.5.2018 4:20;17.5.2018 4:20;closed;[bug];1;215;Multiline string literals get wrapped in unnecessary parens;https://api.github.com/repos/ambv/black/issues/215;https://github.com/ambv/black/issues/215;"Operating system: OS X  Python version: 3.7  Black version: master    Our codebase likes to write code like  ```python  x = """"""  a really long string  """"""  ```  (For example, for storing SQL queries.) Black turns this into  ```python  x = (      """"""  a really long string  """"""  )  ```  The parens don't do anything useful here.";JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.5.2018 4:55;17.5.2018 5:38;17.5.2018 5:39;closed;[];2;216;Fix double colon;https://api.github.com/repos/ambv/black/issues/216;https://github.com/ambv/black/pull/216;This ain’t Sphinx. :);hynek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.5.2018 18:17;22.5.2018 2:02;22.5.2018 2:02;closed;[];3;217;Fix #168: break change log into separate document;https://api.github.com/repos/ambv/black/issues/217;https://github.com/ambv/black/pull/217;Retains combined document for PyPI long_description;jreese;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.5.2018 19:08;18.5.2018 2:04;18.5.2018 2:04;closed;[];2;218;Fix #192: cache grammer pickles via appdirs;https://api.github.com/repos/ambv/black/issues/218;https://github.com/ambv/black/pull/218;"Uses `appdirs.user_cache_dir(""black"") / ""blib2to3""`";jreese;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.5.2018 19:39;29.5.2018 8:48;5.6.2018 18:43;closed;[];7;219;Class new line between docstrings / vars / methods;https://api.github.com/repos/ambv/black/issues/219;https://github.com/ambv/black/pull/219;"Input:  ```  class ClassWithInit:      def __init__(self):          pass  ```    Current output:  ```  class ClassWithInit:  +      def __init__(self):          pass  ```    Desired output:  ```  class ClassWithInit:      def __init__(self):          pass  ```    Input:  ```  class ClassWithDocstring:      """"""docstring""""""      var = 10      def __init__(self):          pass  ```    Current output:  ```  class ClassWithDocstring:      """"""docstring""""""      var = 10        def __init__(self):          pass  ```    Desired output:  ```  class ClassWithDocstring:      """"""docstring""""""        var = 10        def __init__(self):          pass  ```";Sterbic;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 4:21;29.5.2018 8:32;30.8.2018 15:08;closed;[design];5;220;Explode function calls?;https://api.github.com/repos/ambv/black/issues/220;https://github.com/ambv/black/issues/220;Should black explode function calls like it does collection literals? Should this example from the README:    ```python  # in:    TracebackException.from_exception(exc, limit, lookup_lines, capture_locals)    # out:    TracebackException.from_exception(      exc, limit, lookup_lines, capture_locals  )  ```    actually output:    ```python  TracebackException.from_exception(      exc,      limit,      lookup_lines,      capture_locals,  )  ```      Operating system: OS X 10.11.6  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: as of 7395f55564a689a28db5ab3f82c079f7fc40eadf;rouge8;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 15:19;18.5.2018 19:24;18.5.2018 19:53;closed;[];3;221;tests/stub.pyi is missing from black-18.5b0.tar.gz;https://api.github.com/repos/ambv/black/issues/221;https://github.com/ambv/black/issues/221;"Tests are failing because the stub file is not in the source distro    ```  ======================================================================  ERROR: test_stub (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""/usr/lib64/python3.6/unittest/mock.py"", line 1179, in patched      return func(*args, **keywargs)    File ""/home/heimes/redhat/fedora-rpms/python-black/black-18.5b0/tests/test_black.py"", line 345, in test_stub      source, expected = read_data(""stub.pyi"")    File ""/home/heimes/redhat/fedora-rpms/python-black/black-18.5b0/tests/test_black.py"", line 38, in read_data      with open(THIS_DIR / name, ""r"", encoding=""utf8"") as test:  FileNotFoundError: [Errno 2] No such file or directory: '/home/heimes/redhat/fedora-rpms/python-black/black-18.5b0/tests/stub.pyi'    ----------------------------------------------------------------------  Ran 50 tests in 7.656s    FAILED (errors=1)    ```";tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 15:20;18.5.2018 19:24;18.5.2018 19:24;closed;[];3;222;Include stub files (*.pyi);https://api.github.com/repos/ambv/black/issues/222;https://github.com/ambv/black/pull/222;Fixes: https://github.com/ambv/black/issues/221  Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 18:51;20.5.2018 18:27;20.5.2018 18:27;closed;[];4;223;Allow to disable emoji in output;https://api.github.com/repos/ambv/black/issues/223;https://github.com/ambv/black/issues/223;As an environment variable (e.g. `BLACK_HIDE_EMOJIS`) or as an option.;giuscri;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 19:29;22.5.2018 0:21;22.5.2018 0:21;closed;[bug, invalid code];2;224;black strips off parens in fmt: off section;https://api.github.com/repos/ambv/black/issues/224;https://github.com/ambv/black/issues/224;"I have the following block of code:    ```python  # fmt: off  return (Oauth2AccessToken          .objects          .select_related('user__api_tier')          .values_list('user__id', 'user__username', 'user__api_tier__slug')          .get(token=token, expires__gte=datetime.now()))  # fmt: on  ```    `black` fails with exit code 123 and this error:    ```  error: cannot format /Users/me/src/code/lib/src/lib/middleware.py: INTERNAL ERROR: Black produced invalid code: unexpected indent (<unknown>, line 41). Please report a bug on https://github.com/ambv/black/issues.  This invalid output might be helpful: /var/folders/4g/bws0ytbj4x56kdqs6b5nqbf40000gp/T/blk_hgpebg_4.log  ```    The diff between what `black` produced and the original file is:    ```diff  --- ../lib/src/lib/middleware.py 2018-05-18 11:06:51.000000000 -0500  +++ /var/folders/4g/bws0ytbj4x56kdqs6b5nqbf40000gp/T/blk_iyehzzpi.log 2018-05-18 10:55:09.000000000 -0500  @@ -1,3 +1,7 @@  +  File ""/Users/me/src/code/.env/lib/python3.6/site-packages/black.py"", line 2817, in assert_equivalent  +    dst_ast = ast.parse(dst)  +  File ""/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/ast.py"", line 35, in parse  +    return compile(source, filename, mode, PyCF_ONLY_AST)   from datetime import datetime   from logging import debug, critical   from typing import Tuple, Optional  @@ -37,11 +41,11 @@               # Borrowed from django-oauth-toolkit's implementation               token = auth_header[7:]               # fmt: off  -            return (Oauth2AccessToken  +            return Oauth2AccessToken                       .objects                       .select_related('user__api_tier')                       .values_list('user__id', 'user__username', 'user__api_tier__slug')  -                    .get(token=token, expires__gte=datetime.now()))  +                    .get(token=token, expires__gte=datetime.now())               # fmt: on           except (AttributeError, Oauth2AccessToken.DoesNotExist):               return None, None, None  ```    Operating system: macOS 10.13.4 (17E202)  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: Yes";szicari-farmobile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 19:53;18.5.2018 22:59;19.5.2018 11:18;closed;[];2;225;Remove grammar pickles from git;https://api.github.com/repos/ambv/black/issues/225;https://github.com/ambv/black/pull/225;There is no need to keep the pickled grammar files in git. PR #203 will  move them into a user-specific cache directory any way.    See: https://github.com/ambv/black/issues/192  Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 19:57;19.5.2018 23:07;19.5.2018 23:07;closed;[];4;226;sdist is missing files;https://api.github.com/repos/ambv/black/issues/226;https://github.com/ambv/black/issues/226;I noticed that source distribution is missing some files and directories:    - [ ] ~docs/~  - [ ] plugin/  - [ ] ~Pipfile~  - [ ] ~mypy.ini~  - [ ] blib2to3/README  - [ ] blib2to3/LICENSE  - [ ] blib2to3/**/*.pyi    ;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.5.2018 22:33;18.5.2018 22:34;18.5.2018 22:34;closed;[];1;227;"Black introduce whitespace before "":"" inside parentheses, resulting in breaking flake8 E203";https://api.github.com/repos/ambv/black/issues/227;https://github.com/ambv/black/issues/227;Sorry, if this was discussed, or closed before, tried to find and haven't found.    ```  Operating system: MacOS  Python version: 3.6.3  Black version: master  Does also happen on master: Yes  ```    Having code:  ```  def chunks(l, n):      for i in range(0, len(l), n):          yield l[i:i + n]  ```  black formats last line to   ```  yield l[i : i + n]  ```  which leads to Flake8 [E203](https://lintlyci.github.io/Flake8Rules/rules/E203.html) error. ;hotsyk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.5.2018 1:45;21.5.2018 23:58;21.5.2018 23:58;closed;[bug];3;228;black fails with hanging line comments;https://api.github.com/repos/ambv/black/issues/228;https://github.com/ambv/black/issues/228;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: macos  Python version: Python 3.6.4  Black version: 18.4a0  Does also happen on master: yes    This file fails:    ```python  def main():      if True:          showconfig()          sys.exit(42)  # a comment                        # a hanging comment    ```    This is the error:    `error: cannot format /Users/chrisros/tmp/failure.py: Cannot parse: 5:0:                       # another`;offbyone;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.5.2018 5:14;21.5.2018 18:58;21.5.2018 20:39;closed;[];2;229;Add navigation to README;https://api.github.com/repos/ambv/black/issues/229;https://github.com/ambv/black/pull/229;;willingc;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.5.2018 11:46;19.5.2018 22:09;19.5.2018 22:09;closed;[];2;230;Include blib2to3 LICENSE file;https://api.github.com/repos/ambv/black/issues/230;https://github.com/ambv/black/pull/230;See: https://github.com/ambv/black/issues/226  Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.5.2018 14:49;19.5.2018 23:05;19.5.2018 23:05;closed;[];4;231;Move Grammar cache to user's cache directory;https://api.github.com/repos/ambv/black/issues/231;https://github.com/ambv/black/pull/231;blib2to3.pygram assumes that blib2to3's directory is writeable. This is  not the case for global installation of black on Linux distributions.    Fixes: https://github.com/ambv/black/issues/192  Signed-off-by: Christian Heimes <christian@python.org>;tiran;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.5.2018 19:20;5.6.2018 6:28;5.6.2018 6:28;closed;[bug];8;232;Multiline strings cause unnecessary optional parentheses;https://api.github.com/repos/ambv/black/issues/232;https://github.com/ambv/black/issues/232;"## Background    - macOS 10.12  - Python 3.6.4  - 18.5b0 (vs 18.4a4)    This issue springs off a short twitter convo I had with @ambv, current end of thread is here: https://twitter.com/llanga/status/997721115530219520    Reported therein is the first example of this issue and I've since found a different one, so figured it was time to make a formal ticket.    (N.B. that thread mentions `#  noqa` comments but I've determined this is not truly relevant/useful, especially given the 2nd example below which seems not a line length problem.)    ## Long string literals    Long string literal assignment values get indented and wrapped in parenthesis, despite this not getting the line under the desired line-length.    Example was this original pre-blacken line (at a relatively deep indent level):    ``` python  err = ""Refusing to be ambiguous: connect() kwarg '{}' was given both via regular arg and via connect_kwargs!""  ```    Black 18.4a4 leaves it alone";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 1:28;29.5.2018 8:33;29.5.2018 10:57;closed;[];3;233;Opinion: Unwanted indentation of multiline string;https://api.github.com/repos/ambv/black/issues/233;https://github.com/ambv/black/issues/233;"I tend to write my SQL queries using this formatting.  ```python  def get_stuff(cr, value):      cr.execute(""""""          SELECT whatever            FROM some_table t           WHERE id = %s      """""", [value])      return cr.fetchone()  ```    However, `black --diff` produce the following output  ```diff  --- foo.py  (original)  +++ foo.py  (formatted)  @@ -1,8 +1,11 @@   def get_stuff(cr, value):  -    cr.execute(""""""  +    cr.execute(  +        """"""           SELECT whatever             FROM some_table t            WHERE id = %s  -    """""", [value])  +    """""",  +        [value],  +    )       return cr.fetchone()    reformatted foo.py  ```    Which I find less readable, unpleasant.    Shouldn't `black` keep a multiline string first argument on the same line? (unless the line is too long, obviously)";KangOl;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 5:16;22.5.2018 1:38;22.5.2018 1:38;closed;[bug, invalid code];0;234;Star import after a long path produces invalid code;https://api.github.com/repos/ambv/black/issues/234;https://github.com/ambv/black/issues/234;Example:  ```  from really_long import *  ```    produces:  ```  from really_long import (      *  )  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 18:31;20.5.2018 18:50;20.5.2018 18:55;closed;[];1;235;README updates;https://api.github.com/repos/ambv/black/issues/235;https://github.com/ambv/black/pull/235;* Consistent titles in 'Sentence case'  * Add console Markdown formatting  * Fix macOS typo and Homebrew typos;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 18:40;null;21.5.2018 23:13;open;[bug];1;236;Unnatural break due to overzealous omitting of optional parentheses;https://api.github.com/repos/ambv/black/issues/236;https://github.com/ambv/black/issues/236;Expected:  ```  if A:      if B:          thread_items[0].some_attribute_access = (  # some comment in this place              an_object.a_method_call()          )  ```    Actual:  ```  if A:      if B:          thread_items[             0          ].some_attribute_access = (  # some comment in this place              an_object.a_method_call()          )  ```  ;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 23:26;21.5.2018 21:30;21.5.2018 21:30;closed;[bug, invalid code];0;237;Omitting rightmost bracket splits with inline comments produces invalid code;https://api.github.com/repos/ambv/black/issues/237;https://github.com/ambv/black/issues/237;Example:  ```py3  if A:      if B:          xxxxxxxxxxxxxxxx = Yyyy2YyyyyYyyyyy(              push_manager=context.request.resource_manager,              max_items_to_push=num_items,              batch_size=Yyyy2YyyyYyyyyYyyy.FULL_SIZE,          ).push(              # Only send the first n items.              items=items[:num_items]          )  ```    Causes:  ```py3  if A:      if B:          xxxxxxxxxxxxxxxx = Yyyy2YyyyyYyyyyy(              push_manager=context.request.resource_manager,              max_items_to_push=num_items,              batch_size=Yyyy2YyyyYyyyyYyyy.FULL_SIZE,          ).push(# Only send the first n items.items=items[:num_items])  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.5.2018 23:54;22.5.2018 9:40;22.5.2018 9:40;closed;[bug, unstable formatting];0;238;Omitting rightmost bracket splits + a moving inline comment causes unstable formatting;https://api.github.com/repos/ambv/black/issues/238;https://github.com/ambv/black/issues/238;Example:  ```  xxxx_xxx_xxxx_xxxxx_xxxx_xxx: Callable[..., List[SomeClass]] = classmethod(  # type: ignore      sync(async_xxxx_xxx_xxxx_xxxxx_xxxx_xxx.__func__)  )  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.5.2018 12:43;22.5.2018 9:06;22.5.2018 9:06;closed;[];2;239;Pre-formatted logical expressions losing formatting.;https://api.github.com/repos/ambv/black/issues/239;https://github.com/ambv/black/issues/239;Code for long logical expressions of the sort    ```python  flag = boolParam1 and \  boolParam2 and \  boolParam3 and \  boolParam4 and \  boolParam5  ```    is changed to    ```python  flag = boolParam1 and boolParam2 and boolParam3 and boolParam4 and boolParam5  ```    Many a times exceeding the line length. The right way to format would be     ```python  flag = (      boolParam1      and boolParam2      and boolParam3      and boolParam4      and boolParam5  )  ```    which can be achieved by covering the preformatted code with `\` as  1. Cover the code with parenthesis `( ... )`  2. Remove `\` used for pre-formatting.  3. Other formatting rules that black imposes.;csurfer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.5.2018 16:21;22.5.2018 13:06;22.5.2018 13:06;closed;[];2;240;PATH invaild;https://api.github.com/repos/ambv/black/issues/240;https://github.com/ambv/black/issues/240;"Usage: black [OPTIONS] [SRC]...    Error: Invalid value for ""src"": Path ""E:\Programming"" does not exist.  it can't support the path have the Chinese?";ridegod;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.5.2018 19:02;21.5.2018 19:08;21.5.2018 19:09;closed;[duplicate];2;241;Invalid code produced;https://api.github.com/repos/ambv/black/issues/241;https://github.com/ambv/black/issues/241;"Operating system: macOS 10.13.3  Python version: 3.6.2  Black version: 18.5b0  Does also happen on master: Yes    Full repro commands: https://gist.github.com/jivid/daac0d2fa478e8acf1a1980c88de5044    The file below produces an error saying `Black produced invalid code`:  ```python  #!/usr/bin/env python3    import math    # fmt: off    sql = (      ""SELECT * ""      ""FROM (""          ""SELECT * ""          ""FROM foo ""      "") AS bar""  )    # fmt: on    print(math.floor(1.5))  ```    If I remove the `fmt` comments, it works just fine.";jivid;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.5.2018 19:32;21.5.2018 22:20;21.5.2018 22:49;closed;[];2;242;README: Sentence case title;https://api.github.com/repos/ambv/black/issues/242;https://github.com/ambv/black/pull/242;;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 0:00;22.5.2018 1:55;22.5.2018 1:55;closed;[duplicate];2;243;Opinion: Extra whitespace for function inside a function;https://api.github.com/repos/ambv/black/issues/243;https://github.com/ambv/black/issues/243;If I have the following    ```python  def foo():      def bar():          pass            pass  ```    Black will reformat it to   ```python  def foo():        def bar():          pass        pass  ```    Is the blank line between `def foo` and `def bar` necessary.  My opinion is not, but if you disagree, feel free to close and I'll keep quiet ? ;oxo42;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 2:12;23.5.2018 20:01;23.5.2018 20:01;closed;[enhancement, good first issue, help wanted];0;244;Make it possible to pass --pyi and --py36;https://api.github.com/repos/ambv/black/issues/244;https://github.com/ambv/black/issues/244;1. When a file is passed on standard input, there is no way currently to discover it's a typing stub file and should be formatted with the .pyi style. Provide a command-line option that forces this.    2. When a file isn't using Python 3.6 features, Black will avoid putting trailing commas after stars in function signatures and function calls. This raises question from team members who think this is a Black bug. Allow for a command-line option to force Python 3.6 behavior.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 8:51;29.5.2018 8:34;29.5.2018 8:34;closed;[];3;245;Only format git diff (similar to clang-format-diff);https://api.github.com/repos/ambv/black/issues/245;https://github.com/ambv/black/issues/245;Relevant yapf issue: https://github.com/google/yapf/issues/190    It would be really helpfull to only format code that was changed which also helps to minimize the diff.    `clang-format-diff` example:  ```sh  git diff -U0 --no-color HEAD^ | clang-format-diff.py -p1 -i  svn diff --diff-cmd=diff -x-U0 | clang-format-diff.py -i  ```;Rikorose;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 13:03;null;25.5.2018 12:03;open;[empty lines, enhancement];3;246;Black doesn't enforce two empty lines before functions on module level when they have a sticky leading comment;https://api.github.com/repos/ambv/black/issues/246;https://github.com/ambv/black/issues/246;Operating system: macOS High Sierra  Python version: 3.6.5  Black version: 18.5b0  pycodestyle version: 2.4.0  Does also happen on master: yes    Should Black insert a newline between these variables and the function?    ### pycodestyle complains about test.py but Black doesn't change it    ```console  $ cat test.py  ```  ```python  from __future__ import print_function, unicode_literals    all_data = []  all_versions = set()    # Comment  def thing():      pass  ```  ```console  $ pycodestyle test.py  test.py:7:1: E302 expected 2 blank lines, found 1  $ black test.py  /private/tmp/test.py already well formatted, good job.  ```    ### Both pycodestyle and Black are fine with test2.py    ```console  $ cat test2.py  ```  ```python  from __future__ import print_function, unicode_literals    all_data = []  all_versions = set()      # Comment  def thing():      pass  ```  ```console  $ pycodestyle test2.py  $ black test2.py  /private/tmp/test2.py already well formatted, good job.  ```    ### Black reformats test3.py, with no comment    ```console  $ cat test3.py  ```  ```python  from __future__ import print_function, unicode_literals    all_data = []  all_versions = set()    def thing():      pass  ```  ```console  $ pycodestyle test3.py  test3.py:6:1: E302 expected 2 blank lines, found 1  $ black test3.py  reformatted /private/tmp/test3.py  $ pycodestyle test3.py  $ cat test3.py  ```  ```python  from __future__ import print_function, unicode_literals    all_data = []  all_versions = set()      def thing():      pass  ```;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 14:45;22.5.2018 17:54;22.5.2018 18:15;closed;[];1;247;tweak grammar in docs about fluent interfaces;https://api.github.com/repos/ambv/black/issues/247;https://github.com/ambv/black/pull/247;...to make the sentence a bit easier to understand.;wbolster;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 18:49;29.5.2018 8:31;29.5.2018 8:31;closed;[];8;248;Add command line option to ignore cache;https://api.github.com/repos/ambv/black/issues/248;https://github.com/ambv/black/issues/248;I ?? Black!    It would be nice to have the option to ignore its local cache in order to force it to reevaluate all files. Perhaps a `--no-cache` flag?    Thanks!;dgouldin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 19:44;23.5.2018 20:01;23.5.2018 20:01;closed;[];3;249;Add --pyi and --py36 flags. Fixes #244.;https://api.github.com/repos/ambv/black/issues/249;https://github.com/ambv/black/pull/249;;carljm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.5.2018 21:52;26.9.2018 14:26;2.10.2018 18:18;closed;[enhancement, trailing comma];6;250;isort inserts a trailing comma even if there's just a single name in parentheses;https://api.github.com/repos/ambv/black/issues/250;https://github.com/ambv/black/issues/250;Operating system: Mac OS 10.13.4  Python version: 3.6.5 (through pyenv)  Black version: 18.4a4  Does also happen on master: yes    ---    Given this setup:    ```console  $ tail -n+1 foo.py .pre-commit-config.yaml setup.cfg  ==> foo.py <==  from a_really.really.really.really.really.long.package.namespace import a_really_long_package  from really.really.really.really.really.long.package.namespace import really_long_package as pkg    ==> .pre-commit-config.yaml <==  repos:  - repo: https://github.com/pre-commit/mirrors-isort    rev: v4.3.4    hooks:    - id: isort  - repo: https://github.com/ambv/black    rev: 18.5b0    hooks:    - id: black      python_version: python3.6    ==> setup.cfg <==  [isort]  # Using config from  # https://github.com/ambv/black/blame/c7bc22388d30f1ba503eefd574e4bb794749b782/README.md  force_grid_wrap = 0  include_trailing_comma = true  line_length = 88  multi_line_output = 3  ```    Running `isort` changes the file to    ```python  from a_really.really.really.really.really.long.package.namespace import (      a_really_long_package,  )  from really.really.really.really.really.long.package.namespace import \      really_long_package as pkg  ```    Running `black` changes the file to    ```python  from a_really.really.really.really.really.long.package.namespace import (      a_really_long_package  )  from really.really.really.really.really.long.package.namespace import (      really_long_package as pkg  )  ```    The difference being the trailing comma and the `\` line break    ```diff  --- foo_isort.py 2018-05-22 15:46:53.000000000 -0400  +++ foo_black.py 2018-05-22 15:46:46.000000000 -0400  @@ -1,5 +1,6 @@   from a_really.really.really.really.really.long.package.namespace import (  -    a_really_long_package,  +    a_really_long_package   )  -from really.really.really.really.really.long.package.namespace import \  +from really.really.really.really.really.long.package.namespace import (       really_long_package as pkg  +)  ```    If I add this option to `setup.cfg`    ```diff  --- setup.cfg 2018-05-22 15:39:19.000000000 -0400  +++ setup.cfg.new 2018-05-22 15:47:41.000000000 -0400  @@ -1,6 +1,5 @@   [isort]  -# Using config from  -# https://github.com/ambv/black/blame/c7bc22388d30f1ba503eefd574e4bb794749b782/README.md  +combine_as_imports = true   force_grid_wrap = 0   include_trailing_comma = true   line_length = 88  ```    I get a slightly closer diff, but the trailing commas are inconsistent.    ```diff  --- foo_isort.py 2018-05-22 15:48:59.000000000 -0400  +++ foo_black.py 2018-05-22 15:49:04.000000000 -0400  @@ -1,6 +1,6 @@   from a_really.really.really.really.really.long.package.namespace import (  -    a_really_long_package,  +    a_really_long_package   )   from really.really.really.really.really.long.package.namespace import (  -    really_long_package as pkg,  +    really_long_package as pkg   )  ```;mxr;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.5.2018 15:54;null;23.10.2018 8:50;open;[enhancement];5;251;isort removes newlines before standalone comments if the following line is an import of the same group;https://api.github.com/repos/ambv/black/issues/251;https://github.com/ambv/black/issues/251;Operating system: Arch Linux  Python version: Python 3.6.6  Black version: 18.5b0  Does also happen on master: yes    Given:     ``` python  import a  # noinspection PyProtectedMember  import _a  ```    Black formats this to (note the introduced empty line):    ``` python  import a  # noinspection PyProtectedMember    import _a  ```    However isort correctly (in the recommended mode 3) formats it to:  ``` python  import a  # noinspection PyProtectedMember  import _a  ```;gaborbernat;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 18:29;26.5.2018 22:01;26.5.2018 22:01;closed;[];7;252;Documentation for running Black in vim on save?;https://api.github.com/repos/ambv/black/issues/252;https://github.com/ambv/black/issues/252;"I've Googled vigorously for ""how to run a vim command on save"", but I haven't been able to figure this out. I've also searched this repository. Could you provide a blurb under the ""vim"" section?";ns-cweber;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 18:32;28.5.2018 13:57;28.5.2018 13:57;closed;[];2;253;Different input on second pass / comment in chained call;https://api.github.com/repos/ambv/black/issues/253;https://github.com/ambv/black/issues/253;"Hi, I tried running Black on my codebase and got one error:  INTERNAL ERROR: Black produced different code on the second pass of the formatter    I narrowed it down to this section:  ```  (      queryset.annotate(rating_null=Coalesce(""rating"", Value(0)))  # transform NULL to 0          .order_by(""-rating_null"", ""-rating"", ""-updated"")  )  ```    Operating system: OSX  Python version: 3.6  Black version: 18.5b0  Does also happen on master: Yes    This is the diff generated:  ```diff  --- source  +++ first pass  @@ -1,5 +1,6 @@   (  -    queryset.annotate(rating_null=Coalesce(""rating"", Value(0)))  # transform NULL to 0  -        .order_by(""-rating_null"", ""-rating"", ""-updated"")  +    queryset.annotate(  +        rating_null=Coalesce(""rating"", Value(0))  +    ).order_by(""-rating_null"", ""-rating"", ""-updated"")  # transform NULL to 0   )     --- first pass  +++ second pass  @@ -1,6 +1,6 @@   (  -    queryset.annotate(  -        rating_null=Coalesce(""rating"", Value(0))  -    ).order_by(""-rating_null"", ""-rating"", ""-updated"")  # transform NULL to 0  +    queryset.annotate(rating_null=Coalesce(""rating"", Value(0))).order_by(  +        ""-rating_null"", ""-rating"", ""-updated""  +    )  # transform NULL to 0   )  ```    The good news is I realized this was actually some dead code so I removed it and Black runs on the whole code base :)";cosmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 18:55;25.5.2018 19:02;5.6.2018 4:59;closed;[];1;254;Request: Someone for the love of god, make a mode for emacs that will use this as a backend!;https://api.github.com/repos/ambv/black/issues/254;https://github.com/ambv/black/issues/254;Please.;justinjk007;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 20:12;26.5.2018 22:01;26.5.2018 22:01;closed;[];2;255;Add instructions for running Black on save in Vim;https://api.github.com/repos/ambv/black/issues/255;https://github.com/ambv/black/pull/255;Closes #252 ;mahmoudhossam;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 22:46;null;26.9.2018 18:51;open;[bug];3;256;Unnecessary line breaks in method call on multiline string;https://api.github.com/repos/ambv/black/issues/256;https://github.com/ambv/black/issues/256;"This is possibly not a bug, but the results are unexpected and don't really seem to improve readability. However feel free to close if this is actually correct.    Operating system: Fedora 28  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: yes    Formatting this file uses some extra unexpected new lines:    ```python  MULTILINE = """"""  foo  """""".replace(""\n"", """")  ```    ```diff  @@ -1,4 +1,6 @@   MULTILINE = """"""   foo  -"""""".replace(""\n"", """")  +"""""".replace(  +    ""\n"", """"  +)  ```";lubomir;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.5.2018 23:45;29.5.2018 8:27;29.5.2018 8:27;closed;[];1;257;Create backup files instead of always overwriting.;https://api.github.com/repos/ambv/black/issues/257;https://github.com/ambv/black/issues/257;Operating system: Linux (Arch, 64-bit)  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: yes    Black doesn't copy the input file(s) to a backup (eg, by appending `~` to the name), instead always overwrites in-place. This is kind of fine for files that are already managed by a VCS, but for ones outside of it, it will be nice to see what changes have happened and even the possibility to revert in case of bugs in Black itself that may produce invalid code.;chungy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.5.2018 0:05;5.6.2018 0:52;5.6.2018 0:52;closed;[bug];6;258;Line endings on Windows.;https://api.github.com/repos/ambv/black/issues/258;https://github.com/ambv/black/issues/258;Black outputs CRLF line endings on Windows even if the source file has Unix-style lines. It's possible to work around using for example Git configuration, but it would be nice if the behavior was configurable. Some of us like to keep Unix line endings even on Windows.;jaccarmac;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.5.2018 9:11;null;3.10.2018 6:12;open;[enhancement, help wanted];14;259;Provide a way for editor integrations to show warnings on lines Black would change;https://api.github.com/repos/ambv/black/issues/259;https://github.com/ambv/black/issues/259;"In the Editor Integration section of the readme, it would be helpful to clarify that black is run in the editor as a formatter, not as a linter. It can ""blindly"" reformat your whole document, but it does not provide live inline suggestions.    But that raises a question: If we still want live linting, we have to keep e.g. flake8 enabled in the editor. But if we're going to format with black later anyway, what is the point of linting with another tool? Could black be utilized by editor plugins as a live linter so we don't have to use one tool for linting and black for formatting (which is going to change what we did at the linter's suggestion, and lead to discrepancy between what you're writing and what you end up with).     Some clarification here would be helpful. And would love to hear your thoughts on whether black could be both a linter _and_ a formatter.";shacker;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.5.2018 9:40;null;17.8.2018 12:48;open;[enhancement, help wanted];2;260;List concatenation, multiple lines;https://api.github.com/repos/ambv/black/issues/260;https://github.com/ambv/black/issues/260;"Probably not a bug, but I was wondering if the code below shouldn't be formatted more like call chains are.  I did not expect black to change anything other than quotes in this example.  Aligned brackets feel much more readable.    ```  # before  -    search_fields = (  -        ['file__%s' % field for field in FileAdmin.search_fields] +  -        ['resource__%s' % field for field in ResourceAdmin.search_fields]  -    )  # black output  +    search_fields = [""file__%s"" % field for field in FileAdmin.search_fields] + [  +        ""resource__%s"" % field for field in ResourceAdmin.search_fields  +    ]  ```    Operating system: OSX 10.11.6  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: yes";sebdiem;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.5.2018 11:53;26.5.2018 14:15;26.5.2018 14:15;closed;[];1;261;Multi-line strings possibly not corrected properly;https://api.github.com/repos/ambv/black/issues/261;https://github.com/ambv/black/issues/261;"In my code base, I usually handle long strings by breaking them within parens. When black puts the split string onto one line, it still keeps the strings separate. The example below should make it clear:    ```  -            raise IndexError(""arrays used as indices must be of integer ""  -                             ""(or boolean) type"")  +            raise IndexError(  +                ""arrays used as indices must be of integer "" ""(or boolean) type""  +            )  ```    Question is: Can this be fixed or is there a reason why it needs to be this way?    Operating system: Ubuntu 18.04  Python version: 3.6  Black version: 18.5b0  Does also happen on master: yes";BenjaminBossan;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.5.2018 22:59;null;6.11.2018 20:46;open;[bug, comments, help wanted];2;262;Indentation is incorrectly changed for tabulated comments after a dedent;https://api.github.com/repos/ambv/black/issues/262;https://github.com/ambv/black/issues/262;Operating system: Ubuntu 18.04  Python version: 3.6.3  Black version: master    Thank you @ambv for this library. When trying to run this on a codebase that uses tabs, indentation for comments past depth 0 is changed incorrectly after a dedent. Sample input (NB tabs):    ```  if 1:   if 2:    pass   # This comment should be indented the same as the next line   pass  ```    Black reformats this to:    ```  if 1:      if 2:          pass          # This comment should be indented the same as the next line      pass  ```    Note that this only happens when the input file uses tabs.;sciyoshi;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.5.2018 10:34;29.5.2018 4:21;29.5.2018 4:21;closed;[];1;263;Add a comparision with autopep8;https://api.github.com/repos/ambv/black/issues/263;https://github.com/ambv/black/issues/263;In order to evaluate this project, one must be able to compare it with the alternatives and see the advantages.  [autopep8](https://github.com/hhatto/autopep8) is one, very popular automatic code formatter.  The README should highlight what black does differently and why the way black does it is better than autopep8.;thedrow;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.5.2018 17:09;27.5.2018 19:03;4.6.2018 23:06;closed;[];5;264;Regression on NumPy-style slices;https://api.github.com/repos/ambv/black/issues/264;https://github.com/ambv/black/issues/264;This happens when there are nontrivial expressions in the slice:    ```  $ cat example.py  start = 1  sub_mat = mat[start:, (start + 1):]  $ venv/bin/black example.py  reformatted .../example.py  $ git diff example.py  ```  ```diff  diff --git a/example.py b/example.py  index 2c6b9e3..292f213 100644  --- a/example.py  +++ b/example.py  @@ -1,2 +1,2 @@   start = 1  -sub_mat = mat[start:, (start + 1):]  +sub_mat = mat[start:, (start + 1) :]  ```;dhermes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.5.2018 0:14;28.5.2018 8:56;28.5.2018 8:56;closed;[];2;265;Feature-Request: rigorous tab-to-4 conversion/fix option?;https://api.github.com/repos/ambv/black/issues/265;https://github.com/ambv/black/issues/265;I looked,  but couldn't see logic which could fix tabs to 4 spaces, and uplift mixed tab/space code to be 4 space only. Is it possible that given you have a strong model of code indent, you could detect and fix erroneous tab instances?;geeohgeegeeoh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.5.2018 0:38;28.5.2018 8:26;28.5.2018 8:26;closed;[];1;266;Invalid syntax error of Vim plugin;https://api.github.com/repos/ambv/black/issues/266;https://github.com/ambv/black/issues/266;"Operating system:  Ubuntu 16.04    Python version:  Python 3.6.5    Black version:  Vim Plug installs master from Github    Does also happen on master:  Yes.    After installation of the Vim plugin (using Plug under Vim 8.1.20) I get the following error every time I launch Vim:  ```  Error detected while processing /home/ubuntu/.vim/plugged/black/plugin/black.vim:  line  114:    File ""<string>"", line 17      return venv_path / 'lib' / f'python{pyver[0]}.{pyver[1]}' / 'site-packages'                                                              ^  SyntaxError: invalid syntax  ```    Any idea how to fix this?";medihack;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.5.2018 5:22;17.9.2018 13:03;17.9.2018 13:03;closed;[bug, parentheses, unstable formatting];4;267;Unstable formatting on for loops with lots of loop variables;https://api.github.com/repos/ambv/black/issues/267;https://github.com/ambv/black/issues/267;"Operating system: Ubuntu 18.04  Python version: 3.6.5  Black version: 18.5b0  Does also happen on master: yes    Input:    ```python  import socket    for addr_family, addr_type, addr_proto, addr_canonname, addr_sockaddr in socket.getaddrinfo('google.com', 'http'):      print(addr_family, addr_type, addr_proto, addr_canonname, addr_sockaddr)  ```    Output:    ```console  $ black /tmp/bug.py   error: cannot format /tmp/bug.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /tmp/blk_z38v399t.log  ```    Log:    ```diff  --- source  +++ first pass  @@ -1,5 +1,13 @@   import socket     -for addr_family, addr_type, addr_proto, addr_canonname, addr_sockaddr in socket.getaddrinfo('google.com', 'http'):  +for (  +    addr_family,  +    addr_type,  +    addr_proto,  +    addr_canonname,  +    addr_sockaddr,  +) in socket.getaddrinfo(  +    ""google.com"", ""http""  +):       print(addr_family, addr_type, addr_proto, addr_canonname, addr_sockaddr)     --- first pass  +++ second pass  @@ -4,10 +4,8 @@       addr_family,       addr_type,       addr_proto,       addr_canonname,       addr_sockaddr,  -) in socket.getaddrinfo(  -    ""google.com"", ""http""  -):  +) in socket.getaddrinfo(""google.com"", ""http""):       print(addr_family, addr_type, addr_proto, addr_canonname, addr_sockaddr)     ```";andersk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.5.2018 7:24;29.5.2018 8:06;29.5.2018 8:06;closed;[];6;268;Add isort args to README;https://api.github.com/repos/ambv/black/issues/268;https://github.com/ambv/black/pull/268;;jasonfriedland;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 1:54;29.5.2018 2:58;29.5.2018 2:58;closed;[];1;269;Logo;https://api.github.com/repos/ambv/black/issues/269;https://github.com/ambv/black/issues/269;Is it only me who sees this logo like a BMW company? If true, may I propose a new logo, I can help for this problem.;foways;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 10:07;1.6.2018 2:51;1.6.2018 2:51;closed;[design, enhancement];2;270;--include= and --exclude=;https://api.github.com/repos/ambv/black/issues/270;https://github.com/ambv/black/issues/270;"I always steered people towards `find | grep -E | grep -Ev | xargs black` to do custom file matching. But that doesn't work on Windows. We need support for `--include=` and `--exclude=` within Black.    They hold regular expressions. The former is ""what gets included on recursive searches"", the latter ""what gets dropped on recursive searches"". You can pass multiple `--include` and multiple `--exclude`. Checks for `--exclude` are done first, checks for `--include` later.     `--include=` would have a default that is now stores in PYTHON_EXTENSIONS (""\.pyi?$"" in regex form)  `--exclude=` would have a default that is now stored in BLACKLISTED_DIRECTORIES    This functionality is required by https://github.com/pypa/pip/pull/5425.  ";ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 11:12;29.5.2018 23:50;29.5.2018 23:50;closed;[];3;271;Improve doc regarding PyCharm keyboard shortcut;https://api.github.com/repos/ambv/black/issues/271;https://github.com/ambv/black/pull/271;Small improvement to the documentation.;LukasDrude;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 15:03;29.5.2018 17:02;29.5.2018 17:12;closed;[];6;272;The very exact Henry Ford’s quote.;https://api.github.com/repos/ambv/black/issues/272;https://github.com/ambv/black/pull/272;;batisteo;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 17:18;5.6.2018 6:28;5.6.2018 6:28;closed;[bug];0;273;Only put optional parentheses when contents can be split;https://api.github.com/repos/ambv/black/issues/273;https://github.com/ambv/black/issues/273;"Currently black will format:    ```python  string_variable_name = ""a string that is wayyy too long, even in parens, there's nothing you can do""  # noqa  ```    into    ```python  string_variable_name = (      ""a string that is wayyy too long, even in parens, there's nothing you can do""  )  # noqa  ```    which doesn't help, wastes two lines, and upsets flake8 by moving the `# noqa`.    I can see the ergonomics of being able to split the string in there but sometimes it just doesn't make any sense (I have huge XML strings in some tests for example).";hynek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 18:30;null;23.10.2018 1:52;open;[bug, trailing comma];13;274;Black removes trailing commas from single element dicts;https://api.github.com/repos/ambv/black/issues/274;https://github.com/ambv/black/issues/274;"I would expect Black to add trailing commas to multi-line dict/list/set/etc. literals with a single element, based on:    > Black will add trailing commas to expressions that are split by comma where each element is on its own line. This includes function signatures.  >  > Unnecessary trailing commas are removed if an expression fits in one line. This makes it 1% more likely that your line won't exceed the allotted line length limit. Moreover, in this scenario, if you added another argument to your call, you'd probably fit it in the same line anyway. That doesn't make diffs any larger.    Operating system: OS X 10.11.6  Python version: 3.6.5  Black version: 18.5b1  Does also happen on master: yes, as of f471271831ffc7b0f71cc119edac33c267735d36    ```python  data = {      ""long_field_name"": ""something faaaaaaaaaaaaaar too long to fit on the first line"",  }  ```    ```diff  --- t.py  (original)  +++ t.py  (formatted)  @@ -1,4 +1,4 @@   data = {  -    ""long_field_name"": ""something faaaaaaaaaaaaaar too long to fit on the first line"",  +    ""long_field_name"": ""something faaaaaaaaaaaaaar too long to fit on the first line""   }  ```";rouge8;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.5.2018 19:49;null;20.6.2018 20:35;open;[design, parentheses, question];0;275;Should `await` automatically manage parentheses like `return`?;https://api.github.com/repos/ambv/black/issues/275;https://github.com/ambv/black/issues/275;On a first glance, it would be better. On another though, `await` is an expression which can potentially complicate formattings that are now rather simple.    Alternatively, `await` should be ignored by an existing bracket pair for purposes of splitting on delimiters, enabling for example fluent interfaces.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 1:03;31.5.2018 19:46;31.5.2018 19:46;closed;[question];8;276;I cannot get stdin formatting to work;https://api.github.com/repos/ambv/black/issues/276;https://github.com/ambv/black/issues/276;"Operating system: Ubuntu 17.10  Python version: 3.6.3  Black version: 18.5b1  Does also happen on master: Yes    ```  02:02:52 $ black -  Usage: black [OPTIONS] [SRC]...    Error: Invalid value for ""src"": Path ""-"" is not readable.  ```    Shouldn't this work? Am I being super dumb?";skorokithakis;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 4:44;20.6.2018 7:57;20.6.2018 7:57;closed;[question];19;277;Struggling to run within pycharm;https://api.github.com/repos/ambv/black/issues/277;https://github.com/ambv/black/issues/277;"Black works totally fine from the command line - my issue is running it from within pycharm.  I've followed the instructions to install for pycharm in the README.    I get the following error when I run it     ```Traceback (most recent call last):    File ""/usr/local/bin/black"", line 11, in <module>      sys.exit(main())    File ""/usr/local/lib/python3.6/site-packages/click/core.py"", line 722, in __call__      return self.main(*args, **kwargs)    File ""/usr/local/lib/python3.6/site-packages/click/core.py"", line 676, in main      _verify_python3_env()    File ""/usr/local/lib/python3.6/site-packages/click/_unicodefun.py"", line 118, in _verify_python3_env      'for mitigation steps.' + extra)  RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment.  Consult http://click.pocoo.org/python3/for mitigation steps.    This system lists a couple of UTF-8 supporting locales that  you can pick from.  The following suitable locales where  discovered: af_ZA.UTF-8, am_ET.UTF-8, be_BY.UTF-8, bg_BG.UTF-8, ca_ES.UTF-8, cs_CZ.UTF-8, da_DK.UTF-8, de_AT.UTF-8, de_CH.UTF-8, de_DE.UTF-8, el_GR.UTF-8, en_AU.UTF-8, en_CA.UTF-8, en_GB.UTF-8, en_IE.UTF-8, en_NZ.UTF-8, en_US.UTF-8, es_ES.UTF-8, et_EE.UTF-8, eu_ES.UTF-8, fi_FI.UTF-8, fr_BE.UTF-8, fr_CA.UTF-8, fr_CH.UTF-8, fr_FR.UTF-8, he_IL.UTF-8, hr_HR.UTF-8, hu_HU.UTF-8, hy_AM.UTF-8, is_IS.UTF-8, it_CH.UTF-8, it_IT.UTF-8, ja_JP.UTF-8, kk_KZ.UTF-8, ko_KR.UTF-8, lt_LT.UTF-8, nl_BE.UTF-8, nl_NL.UTF-8, no_NO.UTF-8, pl_PL.UTF-8, pt_BR.UTF-8, pt_PT.UTF-8, ro_RO.UTF-8, ru_RU.UTF-8, sk_SK.UTF-8, sl_SI.UTF-8, sr_YU.UTF-8, sv_SE.UTF-8, tr_TR.UTF-8, uk_UA.UTF-8, zh_CN.UTF-8, zh_HK.UTF-8, zh_TW.UTF-8  ```    I've tried fixed like such but I still get the same error     ```  export LC_ALL=en_us.UTF-8  export LANG=en_us.UTF-8  ```    If I run the following from within the shell of my virtualenv or my global python3 shell everything looks fine.    ```?  ~ python3  Python 3.6.5 (default, Apr 25 2018, 14:23:58)  [GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.1)] on darwin  Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.  >>> import locale  >>> locale.getlocale()  ('en_US', 'UTF-8')  ```      Operating system: Mac OS High Sierra 10.13.4  Python version: 3.6.5  Black version: black 18.5b1  ";kindjacket;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 8:07;30.5.2018 22:55;30.5.2018 22:55;closed;[enhancement];1;278;Add short form flag `-h`;https://api.github.com/repos/ambv/black/issues/278;https://github.com/ambv/black/issues/278;`--help` exists, but `-h` is useful too.;alok;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 10:46;30.5.2018 17:39;30.5.2018 17:39;closed;[];4;279;added whitespace in ranged sequence access;https://api.github.com/repos/ambv/black/issues/279;https://github.com/ambv/black/issues/279;"from https://github.com/tox-dev/tox/pull/833/files/f30411399372e65016772b5da8c38cd39620ef1f#diff-4c32e51992275934b9b1b0b3838a021e    ```  $ python --version  Python 3.6.5  $ cat /etc/os-release |grep VERSION  VERSION=""27 (Workstation Edition)""  $ (cd black && git rev-parse HEAD)  608019dffb1f933299f5682498548d375faf152e  $ pip install -e black  $ black --version  black, version 18.5b1  $ echo 'a[len(b):]' > example.py  $ black --diff example.py   --- example.py  (original)  +++ example.py  (formatted)  @@ -1,2 +1,2 @@  -a[len(b):]  +a[len(b) :]     reformatted example.py  ```  ";RonnyPfannschmidt;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 11:55;30.5.2018 17:36;30.5.2018 17:36;closed;[];2;280;[pep8] E203:whitespace before ':';https://api.github.com/repos/ambv/black/issues/280;https://github.com/ambv/black/issues/280;Operating system: macOS 10.13.2  Python version: 3.6.4  Black version:  Does also happen on master: yes (I did went through the steps)          indexes = list(range(10))      values = list(range(10))      print(values[indexes[2]:])     This is formatted into `print(values[indexes[2] :])` -> pep8 E203;Vict0rSch;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.5.2018 23:08;1.6.2018 2:51;1.6.2018 2:59;closed;[];7;281;Added --include and --exclude cli options;https://api.github.com/repos/ambv/black/issues/281;https://github.com/ambv/black/pull/281;These 2 options allow you to pass in regular expressions that determine whether files/directories are included or excluded in the recursive search.    This should address #270. I put the change log entry for this under `18.6b0` since I don't think it has been released yet - but let me know if this was incorrect! :sparkles: ;autophagy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.5.2018 1:15;null;12.7.2018 1:50;open;[bug, comments, design];4;282;Breaks multiline function type annotation comments;https://api.github.com/repos/ambv/black/issues/282;https://github.com/ambv/black/issues/282;Operating system: Fedora 27  4.13.9-300.fc27.x86_64)  Python version: 3.6.2  Black version: 18.5b1  Does also happen on master: yes      PEP484 was amended (https://github.com/python/typing/issues/186) to extend Python 2 compatible type annotation comments to allow placing each function parameter on a separate line with its own type annotation and the return type at the end. The motivation for this was to be able to write type annotations which would otherwise extend beyond the maximum line limit. But when it will fit in the maximum line length, Black combines all the arguments onto one line, including the type annotations, which become malformed.    Given this input    ```python  def f(a,  # type: int        b,  # type: str        c,  # type: bool        ):  # type: (...) -> None      ...  ```    Black produces this    ```python  def f(a, b, c):  # type: int  # type: str  # type: bool  # type: (...) -> None      ...  ```    which has a malformed type annotation.    I think the correct behaviour would be either leave the function parameters on separate lines (do nothing) or restructure the type annotation like this:    ```python  def f(a, b, c):  # (int, str, bool) -> None      ...  ```    or if the resultant line is too long, this    ```python  def f(a, b, c):       # (int, str, bool) -> None      ...  ```    ---    This might deserve a separate issue, but it'd be nice if Black did the reverse as well: given a very long function type annotation on one line, annotate each parameter separately.  ;ned;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.5.2018 5:12;4.6.2018 21:20;4.6.2018 21:20;closed;[];1;283;quiet is too quiet, non-quiet is too noisy;https://api.github.com/repos/ambv/black/issues/283;https://github.com/ambv/black/issues/283;Operating system: Ubuntu Bionic  Python version: 3.6  Black version: 18.5b1  Does also happen on master: haven't checked but code inspection says it will    Without --quiet, we see messages like `test_postgres_lib.py wasn't modified on disk since last run.`, or that its already formatted fine, neither of which tell a developer about actual changes that have happened (though sure, they can be useful diagnostics).    With --quiet, we see no output at all, and developers using less capable IDEs won't know to reload the file - or even that anything happened at all.    It would be really nice to have a middle ground, where messages about changes made are emitted to stderr, but not messages that reflect no-change-being-made.  ;rbtcollins;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.5.2018 19:41;31.5.2018 19:46;31.5.2018 19:46;closed;[];6;284;Specify the minimum click version;https://api.github.com/repos/ambv/black/issues/284;https://github.com/ambv/black/pull/284;;skorokithakis;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.5.2018 21:05;1.6.2018 2:35;5.6.2018 0:25;closed;[];8;285;Give same returncode for standard behaviour and --check;https://api.github.com/repos/ambv/black/issues/285;https://github.com/ambv/black/issues/285;"Hello,  i'ts about plugin developement for black.  With the standard behaviour you have the same returncode for formatted or already formatted.  If nothing changed, you don't want to apply the new black ""out"" to the current file because there are supposed to be the same and the editor could believe (and sublimetext does) something changed.    The only way to differenciate it is to ""parse"" the err output looking for ""already well formatted, good job"".  It's a bit awfull and this message could change in future release.    The other way to do it is run black twice, first with --check and then standard way. but ...    So at the end it would be more consitent to have same code for --check and standard behaviour.    Jimmy    ";jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.6.2018 18:39;1.6.2018 19:23;1.6.2018 19:23;closed;[];2;286;Can I configure `black` to ignore specific directories, such as `venv`;https://api.github.com/repos/ambv/black/issues/286;https://github.com/ambv/black/issues/286;For example I want to be able to do:  `black . --exclude=venv`    to format everything, but ignore things under `./venv`    Or is this possible already, but I didn't know how yet?    Thanks.;Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.6.2018 21:38;1.6.2018 23:47;9.6.2018 21:31;closed;[];0;287;Skip symlink test if can't create one;https://api.github.com/repos/ambv/black/issues/287;https://github.com/ambv/black/pull/287;"For some reason I get this in my windows environment:    ```  ERROR: test_broken_symlink (__main__.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File "".\tests\test_black.py"", line 734, in test_broken_symlink      symlink.symlink_to(""nonexistent.py"")    File ""c:\program files (x86)\python36-32\Lib\pathlib.py"", line 1325, in symlink_to      self._accessor.symlink(target, self, target_is_directory)    File ""c:\program files (x86)\python36-32\Lib\pathlib.py"", line 393, in wrapped      return strfunc(str(pathobjA), str(pathobjB), *args)  OSError: symbolic link privilege not held  ```    Looks like this works fine on appveyor though.";zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.6.2018 23:12;5.6.2018 0:52;29.8.2018 9:05;closed;[];21;288;Preserve line endings when formatting a file in place;https://api.github.com/repos/ambv/black/issues/288;https://github.com/ambv/black/pull/288;Fixes #258     Note that this only changes behavior when black writes back to the file. In other cases like when using `--diff` or writing to stdout, I think it's reasonable to expect the caller to handle line endings.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 1:58;5.6.2018 6:30;5.6.2018 6:30;closed;[];1;289;New release;https://api.github.com/repos/ambv/black/issues/289;https://github.com/ambv/black/issues/289;@ambv Could you please cut a new release? We're eagerly awaiting finally using `black` but require https://github.com/ambv/black/commit/8ebbd268880f15834b70910a6dc61e1ee7596b7c;ofek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 10:05;2.6.2018 23:36;4.6.2018 2:56;closed;[];5;290;Change default line length to 100 ;https://api.github.com/repos/ambv/black/issues/290;https://github.com/ambv/black/issues/290;"Hi, in the modern era it makes much more sense to have 100 as a default.    Some would prefer 120, but 100 makes the most sense as not being too big of a change.    The main importance of black is indeed to be ""uncompromising"", and I feel for it to be future proof it is another reason to choose 100 over e.g. 80 or 88.";kootenpv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 10:43;2.6.2018 14:31;2.6.2018 14:31;closed;[];2;291;Suggestion for big assignments;https://api.github.com/repos/ambv/black/issues/291;https://github.com/ambv/black/issues/291;"Imagine:        `secret = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa""`    Black makes this:    ```  secret = (    ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"",  )    ```  I don't think that makes sense. Is there a way this can be solved?  ";kootenpv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 18:58;3.6.2018 19:01;3.6.2018 19:01;closed;[];4;292;Public programmatic api;https://api.github.com/repos/ambv/black/issues/292;https://github.com/ambv/black/issues/292;I'd like to use the functionality of black to apply to unique cases where black is (probably) not interested in covering.    The specific example I had in mind, was parsing out `.. code-block:: python` portions in `.rst` files or fenced `python` blocks in markdown and formatting them.    Initial idea inspired from [here](https://github.com/pytest-dev/pytest/issues/3525);asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 18:59;2.6.2018 23:35;3.6.2018 16:58;closed;[];3;293;Package up `blib2to3`?;https://api.github.com/repos/ambv/black/issues/293;https://github.com/ambv/black/issues/293;The improvements made in `black`'s fork of `lib2to3` seem like something that would be useful for the wider community.  I'd like to be able to leverage this to write my own code rewriting tools.  Currently lib2to3 isn't really an option due to its numerous bugs and shortcomings (as well as being sequestered to the stdlib where it can't get the love it deserves).  Would you be interested in packaging this?;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 20:14;null;17.8.2018 13:00;open;[enhancement, help wanted];5;294;Handle Python code in docs (ReST, markdown etc);https://api.github.com/repos/ambv/black/issues/294;https://github.com/ambv/black/issues/294;It would be nice if black would also handle Python code blocks in documentation files (reStructuredText, markdown etc).    (via https://github.com/pytest-dev/pytest/issues/3525#issuecomment-394101163);blueyed;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.6.2018 20:33;2.6.2018 23:21;2.6.2018 23:24;closed;[];4;295;When I include `black` in my git commit message, black gets run ;https://api.github.com/repos/ambv/black/issues/295;https://github.com/ambv/black/issues/295;"Operating system: mac OS High Sierra 10.13.4  Python version: 3.6.5  Black version: 18.5b1  Does also happen on master: yes    `black` is being run when I have a git commit message that includes `black` ?    example:    ```  git commit -am ""? Format code using `black`""  ```    or even  ```  git commit -am ""`black`""  ```    output:  ```  $ git commit -am ""`black`""  No paths given. Nothing to do ?  On branch pr_13  nothing to commit, working tree clean  ```    It can have undesired side effect. For now I can update my git commit message, but thought I'll report this strange edge case :)";Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.6.2018 5:22;3.6.2018 20:47;3.6.2018 20:50;closed;[];1;296;`python_version` => `language_version`;https://api.github.com/repos/ambv/black/issues/296;https://github.com/ambv/black/pull/296;Noticed this in `pytest`'s config -- `python_version` isn't a thing :D;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.6.2018 22:22;5.6.2018 6:28;6.6.2018 18:06;closed;[bug];2;297;Additional space after star unpacking;https://api.github.com/repos/ambv/black/issues/297;https://github.com/ambv/black/issues/297;Python version: 3.6.5  Black version: 18.5b1    Black seems to add an additional space after a `*` when unpacking a tuple    ```diff  --- test.py  (original)  +++ test.py  (formatted)  @@ -1,2 +1,2 @@  -x = 1, *(2, 3)  +x = 1, * (2, 3)  ```    I'm guessing this should be already well formatted.;carmocca;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.6.2018 11:36;5.6.2018 6:20;30.8.2018 9:18;closed;[];3;298;Feature request: Support for formatting the python code in jupyter notebooks;https://api.github.com/repos/ambv/black/issues/298;https://github.com/ambv/black/issues/298;*Jupyter notebooks* are quite popular and are used a lot (especially in tasks related to data analysis, visualization etc.).  These notebooks are also used as presentations and tutorials.   It would be great if `black` could format the code within the cells of the notebooks.;MrinalJain17;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.6.2018 9:57;5.6.2018 18:53;5.6.2018 18:53;closed;[];3;299;stdout is not equivalent to stdin in 18.6b0;https://api.github.com/repos/ambv/black/issues/299;https://github.com/ambv/black/issues/299;"Since the new version, black add by default ""reformatted"" or ""unchanged' to stdout, even in --diff.    That breaks the expected behavior, as explained in README.    > Any tool that can pipe code through Black using its stdio mode (just use - as the file name). The formatted code will be returned on stdout (unless --check was passed). Black will still emit messages on stderr but that shouldn't affect your use case.    I personally think it's regression since `black -` can't be used anymore for anything else printing in a console.    The usage of ""quiet"", which gives a valid stdout, make loose the non error messages.    I not asking to change it at any price (even if I'd like) but I want to be sure it's the expected behavior.    Jimmy    ";jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.6.2018 16:38;5.6.2018 18:35;5.6.2018 18:35;closed;[];0;300;? ? ? isn't appropriate when it fails;https://api.github.com/repos/ambv/black/issues/300;https://github.com/ambv/black/issues/300;"It's not a bug, more of an enhancement/feature request.   I run `black --check dir/with/files` and get this output:  ```  ...  would reformat /app/tests/test_ingest_backfill.py  would reformat /app/tests/test_main_models.py  would reformat /app/tests/test_ingest_sqs.py  All done! ? ? ?  23 files would be reformatted, 11 files would be left unchanged.  ```    It's ""all done"" as in it's finished checking all the files. But the ? ? ? emojis are way to happy when in fact the whole check failed. ";peterbe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.6.2018 16:51;5.6.2018 18:35;5.6.2018 20:31;closed;[];2;301;? ? ? isn't appropriate when it fails, fixes #300;https://api.github.com/repos/ambv/black/issues/301;https://github.com/ambv/black/pull/301;It's whimsical but this output feels more appropriate:  ```bash  ? python black.py --check /tmp/foo.py  would reformat /tmp/foo.py  All done!? ? ?  1 file would be reformatted.  ? python black.py /tmp/foo.py  reformatted /tmp/foo.py  All done! ? ? ?  1 file reformatted.  ? python black.py --check /tmp/foo.py  All done! ? ? ?  1 file would be left unchanged.  ```    PR has no tests. Tips on where to put the tests appreciated. ;peterbe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.6.2018 20:32;6.6.2018 2:48;6.6.2018 3:39;closed;[];2;302;correct email for Peter Bengtsson;https://api.github.com/repos/ambv/black/issues/302;https://github.com/ambv/black/pull/302;Thanks for the [ack](https://github.com/ambv/black/commit/26b92e66aca6124ba8761f690ec7ee18757411b7) but I'd like to use my non-work email if you don't mind. ;peterbe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 10:07;6.6.2018 18:50;6.6.2018 18:57;closed;[];2;303;Link to GitHub + HTTPS + typos;https://api.github.com/repos/ambv/black/issues/303;https://github.com/ambv/black/pull/303;* Link to GitHub from the contributing page  * Update the current Python 3.6 minor version  * Update HTTP links to HTTPS, where available  * Fix a couple of typos  * Italicise *Black*;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 13:15;6.6.2018 13:17;6.6.2018 13:17;closed;[];1;304;Pre-commit hook always thinks it changed files;https://api.github.com/repos/ambv/black/issues/304;https://github.com/ambv/black/issues/304;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Ubuntu  Python version: 3.6.3  Black version: 18.6b0  Does also happen on master: Not sure, it's a pre-commit hook    When running Black under pre-commit, it always formats files, even files it just formatted. So, here are the steps of what happens:    1. I try to commit, I run black, it (correctly) formats the files.  2. I add the changes and try to commit again.  3. Black says it formatted the same exact file again and the commit fails.  4. There are no more changes to add, the file looks exactly the same.    This is breaking commits, since nobody can commit :( I don't know why Black thinks it made changes when it didn't, and I'm not sure if this is a pre-commit bug or a Black bug.;skorokithakis;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 18:11;7.6.2018 0:44;7.6.2018 0:44;closed;[bug];0;305;Additional space after star unpacking of string;https://api.github.com/repos/ambv/black/issues/305;https://github.com/ambv/black/issues/305;"Operating system: Windows 10 x64  Python version: **3.6.5**  Black version: **18.6b1**  Does also happen on master: yes    Black seems to add an additional space after a * when unpacking a string,    ```python  x = 1, *""ab"" # original  x = 1, * ""ab"" # formatted  ```  ";tweakimp;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 20:04;10.6.2018 4:17;10.6.2018 4:17;closed;[duplicate, enhancement];3;306;Implicit string literal concatenation and indentation within structures;https://api.github.com/repos/ambv/black/issues/306;https://github.com/ambv/black/issues/306;"I was updating our internal style guide to recommend using Black everywhere and ran into one less than satisfying case with long string literals nested in something like a `dict` declaration using black, version 18.6b1.    Here's an example input with a few variations:    ```python    # Single strings won't be wrapped:  print({      ""this key is really long and so is the value"": ""but it still fits on one line"",      ""but this key is even longer and"": ""the value is a long literal which should be on multiple lines for clarity"",  })    # The second string literal in the value should wrap:  print({      ""this key is really long and so is the value"": ""but it still fits on one line"",      ""but this key is even longer and"": ""the value is a long literal which should be on multiple"" "" lines for clarity"",  })    # Using parentheses should wrap and indent:  print({      ""this key is really long and so is the value"": ""but it still fits on one line"",      ""but this key is even longer and"": (""the value is a long literal which should be on multiple"" "" lines for clarity""),  })    # Doing the same thing as a list should be similar:  print([      ( ""this key is really long and so is the value"", ""but it still fits on one line"", ),      ( ""but this key is even longer and"", ""the value is a long literal which should be on multiple"" "" lines for clarity""),  ])    # Using parentheses around the literal should wrap and indent within the  # parentheses:    print([      ( ""this key is really long and so is the value"", ""but it still fits on one line"", ),      ( ""but this key is even longer and"", ( ""the value is a long literal which should be on multiple"" "" lines for clarity""), ),  ])    ```    Black 18.6b1 produces this:    ```diff  --- example.py 2018-06-06 17:57:11 +0000  +++ example.py 2018-06-06 17:57:42.930371 +0000  @@ -17,36 +17,66 @@           ""should be indented"": ""at the same level"",       }   )      # Single strings won't be wrapped:  -print({  -    ""this key is really long and so is the value"": ""but it still fits on one line"",  -    ""but this key is even longer and"": ""the value is a long literal which should be on multiple lines for clarity"",  -})  +print(  +    {  +        ""this key is really long and so is the value"": ""but it still fits on one line"",  +        ""but this key is even longer and"": ""the value is a long literal which should be on multiple lines for clarity"",  +    }  +)      # The second string literal in the value should wrap:  -print({  -    ""this key is really long and so is the value"": ""but it still fits on one line"",  -    ""but this key is even longer and"": ""the value is a long literal which should be on multiple"" "" lines for clarity"",  -})  +print(  +    {  +        ""this key is really long and so is the value"": ""but it still fits on one line"",  +        ""but this key is even longer and"": ""the value is a long literal which should be on multiple""  +        "" lines for clarity"",  +    }  +)      # Using parentheses should wrap and indent:  -print({  -    ""this key is really long and so is the value"": ""but it still fits on one line"",  -    ""but this key is even longer and"": (""the value is a long literal which should be on multiple"" "" lines for clarity""),  -})  +print(  +    {  +        ""this key is really long and so is the value"": ""but it still fits on one line"",  +        ""but this key is even longer and"": (  +            ""the value is a long literal which should be on multiple""  +            "" lines for clarity""  +        ),  +    }  +)      # Doing the same thing as a list should be similar:  -print([  -    ( ""this key is really long and so is the value"", ""but it still fits on one line"", ),  -    ( ""but this key is even longer and"", ""the value is a long literal which should be on multiple"" "" lines for clarity""),  -])  +print(  +    [  +        (  +            ""this key is really long and so is the value"",  +            ""but it still fits on one line"",  +        ),  +        (  +            ""but this key is even longer and"",  +            ""the value is a long literal which should be on multiple""  +            "" lines for clarity"",  +        ),  +    ]  +)      # Using parentheses around the literal should wrap and indent within the   # parentheses:     -print([  -    ( ""this key is really long and so is the value"", ""but it still fits on one line"", ),  -    ( ""but this key is even longer and"", ( ""the value is a long literal which should be on multiple"" "" lines for clarity""), ),  -])  +print(  +    [  +        (  +            ""this key is really long and so is the value"",  +            ""but it still fits on one line"",  +        ),  +        (  +            ""but this key is even longer and"",  +            (  +                ""the value is a long literal which should be on multiple""  +                "" lines for clarity""  +            ),  +        ),  +    ]  +)    ```    Ignoring the issue of splitting or joining literals, it seems like the non-parenthesized values could be indented in a way which more clearly indicates the structure.    For example, instead of    ```python      {          ""this key is even longer and"": ""the value is a long literal which should be on multiple""          "" lines for clarity"",      }  ```    it seems better to read if it was indented either one stop or to match the previous literal:    ```python      {          ""this key is even longer and"": ""the value is a long literal which should be on multiple""              "" lines for clarity"",      }  ```    ```python      {          ""this key is even longer and"": ""the value is a long literal which should be on multiple""                                         "" lines for clarity"",      }  ```    or if Black would insert parentheses so there's no chance that the wrapped concatenation would be seen as the start of a new key rather than a continuation of the previous value.      ";acdha;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 20:37;7.6.2018 0:42;9.6.2018 21:31;closed;[];2;307;Change tests with stdin/out to exercise black.main;https://api.github.com/repos/ambv/black/issues/307;https://github.com/ambv/black/pull/307;We can use `CliRunner.invoke()` to run all of black in these tests, but unfortunately `result.output` contains a merged stdout/stderr. click 7 will add support for separating them but it's still in development, so this PR adds a small hack that helps track them separately.    Confirmed that these tests fail on `16.b0`, catching #299.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 21:00;7.6.2018 0:40;7.6.2018 20:19;closed;[];3;308;List the Python extension for VS Code as an editor integration;https://api.github.com/repos/ambv/black/issues/308;https://github.com/ambv/black/pull/308;;brettcannon;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 21:28;7.6.2018 0:44;9.6.2018 21:31;closed;[];1;309;"Don't put a space after `*` in `g = 1, *""x""`";https://api.github.com/repos/ambv/black/issues/309;https://github.com/ambv/black/pull/309;Fixes #305.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.6.2018 23:10;7.6.2018 0:45;7.6.2018 1:16;closed;[];4;310;"vim: add ""--skip-string-normalization"" support";https://api.github.com/repos/ambv/black/issues/310;https://github.com/ambv/black/pull/310;Since 18.6b0 was released, there has been a new option to skip string  normalization when Black is called, but it wasn't able to be specified  from within the vim plugin. This commit adds that functionality.    Tested with g:black_skip_string_normalization set to 0 (off) and 1 (on).;dotwaffle;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 6:34;8.6.2018 0:24;8.6.2018 0:24;closed;[];4;311;Space inserted after function call in slice;https://api.github.com/repos/ambv/black/issues/311;https://github.com/ambv/black/issues/311;Operating system: OSX  Python version: 3.6.4  *Black* version: 18.6b1  Does also happen on master: Yes    ### Concern  Black appears to special case function calls in slices, inserting a space after them.    ```python  a = b[foo():]  ```  becomes  ```python  a = b[foo() :]  ```    PEP-8 (to my reading) only specifies *equal* spacing around colons and does not special case function calls. The example given in PEP-8 which includes function calls happens to display that equal spacing as a single space, but no negative example is given which would forbid having consistent zero space slices. i.e.    ```  ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]  ```    does not preclude    ```  ham[:upper_fn(x):step_fn(x)], ham[::step_fn(x)]  ```    ### Suggestion    Since it is syntactically valid, does not interact with operator precedence, conforms to previous lint standards and follows the equality requirement of PEP-8 do not insert a space in this case.;iandanforth;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 12:23;7.6.2018 20:41;7.6.2018 20:41;closed;[];0;312;Variable `mode` referenced before assignment;https://api.github.com/repos/ambv/black/issues/312;https://github.com/ambv/black/issues/312;Guys, it seems this https://github.com/ambv/black/pull/310 cause an issue if g:black_skip_string_normalization is false. Then on https://github.com/ambv/black/blob/master/plugin/black.vim#L104 variable `mode` doesn't exists, what causes `Variable `mode` referenced before assignment` error  ;ZhukovGreen;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 12:31;7.6.2018 20:41;7.6.2018 20:41;closed;[bug];1;313;Black fails on empty multiline string (`''''''`): string index out of range;https://api.github.com/repos/ambv/black/issues/313;https://github.com/ambv/black/issues/313;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system:  Python version: 3.6.5  *Black* version: 18.8b0    When running black on  ```  a = ''''''  ```  one gets  ```  error: string index out of range  ```  Workaround: Manually replace the six `'` by `""`.";nschloe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 14:22;7.6.2018 20:41;9.6.2018 21:31;closed;[];1;314;fix handling of empty triple quoted strings;https://api.github.com/repos/ambv/black/issues/314;https://github.com/ambv/black/pull/314;Fixes #313 ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 16:48;7.6.2018 17:32;7.6.2018 17:32;closed;[];2;315;Does not comply with E203 from pep8;https://api.github.com/repos/ambv/black/issues/315;https://github.com/ambv/black/issues/315;Operating system:  Python version: 3.6  *Black* version: 18.6b1  Does also happen on master: yes    Create a file with    `tup = nsamples, nalleless[i : i + size], i, size`    and black won't correct the white spaces around `:`.;horta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.6.2018 23:56;8.6.2018 4:43;8.6.2018 4:43;closed;[];1;316;Add `-h` as a shortcut for `--help`;https://api.github.com/repos/ambv/black/issues/316;https://github.com/ambv/black/pull/316;I always type `black -h` and then kick myself for not typing `black --help`, this PR being accepted would mean I don't have to kick myself :)  ;sixninetynine;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 2:30;26.9.2018 19:25;26.9.2018 19:25;closed;[design];6;317;Regular formatting of multiline expressions;https://api.github.com/repos/ambv/black/issues/317;https://github.com/ambv/black/issues/317;"Operating system: Arch Linux  Python version: 3.6.5  *Black* version: 18.6b1  Does also happen on master: yes    ----    Function names should start left of their parameters, to maintain left to right reading.    While this might sound natural, in multiline expressions it is surprisingly frequently violated.  Violations result in irregular/strange looking code, that require non-linear scanning to understand.    The examples below are generated by `black -l 40`:    ----  ```python  # original  if function1(arg1, arg2, arg3) and f2(arg1, arg2, arg3):      pass    if function1(arg1, arg2, arg3) and function2(arg1, arg2, arg3):      pass  ```  ```python  # expected, regular  if (      function1(arg1, arg2, arg3)      and f2(arg1, arg2, arg3)  ):      pass    if (      function1(arg1, arg2, arg3)      and function2(arg1, arg2, arg3)  ):      pass  ```    ```python  # black, irregular  if function1(arg1, arg2, arg3) and f2(      arg1, arg2, arg3  ):      pass    if function1(      arg1, arg2, arg3  ) and function2(arg1, arg2, arg3):      pass  ```    ----    ```python  # original  variable = some_long_function(with_long, argument, list)  ```    ```python  # expected  variable = (      some_long_function(          with_long, argument, list      )  )  ```    ```python  # black  variable = some_long_function(      with_long, argument, list  )  ```  ----    Is there any difference?  ```python  # black  variable = (      [long, list]      + [another, long, list]      + [yet, more]  )    # black  variable = f(      [long, list]      + [another, long, list]      + [yet, more]  )  ```    ```python  # expected formatting of the second one  variable = (      f(          [long, list]          + [another, long, list]          + [yet, more]      )  )  ```  ----  Method calls, method chaining    ```python  # expected  variable = (      object      .method1(a, r, g, u, m, e, n, t)      .method2(argument2)  )    variable = (      ""variable1 = {}""      .format(variable)  )  ```    ```python  # black  variable = object.method1(      a, r, g, u, m, e, n, t  ).method2(argument2)      variable = ""variable1 = {}"".format(      variable  )  ```  ----    All the expected examples are wrapped in an extra `()`-s and thus the expression's internal `()`-s are not needed to be repurposed for implicit line continuations.";e3krisztian;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 6:57;8.6.2018 12:37;8.6.2018 12:37;closed;[];1;318;Trailing whitespace in triple double quotes does not get cut;https://api.github.com/repos/ambv/black/issues/318;https://github.com/ambv/black/issues/318;"Operating system: Windows 10 x64  Python version: 3.6.5  **Black** version: 18.6b1  Does also happen on master: :heavy_check_mark:    Black does not change anything in this:  ```python  """"""  This string has   trailing whitespace   in every but the last line.  """"""  ```  Is it supposed to be that way?  ";tweakimp;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 14:43;8.6.2018 15:52;8.6.2018 15:52;closed;[];2;319;skip-string-normalization is not in master;https://api.github.com/repos/ambv/black/issues/319;https://github.com/ambv/black/issues/319;I installed black from master and did not find the -S or --skip-string-normalization  ;eyadsibai;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 17:28;18.7.2018 11:51;18.7.2018 11:51;closed;[documentation];7;320;format SCM diffs only;https://api.github.com/repos/ambv/black/issues/320;https://github.com/ambv/black/issues/320;Feature request: for projects not fully adopting black yet, would be nice if we could have some way of using black on the diffs only. I understand this is a non-trivial task. But should be possible to somehow get the diff against ``HEAD`` and keep only lines from that. Taking over the world one commit at a time?;gaborbernat;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 20:20;23.6.2018 9:56;23.6.2018 9:56;closed;[];4;321;BufWritePost vs BufWritePre;https://api.github.com/repos/ambv/black/issues/321;https://github.com/ambv/black/issues/321;Hi,    the readme section on vim recommends `BufWritePost`. Does `BufWritePre` not make more sense or am i missing something?;davidszotten;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 21:31;9.6.2018 21:30;9.6.2018 21:30;closed;[bug, invalid code];1;322;INTERNAL ERROR: Black produced invalid code: f-string expression part cannot include a backslash;https://api.github.com/repos/ambv/black/issues/322;https://github.com/ambv/black/issues/322;Operating system: `Windows 10 1803`  Python version:  `Python 3.6.4 :: Anaconda, Inc.`  *Black* version: `black, version 18.5b0`  Does also happen on master: Yes    Full error message: `cannot format main.py: INTERNAL ERROR: Black produced invalid code: f-string expression part cannot include a backslash (<unknown>, line 129)`    [Log from 18.5b0](https://github.com/ambv/black/files/2085780/blk_qqujvtxx.log)  [Log from master](https://github.com/ambv/black/files/2085785/blk_klfgjh_c.log)      ;Chronophylos;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 21:59;8.6.2018 22:53;8.6.2018 23:01;closed;[];4;323;Chained method calls quite unreadable;https://api.github.com/repos/ambv/black/issues/323;https://github.com/ambv/black/issues/323;*Black* version: 18.6b2    I find this vomit-worthy:    ```diff  --- a/tests/zeus/artifacts/test_checkstyle.py  +++ b/tests/zeus/artifacts/test_checkstyle.py  @@ -12,11 +12,9 @@ def test_result_generation(sample_checkstyle, default_job):       handler.process(fp)         results = list(  -        StyleViolation.query.unrestricted_unsafe().filter(  -            StyleViolation.job_id == default_job.id  -        ).order_by(  -            StyleViolation.filename.asc(), StyleViolation.message.asc()  -        )  +        StyleViolation.query.unrestricted_unsafe()  +        .filter(StyleViolation.job_id == default_job.id)  +        .order_by(StyleViolation.filename.asc(), StyleViolation.message.asc())       )  ```;dcramer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.6.2018 22:53;8.6.2018 22:54;8.6.2018 22:54;closed;[];1;324;fix when black_skip_string_normalization is set to 0;https://api.github.com/repos/ambv/black/issues/324;https://github.com/ambv/black/pull/324;mode is undefined if black_skip_string_normalization is set to 0 which raises an error in vim;xoolive;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 0:57;9.6.2018 7:02;9.6.2018 7:02;closed;[];3;325;Add .toml from tests to MANIFEST.in;https://api.github.com/repos/ambv/black/issues/325;https://github.com/ambv/black/pull/325;Needed for `test_piping_diff()`.;polyzen;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 5:39;9.6.2018 20:58;11.6.2018 16:21;closed;[];2;326;Long list of ints, floats, ...;https://api.github.com/repos/ambv/black/issues/326;https://github.com/ambv/black/issues/326;Operating system: macOS 10.12.6  Python version: 3.6.5  *Black* version: 18.6b2  Does also happen on master: probably because it's the expected behaviour    Black reformat this:    ```python  def link_related():      amounts = [          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,          2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5      ]  ```  as that:    ```python  def link_related():      amounts = [          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          1,          2,          2,          2,          2,          2,          2,          2,          2,          3,          3,          3,          3,          4,          4,          5,      ]  ```    I know it's the expected behaviour and I understand and agree in general with the rule (one item by line if it doesn't fit) but I find the results less then optimal in those cases where you have a list of integers, floats, etc. (data tables). Unfortunately I do not have a good suggestion for the moment but my idea was to open the reflection.;etienned;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 13:55;9.6.2018 21:30;9.6.2018 21:31;closed;[];2;327;Fix string normalization sometimes producing invalid fstrings;https://api.github.com/repos/ambv/black/issues/327;https://github.com/ambv/black/pull/327;Fixes #322     I'm not 100% sure this covers all possible cases (especially around nesting), but I couldn't come up with counter examples;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 19:34;9.6.2018 20:53;9.6.2018 20:53;closed;[];1;328;tuple consistency in dictionary;https://api.github.com/repos/ambv/black/issues/328;https://github.com/ambv/black/issues/328;First off, thanks for your work! black has been the first python code formatter that I've used that I mostly don't disagree with! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 19:49;19.6.2018 7:38;19.6.2018 7:38;closed;[bug];1;329;fmt:on/off placed asymmetrically ends up with a cryptic exception;https://api.github.com/repos/ambv/black/issues/329;https://github.com/ambv/black/issues/329;Operating system: Fedora Linux 28  Python version: 3.6  Black version: 18.6b2  Does also happen on master: Yes    ```  something = {      # fmt: off      'element': 1,  }  # fmt: on    something_else = 1    ```  Results in the following output    ```  $ black black_error.py   error: cannot format black_error.py: 10  All done! ? ? ?  1 file failed to reformat.  ```    Expected something telling me which line the error occurred on.  ;virtuald;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.6.2018 21:35;null;20.6.2018 20:37;open;[design, parentheses, question];8;330;Should assignments manage optional parentheses automatically?;https://api.github.com/repos/ambv/black/issues/330;https://github.com/ambv/black/issues/330;Original:    ```  class Variant:      pass    class Foo:            @property      def SupportedMimeTypes(self):          mimetypes = 'audio/musepack;;;;;;;;;application/ogg;' \              'application/x-ogg;audio/vorbis;audio/x-vorbis;audio/ogg;' \              'audio/x-ogg;audio/x-flac;application/x-flac;audio/flac'          return Variant('as', mimetypes.split(';"'))  ```    Black reformats as:    ```  class Variant:      pass      class Foo:      @property      def SupportedMimeTypes(self):          mimetypes = ""audio/musepack";application/musepack;application/x-ape; audio/ape;audio/x-ape;audio/x-musepack;application/x-musepack; audio/x-mp3;application/x-id3;audio/mpeg;audio/x-mpeg; audio/x-mpeg-3;audio/mpeg3;audio/mp3;audio/x-m4a;audio/mpc; audio/x-mpc;audio/mp;audio/x-mp;application/ogg; application/x-ogg;audio/vorbis;audio/x-vorbis;audio/ogg; audio/x-ogg;audio/x-flac;application/x-flac;"audio/flac""          return Variant(""as"", mimetypes.split(""";"))  ```    Present on master and current release.  	virtuald	null	null	null	null	null	null	
2018-06-09 21:57:29.0	null	2018-06-27 06:15:59.0	open	[enhancement, help wanted]	3	331	PyDev integration	https://api.github.com/repos/ambv/black/issues/331	https://github.com/ambv/black/issues/331	Does anyone knows if there is a way to integrate black with Eclipse PyDev plugin?	agb80	null	null	null	null	null	null	
2018-06-10 00:23:52.0	null	2018-06-10 00:49:10.0	open	[enhancement, parentheses]	1	332	Lambda wrapped without indent	https://api.github.com/repos/ambv/black/issues/332	https://github.com/ambv/black/issues/332	Original:    ```py  x = foo(      a=1,      b=lambda something1, something2: get_whatever(something1) or get_whatever(something2),      c=hello"",  )  ```    Output:    ```py  x = foo(      a=1,      b=lambda something1, something2: get_whatever(something1)      or get_whatever(something2),      c=""hello"",  )  ```    The workaround (and probably what Black should output) is to put the part after `:` in parenthesis:    ```py  x = foo(      a=1,      b=lambda something1, something2: (          get_whatever(something1) or get_whatever(something2)      ),      c=""hello"",  )  ```    ---    Operating system: Arch Linux  Python version: 3.6.5  *Black* version: 18.6b2  Does also happen on master: Yes (rev 5d0a469)	sjohannes	null	null	null	null	null	null	"
10.6.2018 7:27;null;19.8.2018 18:46;open;[enhancement, help wanted];15;333;[Feature Request] Optimize imports;https://api.github.com/repos/ambv/black/issues/333;https://github.com/ambv/black/issues/333;"Can we please have a feature, similar to [PyCharm's ""optimize imports"" feature](https://www.jetbrains.com/help/pycharm-edu/optimizing-imports.html), which basically sorts and removes un-used import statements?    P.S. Great work!, Black works like a charm for me.";devxpy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.6.2018 7:40;20.6.2018 5:46;20.6.2018 5:46;closed;[bug, invalid code];1;334;Internal error + error 12/11 with multiple format on/off;https://api.github.com/repos/ambv/black/issues/334;https://github.com/ambv/black/issues/334;"Using black on master, Fedora 28.    I was trying to produce a minimal testcase for a different bug, but found this along the way. They're probably related, so I'm going to include them on the same issue for now.    ---    Source:    ```    # fmt: off  def test_fader(test):        pass    # fmt: on    # fmt: off  something = 1  # fmt: on  ```    And I get     ```  $ black --check black_error.py   error: cannot format black_error.py: INTERNAL ERROR: Black produced invalid code: expected an indented block (<unknown>, line 5). Please report a bug on https://github.com/ambv/black/issues.  ```    Here's the contents of that file:    ```     File ""/home/virtuald/black/black.py"", line 3122, in assert_equivalent      dst_ast = ast.parse(dst)    File ""/usr/lib64/python3.6/ast.py"", line 35, in parse      return compile(source, filename, mode, PyCF_ONLY_AST)    # fmt: off  def test_fader(test):        pass    # fmt: on    # fmt: off  something = 1  # fmt: on  ```    Note that when I remove the empty line from test_fader() that the crash stops occurring, so that's probably the issue.    ---    While that's definitely a bug to be solved, here's the source that I was trying to minimize for the original issue I encountered:    ```  import pytest    # fmt: off    # Test data:  #   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]    @pytest.mark.parametrize()  def test_fader(test):      pass      # fmt: on      # fmt: off    something = ''    # fmt: on    ```    The error from black is `error: cannot format black_error.py: 12`. When adding/removing whitespace, the error number changes.    Thanks!";virtuald;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.6.2018 8:12;20.6.2018 2:37;20.6.2018 2:37;closed;[bug];1;335;fmt: off is ignored after first function;https://api.github.com/repos/ambv/black/issues/335;https://github.com/ambv/black/issues/335;Fedora 28, master black    Trying to work around #334 and ran into this.    Minimized test source:    ```  import pytest    TmSt = 1  TmEx = 2    # fmt: off    # Test data:  #   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]    @pytest.mark.parametrize('test', [        # Test don't manage the volume      [          ('stuff', 'in')      ],  ])  def test_fader(test):      pass    def check_fader(test):      pass    def test_calculate_fades():      calcs = [          # one is zero/none          (0, 4, 0, 0, 10,        0, 0, 6, 10),          (None, 4, 0, 0, 10,     0, 0, 6, 10),      ]    # fmt: on  ```    Result:    ```  import pytest    TmSt = 1  TmEx = 2    # fmt: off    # Test data:  #   Position, Volume, State, TmSt/TmEx/None, [call, [arg1...]]    @pytest.mark.parametrize('test', [        # Test don't manage the volume      [          ('stuff', 'in')      ],  ])  def test_fader(test):      pass      def check_fader(test):      pass      def test_calculate_fades():      calcs = [          # one is zero/none          (0, 4, 0, 0, 10, 0, 0, 6, 10),          (None, 4, 0, 0, 10, 0, 0, 6, 10),      ]      # fmt: on    ```    Note that there are two things ignored:    * Inserted extra lines between functions  * the list of tuples in test_calculate_fades was reformatted  ;virtuald;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.6.2018 16:25;10.6.2018 18:22;10.6.2018 18:22;closed;[];1;336;Black adds parens to long right tuples, it should add them to the left as well;https://api.github.com/repos/ambv/black/issues/336;https://github.com/ambv/black/issues/336;Referring to #330, I know you said you weren't going to fix this, but @sjohannes found a good solution that is very Blackish and IMHO worth considering.     Minimized Real Source :tm: :    ```  from gi.repository import GtkTemplate    class Something:            found_label,    \      playlists,      \      replace,        \      replace_entry,  \      search_entry,   \      tracks_list = GtkTemplate.Child.widgets(6)  ```    Which currently reformats to a really long ugly line:    ```    from gi.repository import GtkTemplate      class Something:        found_label, playlists, replace, replace_entry, search_entry, tracks_list = GtkTemplate.Child.widgets(          6      )    ```    It turns out that if you add parentheses to the left tuple, it is (a) still equivalent and (b) black does the Right Thing.  Here's what that looks like:    ```  from gi.repository import GtkTemplate    class Something:            (found_label,    \      playlists,      \      replace,        \      replace_entry,  \      search_entry,   \      tracks_list) = GtkTemplate.Child.widgets(6)  ```    And black does this:    ```  from gi.repository import GtkTemplate      class Something:        (          found_label,          playlists,          replace,          replace_entry,          search_entry,          tracks_list,      ) = GtkTemplate.Child.widgets(6)    ```    Which is a very Black style.    My request in this issue would be for black to add parentheses to the left tuple if it gets too long and format it as it currently does.    It can be shown that Black already does this for long tuples on the right side. It seems that for consistency it should apply the same style to tuples on the left as well.;virtuald;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.6.2018 9:50;11.6.2018 11:14;11.6.2018 11:14;closed;[];2;337;black unable to decide between two formats, cycles between them.;https://api.github.com/repos/ambv/black/issues/337;https://github.com/ambv/black/issues/337;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: OSX 10.12  Python version: Target code for version 2.7, Black running on 3.6/  *Black* version: 18.5b1    Given this code:    ```python      parser.add_argument(          ""-v"",          ""--verbosity"",          action=""count"",          default=0,          help=""Specify up to three times to increase verbosity, ""          ""i.e. -v to see warnings, -vv for information messages, ""          ""or -vvv for debug messages."",      )  ```    Black is cycling between two indentation levels for the 2nd two lines of the help parameter, either aligning them below the `help=`... or below the `""Specify`...";brunns;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.6.2018 18:17;13.6.2018 9:07;13.6.2018 9:07;closed;[bug];3;338;Crash if there is a symlink to a resource outside of the root directory;https://api.github.com/repos/ambv/black/issues/338;https://github.com/ambv/black/issues/338;Hello there, thank you for this great tool!    Black crashes when it finds a symbolic link pointing to a file or a directory outside of the root directory.    **Steps to reproduce**    - Create the following structure:  ```  base    |-- repo    |     |-- dummy.py    |     `-- resource -> ../resource    `-- resource  ```  - Initiate `base/repo` as a Git repository (so as to set the root directory);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 14:29;13.6.2018 9:07;13.6.2018 9:07;closed;[];4;339;Ignore symbolic links pointing outside of the root directory;https://api.github.com/repos/ambv/black/issues/339;https://github.com/ambv/black/pull/339;Within the structure of files to analyze, if there is a symbolic link pointing to a file or a directory outside of the root directory, this symlink is now ignored, as it appears to be out of the scope of the analyzed project.    This PR fixes #338.;Neraste;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 15:04;16.6.2018 20:53;16.6.2018 20:53;closed;[enhancement];1;340;pyi mode: blank line after constants;https://api.github.com/repos/ambv/black/issues/340;https://github.com/ambv/black/issues/340;In pyi mode, I think there should be a blank line here  ```python  x: int  def y() -> None: ...  ```  I can make this change.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 15:22;null;17.8.2018 13:06;open;[design];4;341;pyi mode: line length to 130;https://api.github.com/repos/ambv/black/issues/341;https://github.com/ambv/black/issues/341;Typeshed's style guidelines now recommend a 130-character line length (https://github.com/python/typeshed/commit/da7b04904c3000f137f9b2559f9bb55b28d0a3b7). Should Black use the same line length for pyi files?    A complication: If Black is formatting both `.py` and `.pyi` files in a single run, what should the behavior of the `--line-length` command-line flag be? Perhaps we should add a separate `--pyi-line-length` flag, or just say that you shouldn't use a custom line length if you want to format both kinds of files within the same invocation of Black.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 16:18;20.6.2018 20:06;20.6.2018 20:06;closed;[duplicate];8;342;How can I break lines in vim?;https://api.github.com/repos/ambv/black/issues/342;https://github.com/ambv/black/issues/342;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: *Linux Arch*  Python version: *3.6.65*  *Black* version: Black, version 18.6b2 on Python 3.6.5 (default, May 11 2018, 04:00:52)  [GCC 8.1.0].     Does also happen on master: :thinking:     To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 22:35;12.6.2018 22:36;12.6.2018 22:38;closed;[];2;343;Remove reference to deprecated Visual Studio Code extension;https://api.github.com/repos/ambv/black/issues/343;https://github.com/ambv/black/pull/343;@ambv As promised, I've deprecated my Visual Studio Code extension in favor of the new official Python extension's Black support.;joslarson;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.6.2018 23:59;13.6.2018 0:08;13.6.2018 0:08;closed;[];1;344;Call chains in list comprehensions poorly formatted;https://api.github.com/repos/ambv/black/issues/344;https://github.com/ambv/black/issues/344;Operating system: macos  Python version: any  *Black* version: 18.6b2  Does also happen on master: yes, commit `fb34c9e`    Black formats this code like so:    ```python  def do_thing():      return [          x          for y in m.Package.query.with_entities(m.Package.name)          .order_by(m.Package.name.asc())          .all()          for x in y      ]  ```    but I believe (based on [the call chains section of the readme](https://github.com/ambv/black#call-chains) it should be:    ```python  def do_thing():      return [          x          for y in m.Package.query.with_entities(              m.Package.name          ).order_by(              m.Package.name.asc()          ).all()          for x in y      ]  ```;quodlibetor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.6.2018 0:16;20.6.2018 20:19;20.6.2018 20:19;closed;[design, duplicate];1;345;Style Change RFC: Block-indent fluent line breaks;https://api.github.com/repos/ambv/black/issues/345;https://github.com/ambv/black/issues/345;In #344 I thought that there was a bug in the formatting, but it turned out I was just confused. I think that fluent interfaces could benefit from an indent of `.`-prefixed lines.    The specific rule that I am proposing is:    > If there is an attribute and method chain that must be broken onto multiple lines, then break at the first dot that precedes a method call and indent 4 spaces from the previous line for all future method calls.    consider the difference:    ```python  def current():      return [          x          for y in m.Package.query.with_entities(m.Package.name)          .order_by(m.Package.name.asc())          .all()          for x in y      ]  ```    ```python  def proposed():      return [          x          for y in m.Package.query              .with_entities(m.Package.name)              .order_by(m.Package.name.asc())              .all()          for x in y      ]  ```  ;quodlibetor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.6.2018 14:53;null;20.6.2018 20:21;open;[bug, trailing comma];8;346;Splitting of a function across multiple lines doesn't add a trailing comma;https://api.github.com/repos/ambv/black/issues/346;https://github.com/ambv/black/issues/346;Operating system: Arch Linux  Python version: 3.6.5  *Black* version: master  Does also happen on master: yes    Consider the following line (unformatted):    ```  return make_deferred_yieldable(threads.deferToThreadPool(self.hs.get_reactor(), self.hs.get_reactor().getThreadPool(), _do_hash))  ```    Black formats it as thus:    ```  return make_deferred_yieldable(      threads.deferToThreadPool(          self.hs.get_reactor(), self.hs.get_reactor().getThreadPool(), _do_hash      )  )  ```    My coworker @richvdh gathers that it should be formatted with a trailing comma after the `threads.deferToThreadPool` call for consistency with how multi-line lists are formatted, producing the following:     ```  return make_deferred_yieldable(      threads.deferToThreadPool(          self.hs.get_reactor(), self.hs.get_reactor().getThreadPool(), _do_hash      ),  )  ```    Is this something Black should do? PEP8's trailing comma examples don't really cover this specific case, so I'm not sure :)  ;hawkowl;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.6.2018 15:43;13.6.2018 20:49;13.6.2018 21:25;closed;[];3;347;"Harmonise ""PEP 8"" spelling/formatting in README";https://api.github.com/repos/ambv/black/issues/347;https://github.com/ambv/black/pull/347;There was one instance without a whitespace in between, see diff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.6.2018 13:20;null;17.8.2018 13:11;open;[design, parentheses];3;348;Assert statement condition broken up in unfortunate way;https://api.github.com/repos/ambv/black/issues/348;https://github.com/ambv/black/issues/348;"Operating system: Win 10 1803 x64  Python version: 3.6.5  *Black* version: 18.6b2  Does also happen on master: yes    Black outputs the following code in one project (https://github.com/googlei18n/fontmake/pull/444/commits/e22a624deb3429eb4882e9c31cb15e8c769fc1f9):  ```py3          assert len(ufo_order) == len(              ot_order          ), ""{}, subsetting: amount of glyphs does not match with {}"".format(              ufo.path, otf_path          )  ```  The placement of the assert condition is unfortunate... Is this expected? Is there a more elegant way to write that code?";madig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.6.2018 13:32;17.9.2018 19:02;17.9.2018 19:02;closed;[enhancement, help wanted];9;349;blackd: a server mode to circumvent startup time costs;https://api.github.com/repos/ambv/black/issues/349;https://github.com/ambv/black/issues/349;I love black, and have championed its adoption where I work (ravelin.com).    However, it is currently not a viable save hook in the same way `gofmt` and `rustfmt` are: taking into account the startup time of the Python interpreter, it is simply too slow. After every save, I need to be conscious that I need to wait a second or two for black to do its thing and let my editor autoreload.    Would you be open to adding a server/daemon mode, where a persistent instance of Black is running and listening to formatting requests?    (Of course, ideally we would compile Black into a very quickly starting binary, but that is probably quite a difficult task.)  ;maciejkula;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.6.2018 14:08;14.6.2018 15:25;14.6.2018 15:25;closed;[];2;350;Formatting a selected range in a list;https://api.github.com/repos/ambv/black/issues/350;https://github.com/ambv/black/issues/350;Operating system: Linux  Python version: 3.6  *Black* version:  18.6b2  Does also happen on master: yes    ```python  bucket = []  y = []  for buck in bucket:      y.append(buck[1: len(buck) - 1])  ```    After using black formatting, it is adding a space after the digit 1   ```python     y.append(buck[1 : len(buck) - 1])  ```   it breaks E203. Is this the intented behavior?;eyadsibai;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.6.2018 15:36;14.6.2018 15:37;14.6.2018 15:37;closed;[];0;351;Long Line Comments Stay Long;https://api.github.com/repos/ambv/black/issues/351;https://github.com/ambv/black/issues/351;Operating system: Linux  Python version: 3.6  *Black* version: 18.b2  Does also happen on master: yes    when formatting a python file that has a long comment line (longer than the line length), black keeps the line as it is.;eyadsibai;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 1:04;25.9.2018 17:19;25.9.2018 17:43;closed;[];3;352;correct author name;https://api.github.com/repos/ambv/black/issues/352;https://github.com/ambv/black/pull/352;cc @ambv wait until new pip release ofc :slightly_smiling_face: ;ofek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 16:57;16.6.2018 22:40;18.6.2018 11:40;closed;[];12;353;on demand mode of format, but also run the check logic;https://api.github.com/repos/ambv/black/issues/353;https://github.com/ambv/black/issues/353;This is an integration issue with tox. Ideally, we would like to have a single common environment for both the CI check that format looks good;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 18:22;15.6.2018 19:11;16.6.2018 0:52;closed;[];3;354;Black and pycodestyle disagree about whitespace before :;https://api.github.com/repos/ambv/black/issues/354;https://github.com/ambv/black/issues/354;Operating system: Debian 9  Python version: python 3.6  *Black* version: 18.6b2  Does also happen on master: yes    Steps to reproduce:    ```python  # in foo.py   a[len(b) :]  ```    ```  $ black --diff foo.py  All done! ? ? ?  1 file left unchanged.  $ pycodestyle foo.py  foo.py:1:9: E203 whitespace before ':'  ```    This is unfortunate because I use `pycodestyle` for CI (not everyone can/want use to black yet), but I use black in my editor to format on save ...    Of course, a workaround is to use `# fmt: off`, but I still think this is a bug in black and should be fixed.;dmerejkowsky;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 18:37;null;1.10.2018 14:08;open;[design, enhancement];2;355; Black should have an opinion about empty line after functions doc string;https://api.github.com/repos/ambv/black/issues/355;https://github.com/ambv/black/issues/355;"Currently Black forces an empty line after a class docstring, but it does not do it for functions.    This code will be left unchanged by Black:  ```Python  def lol():      """"""      mdr      """"""        lol      def lol():      """"""      mdr      """"""      lol    ```    Black should have an opinion about that. I don't really care about the choice.";erdnaxeli;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 21:22;16.6.2018 0:12;16.6.2018 0:17;closed;[];2;356;Add code snippet for using black badge in .rst;https://api.github.com/repos/ambv/black/issues/356;https://github.com/ambv/black/pull/356;;Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.6.2018 21:25;20.6.2018 7:04;20.6.2018 7:04;closed;[];5;357;Add PyPI Python version badge to readme;https://api.github.com/repos/ambv/black/issues/357;https://github.com/ambv/black/pull/357;;Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.6.2018 0:17;16.6.2018 0:19;16.6.2018 0:24;closed;[duplicate];2;358;Really long for lines with can produce different code on the second pass.;https://api.github.com/repos/ambv/black/issues/358;https://github.com/ambv/black/issues/358;"Simple reproduction case:    ```python  some_dictionary_goes_here = dict()  for some_long_key_goes_here, some_long_value_goes_right_here in some_dictionary_goes_here.get('someval', {}).items():      pass  ```    And you get an error message like:    ```  error: cannot format example.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /var/folders/sc/373kncn649dsmcmyq47hh8_r0000gn/T/be0glk_yocel.log  ```    The diff:    ```diff  --- source  +++ first pass  @@ -1,5 +1,11 @@       some_dictionary_goes_here = dict()  -for some_long_key_goes_here, some_long_value_goes_right_here in some_dictionary_goes_here.get('someval', {}).items():  +for (  +    some_long_key_goes_here,  +    some_long_value_goes_right_here,  +) in some_dictionary_goes_here.get(  +    ""someval"", {}  +).items():       pass  +  --- first pass  +++ second pass  @@ -2,10 +2,8 @@     some_dictionary_goes_here = dict()   for (       some_long_key_goes_here,       some_long_value_goes_right_here,  -) in some_dictionary_goes_here.get(  -    ""someval"", {}  -).items():  +) in some_dictionary_goes_here.get(""someval"", {}).items():       pass  ```    Operating system: Mac OS X  Python version: Python 3.6.5  *Black* version: 18.6b2  Does also happen on master: yes  ";bryanhelmig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.6.2018 0:23;null;16.6.2018 0:23;open;[enhancement, help wanted, lib2to3];0;359;Cython grammar support;https://api.github.com/repos/ambv/black/issues/359;https://github.com/ambv/black/issues/359;We'd like to be able to format .pyx, .pxd, and .pxi files, too.;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.6.2018 5:10;16.6.2018 20:53;16.6.2018 20:53;closed;[];4;360;add blank line after constants in stub file;https://api.github.com/repos/ambv/black/issues/360;https://github.com/ambv/black/pull/360;Fixes #340;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.6.2018 22:02;16.6.2018 22:14;16.6.2018 22:48;closed;[];2;361;Add pyls-black to README;https://api.github.com/repos/ambv/black/issues/361;https://github.com/ambv/black/pull/361;I recently wrote a Python Language Server plugin for [Black](https://github.com/rupert/pyls-black). In the `README` you mentioned you were working on a Atom/Nuclide plugin so this may be of interest. To use it from Atom you'll need to install the `atom-ide-ui` and `ide-python` packages.    It would be great if `pyls-black` could be added to the `README` so other people can try it out!;rupert;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.6.2018 1:49;null;27.9.2018 0:51;open;[enhancement, help wanted];14;362;Binary releases;https://api.github.com/repos/ambv/black/issues/362;https://github.com/ambv/black/issues/362;I'm interested in adopting black for our dev team, but we are currently on python 2.7 and 3.5, so we cannot easily use black as we'll need to set up python 3.6+. This is not very convenient for a large dev team.    It would be more convenient if this project also distributed binaries for each release. Build for Windows, macOS and Linux. This can be done using CI.;cxong;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.6.2018 8:48;null;21.6.2018 19:10;open;[design, question];5;363;Should Black change `.format()` and `%` into f-strings in 3.6+ mode?;https://api.github.com/repos/ambv/black/issues/363;https://github.com/ambv/black/issues/363;"For Python3.6+ formatting, I would really like to see black convert all formatted strings to f-strings if possible.  F-strings are shorter, easier to read and, in my opinion, more pythonic.  ```python  # Originals  ""filename"" + date + "".pdf""   ""filename%s.pdf"" % date  ""filename{0}.pdf"".format(date)    # Suggested formatted output  f""filename{date}.pdf""    ````  ";tweakimp;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.6.2018 0:28;19.6.2018 5:10;19.6.2018 5:10;closed;[];1;364;Please add the link to readthedocs at top of project page;https://api.github.com/repos/ambv/black/issues/364;https://github.com/ambv/black/issues/364;"It would be nice to have the link to http://black.readthedocs.io/en/latest/ at the top of the GitHub project page: see screenshot of where it can be added.  <img width=""1018"" alt=""screen shot 2018-06-18 at 3 23 33 pm"" src=""https://user-images.githubusercontent.com/5844587/41565558-216b2ef4-730c-11e8-8733-92dd34339336.png"">      Project admin should see the ""Edit"" button right there and add the link.    Thanks!  ";Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.6.2018 0:47;19.6.2018 5:12;19.6.2018 6:28;closed;[];3;365;Add travis badge and GitHub Fork banner to docs;https://api.github.com/repos/ambv/black/issues/365;https://github.com/ambv/black/pull/365;"Screenshot:  <img width=""969"" alt=""screen shot 2018-06-18 at 3 44 52 pm"" src=""https://user-images.githubusercontent.com/5844587/41566101-c1b25746-730e-11e8-86c6-0a51b7282745.png"">    Thanks!";Mariatta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 4:45;null;30.10.2018 17:12;open;[design, question];3;366;Performance optimization discussion;https://api.github.com/repos/ambv/black/issues/366;https://github.com/ambv/black/issues/366;This is similar to #349,  and #109. I am unfortunate enough to deal with 100+ KB python files, on  a system where black runs at only 60KB/s. For the same reason as in #349, black is not a viable save hook, except that here the problem is single-file throughput, not startup time.     [Low throughput is common to the other python formatters that I've tried (yapf, autopep8). Profiling immediately reveals that, while much of the time is spent by other libraries (esp in `lib2to3_parse`), but at least 10-20% falls within black itself. There are specific solutions to the save hook performance problem (e.g., by detecting which parts of the file have changed and only reformatting those), but they would all make the program logic much more complicated.]    Would it be feasible to stop using a single-file approach for black and progressively move stable, basic types (like `Line` or `BracketTracker`) to a compiled library which is reachable by the main code through Python's C API? This *does* complicate installation, but would finally provide a path to speed comparable with e.g. `gofmt` and `clang-format`.;frsfnrrg;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 13:23;26.6.2018 0:12;26.6.2018 0:12;closed;[];5;367;Need an option to disable slicing formatting;https://api.github.com/repos/ambv/black/issues/367;https://github.com/ambv/black/issues/367;Hi guys! Thank you, finally there is a decent autoformatter! But these whitespaces around slice operator are too unusual for me and my team, is there is an option to disable this or can you add one?  Thanks!;scythargon;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 16:30;21.6.2018 21:04;21.6.2018 21:04;closed;[duplicate, trailing comma];1;368;Black removes trailing comma;https://api.github.com/repos/ambv/black/issues/368;https://github.com/ambv/black/issues/368;Operating system: Ubuntu  Python version: 3.6  *Black* version: 18.6b3  Does also happen on master: Probably    Black removes the trailing comma and `isort` puts it back in. It seems to me like Black shouldn't, as per the README:    ```  from test.case import (      some_long_name_that_wont_fit_one_line_because_its_long_oh_so_very_long,  )  ```;skorokithakis;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 18:02;21.6.2018 18:29;21.6.2018 18:29;closed;[];1;369;Bad formatting of multiline f-strings;https://api.github.com/repos/ambv/black/issues/369;https://github.com/ambv/black/issues/369;"This code  ```  str = f""this"" \        f""is a very"" \        f"" long "" \        f""string.""    print(str)  ```  Black converts to  ```  str = f""this"" f""is a very"" f"" long "" f""string.""    print(str)  ```  Why not just concatenate it to `str = f""this is a very long string.""`?    black, version 18.6b3  Python 3.6.5";yutkin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 19:00;21.6.2018 21:03;21.6.2018 21:03;closed;[];1;370;ENH: incremental changes to modify only code neighboring already changed lines;https://api.github.com/repos/ambv/black/issues/370;https://github.com/ambv/black/issues/370;Idea: allow running black with a `-n --dry-run=filename` option and store the resulting changeset. Then allow using this in a subsequent run to only update newly found changes.    Rational: In a workflow on an established managed repository, this would allow running black incrementally, reformatting only parts of the code that have been changed, minimizing git churn and blame lines.;mattip;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 22:28;21.6.2018 23:03;22.6.2018 6:42;closed;[bug];2;371;Freeze on multiple comments directly preceding `# fmt: off`;https://api.github.com/repos/ambv/black/issues/371;https://github.com/ambv/black/issues/371;This freezes 18.6b3:  ```py3  # It takes  # *two* lines of comments.  # fmt: off  foo . bar  # fmt: on  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.6.2018 22:58;8.9.2018 11:34;8.9.2018 11:34;closed;[bug];1;372;async comprehension formatting is broken;https://api.github.com/repos/ambv/black/issues/372;https://github.com/ambv/black/issues/372;Expected:  ```py3  async def func():      if test:          out_batched = [              i              async for i in aitertools._async_map(                  self.async_inc, arange(8), batch_size=3              )          ]  ```    Actual:  ```py3  async def func():      if test:          out_batched = [              i async              for i in aitertools._async_map(self.async_inc, arange(8), batch_size=3)          ]  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.6.2018 12:07;22.6.2018 18:21;5.11.2018 18:01;closed;[];2;373;Revisit not using Pythonic single quotes;https://api.github.com/repos/ambv/black/issues/373;https://github.com/ambv/black/issues/373;I was considering letting black format the project code but enforcing double-quotes is a major red flag and honestly shocked by this decision.     Single quotes are Pythonic and have become the defacto standard in recent years, many code checkers (e.g. [flake-quotes]) and standards (e.g. [Plone]) default/request single quotes. Just because other programming languages use double is not a reason to try to strongarm a different practice onto Python codebases.     Typing single quotes are faster due to not needing to use shift.    It will convert huge swaths of project code for no benefit and negatively effect code history. I know this because I converted from double to single for a large project and was much harder to review code history. Was any consideration made for the number of Python projects using double or single quotes?    You say this project is still in beta so you still have time to change this. Just look at the responses in #118, the community is not happy with this decision, giving quite valid reasons. Skipping checking the quotes is not a good solution as it will result in mixed quotes which is much worse.    I am certainly not asking for the arbitrary mix of double and single depending on intention. Double is only reserved for docstrings or where a single quote is needed in a string.    Please just enforce single quotes as the Python community has mutually agreed upon.    [Plone]:https://docs.plone.org/develop/styleguide/python.html#quoting  [flake8-quotes]:https://github.com/zheller/flake8-quotes;cas--;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.6.2018 14:37;null;22.6.2018 20:17;open;[enhancement, parentheses];1;374;long comments cause needless optional parentheses;https://api.github.com/repos/ambv/black/issues/374;https://github.com/ambv/black/issues/374;"Operating system: Linux  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master: yes    here's a POC:  ```python  x = 0  # this comment is so long that i am certain it will soon end up beyond the 88 character limit  ```    reformatted code:  ```python  x = (      0  )  # this comment is so long that i am certain it will soon end up beyond the 88 character limit  ```    Not sure what is the desired result here, but this is certainly not it :) Probably just leave the line alone in case where the ""multilining"" doesn't help? There seems to be a behavior where simple assignment is left alone even if too long.    Similar thing happens when the assigned value is long and a relatively short comment pushes it over the edge.    OTOH what I'd _actually want_ in this case is to keep the assignment but push the comment to the next line - or somewhere else. This is the wrong formatting result, but it does notify me that human intervention is needed, which is good.";matejcik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.6.2018 15:16;28.6.2018 12:03;28.6.2018 12:03;closed;[question];6;375;The check doesn't accept max lenght of row.;https://api.github.com/repos/ambv/black/issues/375;https://github.com/ambv/black/issues/375;Hi, I run black on my project `black /app --check -l 120 --exclude venv` and all code was reformated. But when I run --check I received messsage that  the files would be reformated. It looks that the `check` doesn't accept max lenght of row.    Operating system:   Python version:   *Black* version: black::18.6b4  Does also happen on master:    ```  black /app --pyi -l 120 --exclude venv   black /app --check -l 120 --exclude venv   ```  ;Pajinek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.6.2018 9:37;23.6.2018 9:56;23.6.2018 9:56;closed;[];1;376;Suggest BufWritePre instead of BufWritePost for vi;https://api.github.com/repos/ambv/black/issues/376;https://github.com/ambv/black/pull/376;closes #321;davidszotten;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.6.2018 17:04;null;28.6.2018 12:01;open;[empty lines, enhancement];1;377;minor: unnecessary newline inserted after `else` before function;https://api.github.com/repos/ambv/black/issues/377;https://github.com/ambv/black/issues/377;### current behaviour    (run against master)    ```diff  $ black --diff test.py 2> /dev/null  --- test.py 2018-06-23 15:02:32.200993 +0000  +++ test.py 2018-06-23 15:03:00.152248 +0000  @@ -1,6 +1,7 @@   if False:       from x import y   else:  +       def y():           pass     ```    ### desired behaviour    (noop);asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.6.2018 21:25;26.6.2018 0:21;29.10.2018 11:18;closed;[];5;378;Configurable Indent Levels?;https://api.github.com/repos/ambv/black/issues/378;https://github.com/ambv/black/issues/378;before lobbing a PR over, I wanted to spin up a quick discussion around adding an option to `black` to permit smoother interop with 2-space indent code bases.    At Twitter, we would like to experiment with adopting `black` as autofmt tooling in a few of our open source projects and potentially more widely across our internal monorepo. Our python code style is currently defined as such:    ```  Python code style at Twitter closely follows PEP-8 and PEP-257 with the following modifications:    - Indent using two spaces (instead of four).  - Break lines at 100 characters or less.  ```    we have on the order of many millions of lines of code that currently adopt this style and generally feel like it's a net improvement over 4 space indent (nested blocks can fit more code per line, etc etc). [pants](https://github.com/pantsbuild/pants) and [pex](https://github.com/pantsbuild/pex) are good concrete examples of projects that started at Twitter and were later open sourced with a continuation of this python code style.    I realize `black` is intended to be opinionated and have little to no config - but to me, line length and indent level both seem like a fairly fundamental configurable for most shops, so I'd put this in a very similar category as the existing `--line-length` option:    ```  -l, --line-length INTEGER   Where to wrap around.  [default: 88]  ```    with that said, how would folks feel about adding a new `--indent-level={2|4}` flag to `black` to permit easier interop for code bases that take this fundamental stance? I would be happy to cut a PR that implements this as long as there's consensus that this would be reasonable.;kwlzn;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.6.2018 23:46;null;17.8.2018 13:20;open;[comments, enhancement];12;379;Reflows of inline comments can cause misalignment;https://api.github.com/repos/ambv/black/issues/379;https://github.com/ambv/black/issues/379;"Operating system: macOS  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master: yes    _edit_: moved original first example to end because it's reasonable behavior    With this (example 2), black moves everything down one so it is aligned incorrectly:    ```python  # original  revert(""!"" +         one(2) +         # extension         three(4) +       # length         one(flapping) +  # flapping info present         two(duration) +  # duration         two(0))  ```    becomes:    ```python  revert(      ""!""      + one(2)      + three(4)  # extension      + one(flapping)  # length      + two(duration)  # flapping info present      + two(0)  # duration  )  ```    example 1 (reasonable behavior, original text preserved):      ```python  # original  a = [1,       2, # very important       3, # also important       4, # less important, but still worth reading       5] # this is just for the line length  ```    Black moves the last comment to a weird place, while handling most other lines correctly:    ```python  # formatted  a = [      1,      2,  # very important      3,  # also important      4,  # less important, but still worth reading      5,  ]  # this is just for the line length  ```  ";quodlibetor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.6.2018 11:05;27.6.2018 11:54;27.6.2018 11:54;closed;[documentation, enhancement];3;380;Does black provide module usage?;https://api.github.com/repos/ambv/black/issues/380;https://github.com/ambv/black/issues/380;*this issue is a feature request*    Provide black as a python model just like [yapf - Example as a module](https://github.com/google/yapf#example-as-a-module). I didn't find something related in document and github issues page. If someone has already posted it then you can close this issue.;ocavue;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.6.2018 17:52;17.8.2018 13:22;17.8.2018 13:22;closed;[comments, duplicate, enhancement];3;381;Reflows of multiline blocks that have only one value don't include a comma;https://api.github.com/repos/ambv/black/issues/381;https://github.com/ambv/black/issues/381;"Operating system:  Python version: any  *Black* version: 18.6b4  Does also happen on master: yes    ```python  # formatted  var = [      # A Thing that is very important oooooooooooooooooooo aaaaaaaaaaaaaaaaaaaa      ""VALUE""  ]  ```    I would expect that to insert a comma after `""VALUE""` for consistency with the expected output if there are multiple values, for example:    ```python  # example 2 formatted  var = [      # A Thing that is very important oooooooooooooooooooo aaaaaaaaaaaaaaaaaaaa      ""VALUE"",      ""OTHER"",  ]  ```";quodlibetor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.6.2018 0:19;9.7.2018 22:42;9.7.2018 22:43;closed;[];2;382;pre-commit: use exclusion instead of ever-growing regex;https://api.github.com/repos/ambv/black/issues/382;https://github.com/ambv/black/pull/382;;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.6.2018 17:20;28.6.2018 17:38;28.6.2018 17:38;closed;[];1;383;Incorrect reformatting when using type comments;https://api.github.com/repos/ambv/black/issues/383;https://github.com/ambv/black/issues/383;Operating system: Linux  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master: yes    This function:  ```python  def foo(          x,  # type: str  ):      pass  ```    is formatted as:  ```python  def foo(x, ):  # type: str      return x  ```      ;ybastide;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.6.2018 16:35;29.6.2018 16:53;29.6.2018 16:53;closed;[];1;384;Unnecessary empty liens around functions inside an if statement;https://api.github.com/repos/ambv/black/issues/384;https://github.com/ambv/black/issues/384;Operating system: OSX 10.13.5  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    When formatting this code:  ```  if x:      def y():          pass  else:      def z():          pass  ```    `black` adds some unnecessary empty lines in around then functions:    ```  if x:        def y():          pass      else:        def z():          pass  ```  ;expobrain;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.6.2018 16:37;22.7.2018 16:30;22.7.2018 16:30;closed;[bug];2;385;`# fmt: off` directly before `yield` only affects the `yield`;https://api.github.com/repos/ambv/black/issues/385;https://github.com/ambv/black/issues/385;"this is on current master:    ```python  # fmt: off  yield    ""hello""  yield    ""world""  # fmt: on  ```  formats to:  ```python  # fmt: off  yield    ""hello""  yield ""world""  # fmt: on  ```    The bug seems to be avoided by putting any (afaict) statement after the `# fmt: off` declaration, like:  ```python  # fmt: off  ...  yield    ""hello""  yield    ""world""  # fmt: on  ```";matejcik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.6.2018 22:33;2.7.2018 11:00;2.7.2018 22:35;closed;[];2;386;Inline pylint comment tags don't move how they should;https://api.github.com/repos/ambv/black/issues/386;https://github.com/ambv/black/issues/386;"Operating system: Ubuntu 18.04 LTS  Python version: Python 3.6.4 :: Anaconda, Inc.  *Black* version: black, version 18.6b4  Does also happen on master: yes    -------    Problem: On long lines that get reformatted, inline comments used to tell pylint to ignore certain rules simply get moved to the end of the reformatted code. This is not  necessarily the new appropriate place for the comment.    E.g.:    ```python  exec('print(""printexectest that exceeds line limit aaaaaaaaaaa."")')  # pylint: disable=exec-used  ```  currently reformats to  ```python  exec(      'print(""printexectest that exceeds line limit aaaaaaaaaaa."")'  )  # pylint: disable=exec-used  ```    This no longer satisfies pylint. That comment should be on the first line, with the `exec`. Thankfully the comment can be manually moved and black allows that, allowing the code to then satisfy pylint.    I don't see an easy way to fix this unfortunately, since I think that would necessitate knowing pylint's rules to make choices. That's perhaps possible, but increases the scope of black a lot. Nonetheless, it is a hurdle for adoption of larger projects. Perhaps there's another solution I don't see.";nixjdm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.6.2018 22:34;2.7.2018 11:08;2.7.2018 11:08;closed;[];1;387;black problems with vim;https://api.github.com/repos/ambv/black/issues/387;https://github.com/ambv/black/issues/387;"Operating system: Ubuntu 18.04  Python version:  Python 3.6.5  *Black* version: 18.6b4    Black itself runs fine from the cli.    But when I try to edit in vim I get the following.     processing /home/cavanaug/.vim/plugged/black/plugin/black.vim:  line  120:    File ""<string>"", line 17      return venv_path / 'lib' / f'python{pyver[0]}.{pyver[1]}' / 'site-packages'                                                              ^  SyntaxError: invalid syntax  Error in sys.excepthook:  Traceback (most recent call last):    File ""/usr/lib/python3/dist-packages/apport_python_hook.py"", line 63, in apport_excepthook      from apport.fileutils import likely_packaged, get_recent_crashes    File ""/usr/lib/python3/dist-packages/apport/__init__.py"", line 5, in <module>      from apport.report import Report    File ""/usr/lib/python3/dist-packages/apport/report.py"", line 30, in <module>      import apport.fileutils    File ""/usr/lib/python3/dist-packages/apport/fileutils.py"", line 23, in <module>      from apport.packaging_impl import impl as packaging    File ""/usr/lib/python3/dist-packages/apport/packaging_impl.py"", line 24, in <module>      import apt    File ""/usr/lib/python3/dist-packages/apt/__init__.py"", line 23, in <module>      import apt_pkg  ImportError: No module named 'apt_pkg'  Original exception was:    File ""<string>"", line 17      return venv_path / 'lib' / f'python{pyver[0]}.{pyver[1]}' / 'site-packages'                                                              ^  SyntaxError: invalid syntax      The detailed vim version is below    ?? vim --version  VIM - Vi IMproved 8.0 (2016 Sep 12, compiled May  1 2018 14:15:39)  Included patches: 1-1783  Modified by pkg-vim-maintainers@lists.alioth.debian.org  Compiled by pkg-vim-maintainers@lists.alioth.debian.org  Huge version without GUI.  Features included (+) or not (-):  +acl               +farsi             +mouse_sgr         -tag_any_white  +arabic            +file_in_path      -mouse_sysmouse    -tcl  +autocmd           +find_in_path      +mouse_urxvt       +termguicolors  -autoservername    +float             +mouse_xterm       +terminal  -balloon_eval      +folding           +multi_byte        +terminfo  +balloon_eval_term -footer            +multi_lang        +termresponse  -browse            +fork()            -mzscheme          +textobjects  ++builtin_terms    +gettext           +netbeans_intg     +timers  +byte_offset       -hangul_input      +num64             +title  +channel           +iconv             +packages          -toolbar  +cindent           +insert_expand     +path_extra        +user_commands  -clientserver      +job               -perl              +vertsplit  -clipboard         +jumplist          +persistent_undo   +virtualedit  +cmdline_compl     +keymap            +postscript        +visual  +cmdline_hist      +lambda            +printer           +visualextra  +cmdline_info      +langmap           +profile           +viminfo  +comments          +libcall           -python            +vreplace  +conceal           +linebreak         +python3           +wildignore  +cryptv            +lispindent        +quickfix          +wildmenu  +cscope            +listcmds          +reltime           +windows  +cursorbind        +localmap          +rightleft         +writebackup  +cursorshape       -lua               -ruby              -X11  +dialog_con        +menu              +scrollbind        -xfontset  +diff              +mksession         +signs             -xim  +digraphs          +modify_fname      +smartindent       -xpm  -dnd               +mouse             +startuptime       -xsmp  -ebcdic            -mouseshape        +statusline        -xterm_clipboard  +emacs_tags        +mouse_dec         -sun_workshop      -xterm_save  +eval              +mouse_gpm         +syntax              +ex_extra          -mouse_jsbterm     +tag_binary          +extra_search      +mouse_netterm     +tag_old_static         system vimrc file: ""$VIM/vimrc""       user vimrc file: ""$HOME/.vimrc""   2nd user vimrc file: ""~/.vim/vimrc""        user exrc file: ""$HOME/.exrc""         defaults file: ""$VIMRUNTIME/defaults.vim""    fall-back for $VIM: ""/usr/share/vim""  Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -Wdate-time  -g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1         Linking: gcc   -Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl     -L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu -lpython3.5m -lpthread -ldl -lutil -lm            Any thoughts??   ";cavanaug;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.6.2018 14:48;30.6.2018 20:54;30.6.2018 20:54;closed;[];1;388;platform lacks a functioning sem_open implementation;https://api.github.com/repos/ambv/black/issues/388;https://github.com/ambv/black/issues/388;Hi!    Cannot seem to run Black. Something about lack of SemLock implementation.    Included the tb I get when running;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.7.2018 12:18;2.7.2018 18:50;2.7.2018 18:50;closed;[bug];1;389;Fails when importing __future__ as renaming it;https://api.github.com/repos/ambv/black/issues/389;https://github.com/ambv/black/issues/389;Operating system: Darwin horta-ml 17.6.0 Darwin Kernel Version 17.6.0  Python version: Python 3.6.6 :: Anaconda custom (64-bit)  *Black* version: 18.6b4  Does also happen on master: yes    This works:  ```python  # test1.py  from __future__ import absolute_import  ```    This does not work:  ```python  # test2.py  from __future__ import absolute_import as _absolute_import  ```    Output:    > error: cannot format test2.py:  > All done! ? ? ?  > 1 file failed to reformat.;horta;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.7.2018 14:15;1.7.2018 16:04;1.7.2018 16:04;closed;[];1;390;Two minor bugs in formatting multiline additions/subtractions;https://api.github.com/repos/ambv/black/issues/390;https://github.com/ambv/black/issues/390;Operating system: macOS 10.13.4  Python version: Python 3.6.4  *Black* version: 18.6b4  Does also happen on master: yes (all tests green)    Both bugs are very trivial, easy to fix by hand, but just so it is known and out there.    ### Bug 1    Code like this    ```python  foo = (      + 100      + 200      + 300  )  ```    results in code like this    ```python  foo = +100 + 200 + 300  ```    Notice the extra `+` sign before `100`.    ### Bug 2    Code like this    ```python  foo = (      - 10000000000000000000000000000000      - 20000000000000000000000000000000      + 30000000000000000000000000000000  )  ```    results in code like this    ```python  foo = (      -10000000000000000000000000000000      - 20000000000000000000000000000000      + 30000000000000000000000000000000  )    ```    Notice the missing space before `10000000000000000000000000000000`.      ;zupo;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.7.2018 6:33;2.7.2018 11:15;2.7.2018 11:18;closed;[];2;391;Line break on list index in long assignment statement;https://api.github.com/repos/ambv/black/issues/391;https://github.com/ambv/black/issues/391;"Python version: 3.6.5  Black version: 18.6b4  Does also happen on master: yes    When a list index operation happens on right side of an assignment statement that is over the character limit, black line breaks on the index operation, which IMO is awkward to read.    Before black:  ```python  some_list = [""foo""]  this_is_a_really_long_variable_name_just_to_illustrate_the_boundary_condition = some_list[0]  ```    After black:  ```python  some_list = [""foo""]  this_is_a_really_long_variable_name_just_to_illustrate_the_boundary_condition = some_list[      0  ]  ```    My personal preference (which is obviously just a preference):  ```python  some_list = [""foo""]  this_is_a_really_long_variable_name_just_to_illustrate_the_boundary_condition = \      some_list[0]  ```    If this is intended behavior, is there a PEP-related reason not to use `\` in this case, or is it style choice?";dgouldin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.7.2018 11:17;null;10.10.2018 19:00;open;[documentation, good first issue, help wanted];2;392;Explain why black avoids using `\` for code organization;https://api.github.com/repos/ambv/black/issues/392;https://github.com/ambv/black/issues/392;The README should have a clear, concise explanation for why black avoids using `\`.    [Here](https://github.com/ambv/black/issues/64#issuecomment-375429106)'s a lengthy reasoning :eyes: ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.7.2018 17:14;2.7.2018 18:05;2.7.2018 18:13;closed;[];2;393;TravisCI: Test on production Python 3.7 and 3.8-dev;https://api.github.com/repos/ambv/black/issues/393;https://github.com/ambv/black/pull/393;;cclauss;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.7.2018 21:36;2.7.2018 23:30;23.8.2018 23:47;closed;[];4;394;Unable to use black inside of vim: Ubuntu 14, python 3.6, vim version 8.1.133;https://api.github.com/repos/ambv/black/issues/394;https://github.com/ambv/black/issues/394;"Operating system:    > No LSB modules are available.  > Distributor ID: Ubuntu  > Description:    Ubuntu 14.04.5 LTS  > Release:        14.04  > Codename:       trusty    Python version:    > Python 3.6.3    *Black* version:    > black, version 18.6b4    Does also happen on master: [yes]    The command `black` runs from the terminal.    I have installed the vim plugin using Vundle.    When I launch vim I get the following:    ```  Error detected while processing [snip]/vim-config/dotvim/bundle/black/plugin/black.vim:  line  120:    File ""<string>"", line 17      return venv_path / 'lib' / f'python{pyver[0]}.{pyver[1]}' / 'site-packages'                                                              ^  SyntaxError: invalid syntax  ```    Here is my vim information:    > version 8.1.133  > +python3    [I followed the steps below to see if it would make a difference.]  To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version)";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.7.2018 18:25;9.7.2018 22:41;9.7.2018 22:41;closed;[];5;395;Pre-commit-hook ignores exclude patterns;https://api.github.com/repos/ambv/black/issues/395;https://github.com/ambv/black/issues/395;My team wants to try `black` as a pre-commit hook on a provisional basis, so we run it only on files in one directory of the project as we develop a new feature.    While configuring this, I discovered that `black` [seems to ignore inclusion/exclusion rules completely if it's given a path to a file not a folder](https://github.com/ambv/black/blob/master/black.py#L323). Since the input to a pre-commit hook is a list of modified/created filepaths, all or our lovely inclusion/exclusion rules get ignored completely and that makes us sad :(    I'm not familiar enough with the code to have a good gauge of this, but how much work do you think it would be to add support for this?    Thanks for the cool tool!!  P.S.  Personally, I'd take the leap and format the whole repo, but I'm not alone in this world ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.7.2018 4:25;7.7.2018 12:35;7.7.2018 12:35;closed;[bug];3;396;something error on Python3.7 and Vim8.1;https://api.github.com/repos/ambv/black/issues/396;https://github.com/ambv/black/issues/396;I am using vim installed by homebrew on macos. When i upgrade the Python to version 3.7, The vim show some error message on startup. The error message as following    Error detected while processing /Users/alex/.vim/bundle/black/plugin/black.vim:  line  120:  /must>not&exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.7.2018 23:26;7.7.2018 12:46;7.7.2018 12:46;closed;[];3;397;Multiline string formatting. It this intended behavior?;https://api.github.com/repos/ambv/black/issues/397;https://github.com/ambv/black/issues/397;"I was surprised to see Black change this:    ```  a = ""&SortByValue=priority&SortByOrder=asc"" \      ""&IndexToStartPaging={3}"" \      ""&NumberOfElementsToShow={2}"" \      ""&CacheDurationMinutes=0"" \      ""&AllowAlternativeResults=false""  ```    to this:    `a = ""&SortByValue=priority&SortByOrder=asc"" ""&IndexToStartPaging={3}"" ""&NumberOfElementsToShow={2}"" ""&CacheDurationMinutes=0"" ""&AllowAlternativeResults=false""  `  I could understand joining it one string. Both are valid but second one looks weird to me. Is this intended? The output also breaks line length rule.";testvinder;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.7.2018 16:21;9.7.2018 22:37;9.7.2018 22:37;closed;[];1;398;Vim Complains About imp module deprecation...;https://api.github.com/repos/ambv/black/issues/398;https://github.com/ambv/black/issues/398;On OSX (10.13.5), using VIM (2018 May 18, compiled Jul  5 2018 06:52:49), compiled with Python 3.7, I'm seeing the following error on VIM startup:    Error detected while processing /Users/mjl/.vim/plugged/black/plugin/black.vim:  line  120:  /must>not&exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.7.2018 2:29;26.9.2018 21:21;26.9.2018 22:15;closed;[design, good first issue];6;399;Remove newlines at the beginning of files?;https://api.github.com/repos/ambv/black/issues/399;https://github.com/ambv/black/issues/399;"pet peeve of mine, I think it's in ""the spirit of black"" so here's the proposal:    (I went to write an example in markdown, but it turns out github refuses to show a blank line at the top of a code block, I think this is a sign -- I tricked it with a space, ignore the space)    ### input    ```python     print(""ignore the space on the blank line"")  ```    ### output    ```python  print(""ignore the space on the blank line"")  ```      (other examples involve blank lines before imports / docstrings / etc.)";asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.7.2018 13:18;17.8.2018 13:26;17.8.2018 13:26;closed;[bug, duplicate, unstable formatting];10;400;Formatting error;https://api.github.com/repos/ambv/black/issues/400;https://github.com/ambv/black/issues/400;Operating system: MacOS  Python version: Python 3.6.5  *Black* version: 18.6b4  Does also happen on master: Yes    Python file contents:    ```python3  class Foo():      def save(self):          for x in y:              for aaaaaaaaaaaaa, bbbbbbbbbbbbbbb, ccccccccccc, dddddddddddddd, eeee in self.ffffffffffffff['xxxxxxxxxxxxx']:                  pass  ```    `pyproject.toml` contents:    ```toml  [tool.black]  line-length = 100  py36 = true  exclude = '''  /(    # Defaults      \.git    | \.hg    | \.mypy_cache    | \.tox    | \.venv    | _build    | buck-out    | build    | dist      # Futurepump    | node_modules    | bower_components  )/  '''  ```    Command:    ```  # Assuming loading settings from pyproject.toml  black test.py  ```    Result:    ```  error: cannot format test.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /var/folders/w5/jmchwlbx6sdgtbb6bgxhj23m0000gp/T/blk_b8ei2xz0.log  All done! ? ? ?  1 file failed to reformat.  ```;adamcharnock;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.7.2018 14:31;10.7.2018 22:00;10.7.2018 22:00;closed;[];1;401;Ability to force 0 exit code;https://api.github.com/repos/ambv/black/issues/401;https://github.com/ambv/black/issues/401;I primarily use black via the pre-commit hook. However, there is a bit of a gotcha in that the commit will be rejected if black has to actually make any changes.    My workflow normally looks something like this:    1. Make some code changes  2. Write commit message, commit  3. Black runs via pre-commit hook, updates formatting, and exits with non-zero status code. Commit is rejected  4. *If I notice the commit is rejected* (and I often don't), then repeat the commit again  5. This time it passes because black doesn't need to do anything  6. Finish    This seems convoluted to me. I would really like to be able to either:    1. Tell black to exit `0` even if it has to make changes (ideal)  2. Tell `pre-commit` to ignore errors (non-ideal, because if black actually explodes I *do* want to know about it)    Philosophically-speaking (and feel free to ignore this point), it could be argued that if black successfully modifies the formatting of the various files, that this is in fact a success rather than an error. But that may simply depend on what one thinks the purpose of the tool is in the first place.    Of course, this may already exist and I simply missed it. I couldn't see it in `black --help` though...    Operating system: macOS  Python version: 3.6.5  *Black* version: stable  ;adamcharnock;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.7.2018 6:57;null;19.7.2018 10:09;open;[enhancement];2;402;pre-commit hook does not work for .pyi files;https://api.github.com/repos/ambv/black/issues/402;https://github.com/ambv/black/issues/402;Because of this issue https://github.com/chriskuehl/identify/issues/51    For now I can solve this by overriding `files` and `types` in `.pre-commit-config.yaml`:    ```yaml  repos:    - repo: https://github.com/ambv/black      rev: 18.6b4      hooks:        - id: black          language_version: python3.6          files: \.pyi?$          types: []  ```    I would recommend that `black` use `files` instead of `types` until this issue is resolved in `identify` and `pre-commit`.    Operating system: osx  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master: yep  ;chadrik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.7.2018 9:20;13.7.2018 14:55;13.7.2018 16:32;closed;[];5;403;Slicing seems inconsistent between variables and attributes;https://api.github.com/repos/ambv/black/issues/403;https://github.com/ambv/black/issues/403;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system:  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: yes    There seems to be a difference in formatting between attributes and regular variables. For example, `a[foo:]` is left unchanged, but `a[foo.bar:]` becomes `a[foo.bar :]`, which seems inconsistent.;alok;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.7.2018 19:15;null;5.9.2018 2:45;open;[design];6;404;Not exploding long arguments list makes diffs unnecessarily long;https://api.github.com/repos/ambv/black/issues/404;https://github.com/ambv/black/issues/404;"We recently switched to using black and overall it has been great but one style decision is making code reviews much harder for our team and seems to complicate reasoning about the style.    If i have:  ```  my_func(long_kw_argument=""some_reasonably_long_string"", short_kw=""short_kw_1"")  ```    I add `short_kw2=5` I get:  ```  my_func(      long_kw_argument=""some_reasonably_long_string"", short_kw=""short_kw_1"", short_kw2=5  )  ```    with diff:  ```  -my_func(long_kw_argument=""some_reasonably_long_string"", short_kw=""short_kw_1"")  +my_func(  +    long_kw_argument=""some_reasonably_long_string"", short_kw=""short_kw_1"", short_kw2=5  +)  ```    then I add `new_arg=1` and I get:  ```  my_func(      long_kw_argument=""some_reasonably_long_string"",      short_kw=""short_kw_1"",      short_kw2=5,      new_arg=1,  )  ```    and this simple change of adding a single argument makes the diff of:    ```  @@ -3,5 +3,8 @@ def my_func(**kwargs):         my_func(  -    long_kw_argument=""some_reasonably_long_string"", short_kw=""short_kw_1"", short_kw2=5  +    long_kw_argument=""some_reasonably_long_string"",  +    short_kw=""short_kw_1"",  +    short_kw2=5,  +    new_arg=1,   )  ```    This special case means that there are now two different times that you have to deal with the bigger diff which means it comes up a lot more often than it needs to.    One of the stated goals of Black is:  > Black makes code review faster by producing the smallest diffs possible.    but this seems like a case where this is not true and is instead optimizing for a few newlines which I believe is much less important that diff readability.    It also feels like this is an unnecessary special case that only complicates understanding of the style and it would be cleaner to just say ""black will put it on one line if it fits, if it doesn't its 1 per line with trailing commas"" instead of ""black will put it on 1 line if it fits, if the arguments alone fit on 1 line when they are indented then it will do that otherwise it will put 1 per line and will only put trailing commas if it spreads it 1 per line not if it puts it on a newline and indents it (plus your explanation for why here)"".  This would remove the need for you to explain things like https://github.com/ambv/black/issues/346#issuecomment-397045920 for example.";nickdavies;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.7.2018 12:59;14.7.2018 13:23;14.7.2018 13:23;closed;[];1;405;Long assignment statements are broken badly;https://api.github.com/repos/ambv/black/issues/405;https://github.com/ambv/black/issues/405;It is quite common in mathematical relations that an assignment statement is quite long as in the example given below. The default behavior reduces the readability by breaking at an unintuitive place.    Operating system: Ubuntu 18.04  Python version: 3.6.4  *Black* version: 18.6b4  Does also happen on master: Yes    Python File Contents  ```python  ecef_x = surface_radius * np.cos(geolat) * np.cos(lng) + alt * np.cost(lat) * np.cos(lng)  ```    Command  ```  black test.py  ```    Output  ```  ecef_x = surface_radius * np.cos(geolat) * np.cos(lng) + alt * np.cost(lat) * np.cos(      lng  )  ```    A better formatting would have been,  ```  ecef_x = (      surface_radius * np.cos(geolat) * np.cos(lng)       + alt * np.cost(lat) * np.cos(lng)  )  ```    ;krnekhelesh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.7.2018 21:33;16.7.2018 8:25;16.7.2018 8:25;closed;[];4;406;Removing u from the string prefix causes tests to fail;https://api.github.com/repos/ambv/black/issues/406;https://github.com/ambv/black/issues/406;"Hi,    I just converted my small project to use Black, without much problems. Thanks for making this possible ?    However there is on thing I don't know how to deal with, related to this behavior:    > Black also standardizes string prefixes, making them always lowercase. On top of that, if your code is already Python 3.6+ only or it's using the unicode_literals future import, Black will remove u from the string prefix as it is meaningless in those scenarios.    My project targets Python 2.7 and 3.4-3.7 and tox runs on travis on this environments.  Since black requires Py 3.6 I run it with that interpreter.    Previous code (tests pass on all Python versions):    ```py  # -*- coding: utf-8 -*-  ...  def testEncoding(self):      """"""Handle special characters.""""""      app = self.app      uniData = u""This is a file with special characters:\n"" \          + u""Umlaute(äöüß)\n"" \          + u""Euro(\u20AC)\n"" \          + u""Male(\u2642)""        data = uniData.encode(""utf8"")  ```    Black converted like so (removing `u` prefix):    ```py  def testEncoding(self):      """"""Handle special characters.""""""      app = self.app      uniData = (          ""This is a file with special characters:\n""          + ""Umlaute(äöüß)\n""          + ""Euro(\u20AC)\n""          + ""Male(\u2642)""      )        data = uniData.encode(""utf8"")  ```    **This now fails on Python 2.7 only**:    ```  >       data = uniData.encode(""utf8"")  E       UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 48: ordinal not in range(128)  ```    In a Python 2 shell it can be reproduced:    ```  >>> u =  u""Umlaute(äöüß)\n""  >>> s =  ""Umlaute(äöüß)\n""  >>> u  u'Umlaute(\xe4\xf6\xfc\xdf)\n'  >>> u.encode(""utf8"")  'Umlaute(\xc3\xa4\xc3\xb6\xc3\xbc\xc3\x9f)\n'  >>> s  'Umlaute(\xc3\xa4\xc3\xb6\xc3\xbc\xc3\x9f)\n'  >>> s.encode(""utf8"")  Traceback (most recent call last):    File ""<stdin>"", line 1, in <module>  UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 8: ordinal not in range(128)  ```    I understand that `u""` is redundant on Python 3, but how do I tell Black to not assume that the file runs on Python 3 only? (I want to enforce double quotes, so `--skip-string-normalization` won't help)    I saw a longer discussion thread, where this option seemed to answer the request for leaving single quotes intact, but I am not sure if quote handling and 'u' prefix normalization should be coupled.    Adding `unicode_literals` everywhere might be an option, but I'd like avoid that if there is an easier way.    Maybe I simply misunderstood s.th. or using it wrong. Any advice?";3.10;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.7.2018 18:42;17.7.2018 22:52;17.7.2018 23:15;closed;[];4;407;os.path issues with Pathlib based paths in black;https://api.github.com/repos/ambv/black/issues/407;https://github.com/ambv/black/issues/407;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Linux  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.7.2018 9:54;18.7.2018 23:12;18.7.2018 23:12;closed;[];1;408;Tests fail with latest mypy;https://api.github.com/repos/ambv/black/issues/408;https://github.com/ambv/black/issues/408;As pointed out [here](https://github.com/ambv/black/issues/362#issuecomment-405486224), `test_black.py` has some type errors that only show up on the latest version of mypy.    ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.7.2018 11:00;18.7.2018 23:16;18.7.2018 23:16;closed;[];3;409;Freeze mypy version for CI (fixes #408);https://api.github.com/repos/ambv/black/issues/409;https://github.com/ambv/black/pull/409;This freezes the version of mypy in the `pip install` command in `.travis.yml` and `.appveyor.yml` to the one in `Pipfile.lock` (0.600).    A better solution would be to get CI to use `pipenv` to install its dependencies, but I ran into issues setting that up for Travis CI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.7.2018 2:04;26.9.2018 21:07;26.9.2018 21:07;closed;[];4;410;Deploy linux binary (#362);https://api.github.com/repos/ambv/black/issues/410;https://github.com/ambv/black/pull/410;This uses Travis CI to deploy a linux binary to the GitHub release, you can see an example here:  https://github.com/cxong/black/releases/tag/travis_deploy_test5    Tested the binary under Ubuntu (WSL):  ```  $ ./dist/black --version  black, version 18.6b4  ```    Note: the same API key can't be used. It must be generated using the `travis` CLI tool, instructions here: https://docs.travis-ci.com/user/deployment/releases/;cxong;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.7.2018 16:09;19.7.2018 16:58;19.7.2018 16:58;closed;[];4;411;pip show black results in UnicodeEncodeError;https://api.github.com/repos/ambv/black/issues/411;https://github.com/ambv/black/issues/411;"Running `pip show black` results in error. `black` is installed using the `pip install black`.    ```  $ pip install black  ...  ...  Installing collected packages: attrs, toml, appdirs, click, black  Successfully installed appdirs-1.4.3 attrs-18.1.0 black-18.6b4 click-6.7 toml-0.9.4  ```    #### `pip show` output  ```  Name: black  Version: 18.6b4  Summary: The uncompromising code formatter.  Home-page: https://github.com/ambv/black  Author-email: lukasz@langa.pl  License: MIT  Location: c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages  Requires: appdirs, toml, click, attrs  Required-by:  --- Logging error ---  Traceback (most recent call last):    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\logging\__init__.py"", line 995, in emit      stream.write(msg)    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_vendor\colorama\ansitowin32.py"", line 141, in write      self.write_and_convert(text)    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_vendor\colorama\ansitowin32.py"", line 169, in write_and_convert      self.write_plain_text(text, cursor, len(text))    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_vendor\colorama\ansitowin32.py"", line 174, in write_plain_text      self.wrapped.write(text[start:end])    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\encodings\cp1252.py"", line 19, in encode      return codecs.charmap_encode(input,self.errors,encoding_table)[0]  UnicodeEncodeError: 'charmap' codec can't encode character '\u0141' in position 8: character maps to <undefined>  Call stack:    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\runpy.py"", line 193, in _run_module_as_main      ""__main__"", mod_spec)    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\runpy.py"", line 85, in _run_code      exec(code, run_globals)    File ""C:\Users\sanbha\AppData\Local\Programs\Python\Python36\Scripts\pip.exe\__main__.py"", line 9, in <module>      sys.exit(main())    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_internal\__init__.py"", line 246, in main      return command.main(cmd_args)    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_internal\basecommand.py"", line 228, in main      status = self.run(options, args)    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_internal\commands\show.py"", line 43, in run      results, list_files=options.files, verbose=options.verbose):    File ""c:\users\sanbha\appdata\local\programs\python\python36\lib\site-packages\pip\_internal\commands\show.py"", line 141, in print_results      logger.info(""Author: %s"", dist.get('author', ''))  Message: 'Author: %s'  Arguments: ('\u0141ukasz Langa',)  ```  #### Environment  Operating system: Windows 10 Enterprise  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: No";sandeepbhat;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.7.2018 21:15;17.8.2018 15:44;31.10.2018 12:14;closed;[enhancement];7;412;Multiple context managers in a single `with` are not pretty;https://api.github.com/repos/ambv/black/issues/412;https://github.com/ambv/black/issues/412;"Some testing frameworks like `django-mock-querysets` make liberal use of multiple context managers to handle applying mock calls through monkey patching and using `__exit__` to unwind those monkey patches. `black` makes multiple context manager calls... difficult... to read & review.    Operating system: macOS  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master:    Examples:    ```diff  -    with patch('myapp.models.Jawn.objects', jawns), \  -         patch('myapp.models.Thing.objects', things):  +    with patch(""myapp.models.Jawn.objects"", jawns), patch(  +        ""myapp.models.Thing.objects"", things  +    ):  ```    Or even more ear bleeding:    ```diff  -    with patch(""myapp.models.Jawn.objects"", jawns), \  -         patch(""myapp.models.Thing.objects"", MockSet(a_thing)), \  -         patch(""accounting.models.Account.objects"", MockSet(chocula)):  +    with patch(""myapp.models.Jawn.objects"", jawns), patch(  +        ""myapp.models.Thing.objects"", MockSet(a_thing)  +    ), patch(""accounting.models.Account.objects"", MockSet(chocula)):  ```    Unfortunately `with` statements do not allow using parenthesis. There _is_ an equally ugly change that at least avoids weird hanging arguments, but requires code change and hides the purpose of the context manager and is Python 3.6+.    ```python  with contextlib.ExitStack() as patches:      patches.enter_context(patch(""myapp.models.Jawn.objects"", jawns))      patches.enter_context(patch(""myapp.models.Thing.objects"", things))  ```";erichurkman;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.7.2018 0:24;null;17.8.2018 16:06;open;[bug, parentheses];2;413;Merging two lines results in line being too long.;https://api.github.com/repos/ambv/black/issues/413;https://github.com/ambv/black/issues/413;"Hey,    with `black, version 18.6b4` I am getting two lines within dict merged resulting in line exceeding provided limit.    `black --py36 --line-length 80 file`    gives:    ```  @ settings.py:153 @ REST_FRAMEWORK = {      ""DEFAULT_PERMISSION_CLASSES"": (          'some stuff here'      ),  -    ""DEFAULT_PAGINATION_CLASS"":  -        ""rest_framework.pagination.LimitOffsetPagination"",  +    ""DEFAULT_PAGINATION_CLASS"": ""rest_framework.pagination.LimitOffsetPagination"",      ""PAGE_SIZE"": some_value_here,      ""DEFAULT_FILTER_BACKENDS"": (          ""django_filters.rest_framework.DjangoFilterBackend"",  ```    Line in question is 82 characters long.    Is that a bug or intended behaviour for dicts?";katsika;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.7.2018 21:22;null;20.8.2018 15:50;open;[enhancement, help wanted];3;414;Vim plugin should respect pyproject.toml config;https://api.github.com/repos/ambv/black/issues/414;https://github.com/ambv/black/issues/414;vim-black does not respect configuration in pyproject.toml  Python version: 3.6  *Black* version: 18.3-alpha.0    pyproject.toml:  ```  [tool.black]  line-length = 120  skip-string-normalization = true  ```    From vim `:Black` will format the file using the default configuration or the global config in vimrc such as `let g:black_skip_string_normalization = 1`  It would be great if the vim plugin could use the project specific configuration;Curly-Mo;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.7.2018 23:11;17.8.2018 17:45;17.8.2018 17:45;closed;[];2;415;vim plugin hijacks the comma, and for all filetypes too;https://api.github.com/repos/ambv/black/issues/415;https://github.com/ambv/black/issues/415; version 18.6b4, also true on master.    `black.vim` [contains](https://github.com/ambv/black/blob/e94a41f92a568706700522aaad48ebd137fe1d8b/plugin/black.vim#L126-L127):    ```  nmap ,= :Black<CR>  vmap ,= :Black<CR>  ```    But there are problems with this:    * First, this hijacks the comma - which is a standard vim command, that some of us find useful.  It's not OK for for plugins to do this!  * Second, this mapping applies to all files - so even when I'm not doing anything python-related at all, `black.vim` has hijacked my comma    I'd suggest a couple of options:    * My preference: simply don't provide a mapping at all.  Users can perfectly well set up their own mapping for `:Black` according to what works for them.    * Suggest a mapping in the README, if you like    * If you think it's important to provide a mapping out of the box, then my understanding of the conventions (though I'm not completely sure of this) is that:    * `black.vim` should be filetype-specific - that is, you should move it to `ftplugin/python.vim`    * the mapping that you provide should be scoped to the current `<buffer>`    * the mapping should begin with `<localleader>`    That way your mapping will only affect python files, and not clash with any standard mappings.;dimbleby;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.7.2018 23:25;null;25.9.2018 23:38;open;[];8;416;The vim plugin is for the python filetype;https://api.github.com/repos/ambv/black/issues/416;https://github.com/ambv/black/pull/416;Per comment in #415 - only load the vim plugin for python files.    I hope this bit is uncontroversial.  I intend to follow up with a pull request that removes the mappings, which may want more discussion.;dimbleby;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.7.2018 23:31;17.8.2018 17:45;17.8.2018 17:57;closed;[];2;417;Remove mappings from Vim plugin.;https://api.github.com/repos/ambv/black/issues/417;https://github.com/ambv/black/pull/417;They clashed with standard mappings.  Simplest just to let users define  their own.;dimbleby;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.7.2018 12:03;17.8.2018 17:44;17.8.2018 17:45;closed;[];2;418;added instructions for PyCharm File Watcher setup;https://api.github.com/repos/ambv/black/issues/418;https://github.com/ambv/black/pull/418;With these steps, PyCharm will run black on every file save.    Not suuuper happy with the amount of indentation, but it's the best I could come up with without adding a new section.;beniwohli;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.7.2018 21:20;null;26.9.2018 19:40;open;[bug, invalid code, trailing comma];7;419;Black inserts trailing comma after **kwargs in non-3.6 file;https://api.github.com/repos/ambv/black/issues/419;https://github.com/ambv/black/issues/419;Operating system: macOS 10.13.6  Python version: 3.6.3  *Black* version: 18.6b4  Does also happen on master: yes    I'm using `black --line-length=101 --safe -v` to format a file that contains a snippet like below:    ```  # No f strings or trailing commas after *, *args, or **kwarg parameters elsewhere in the file  class MyClass(BaseClass):      def __init__(          self,          x,          *args,         # Below line is changed by black: trailing comma added          **kwargs      ):          try:              super().__init__(                  x=x                  *args,                  # ...But only if the next line also has a trialing comma                  **kwargs,              )          except Exception as e:              raise  ```    Black is always adding a trailing comma after the `**kwargs` in the `def __init__` (below the first comment).  This happens even on master and even after clearing black's cache.    A workaround is removing the trailing comma from the `**kwargs` in the `super().__init__` call (below the second comment), even though this comma is legal in Py3.5:    ```  $ python3.5  >>> class Base:  ...     def __init__(self, *a, **ka):  ...             self.a = a  ...             self.ka = ka  ...  >>> class Child(Base):  ...     def __init__(self, *a, **ka):  ...             super().__init__(  ...                     *a,  ...                     **ka,  ...             )  ...  >>> c = Child(1, 2, a=3, b=4)  >>> c  <__main__.Child object at 0x10a44e2b0>  >>> c.a  (1, 2)  >>> c.ka  {'b': 4, 'a': 3}  ```;dgingrich;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.7.2018 23:34;null;20.9.2018 23:27;open;[];9;420;pre-commit sample configuration should not suggest `rev: stable`;https://api.github.com/repos/ambv/black/issues/420;https://github.com/ambv/black/issues/420;? hello, pre-commit maintainer here :)    The [sample configuration currently suggests `rev: stable`](https://github.com/ambv/black#version-control-integration) for `black`'s repository setup.  A mutable ref [poses some problems](https://pre-commit.com/#using-the-latest-version-for-a-repository).  Notably it gives the illusion that the latest version is being used but in reality it uses the version _at install time_.    This setup isn't suitable for those looking for a repeatable and reproducible linting experience.     The suggestion that we use for our official repositories is to either [list the version explicitly in the docs](https://github.com/pre-commit/pre-commit-hooks#using-pre-commit-hooks-with-pre-commit) (though this adds tedium to the release cycle) or to use [some suitable non-value](https://github.com/pre-commit/mirrors-mypy#using-mypy-with-pre-commit) with instructions on how to substitute an appropriate value.    Yet another option would be to suggest `pre-commit autoupdate` after writing such a configuration as this will _usually_ convert the mutable rev to an immutable tag (or sha if `--bleeding-edge` is passed).;asottile;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.7.2018 10:12;24.7.2018 13:31;24.7.2018 13:31;closed;[not a bug];2;421;OSError: [Errno 38] Function not implemented;https://api.github.com/repos/ambv/black/issues/421;https://github.com/ambv/black/issues/421;"### system    Operating system: Amazon Linux  Python version: 3.6  *Black* version: black==18.6b3  Does also happen on master: yes    ### description    Hey there,    is there a way to disable multiprocessing? I am running black on a system that doesn't support multiprocessing (as it doesn't support process synchronization). More specifically I am running this on AWS lambda. Ref https://github.com/LambdaLint/black/issues/5    I do like the default, but it would be great to define your own process pool size to optimize performance or in my case disable it completely.    Of course the problem is here:  https://github.com/ambv/black/blob/e94a41f92a568706700522aaad48ebd137fe1d8b/black.py#L342    ### solution proposal    I would be willing to provide a patch if you agree that this should be fixed. My proposal would be to add a `--job/-j` argument, that defaults to `os.cpu_count()`. If set to 1 it would not use a process pool but run sequentially. That would solve the issue for all virtual or embedded systems that don't provide processes synchronization.    ### stack trace    ```  Traceback (most recent call last):    File ""/var/lang/lib/python3.6/runpy.py"", line 193, in _run_module_as_main      ""__main__"", mod_spec)    File ""/var/lang/lib/python3.6/runpy.py"", line 85, in _run_code      exec(code, run_globals)    File ""/var/task/black.py"", line 3511, in <module>      main()    File ""/var/task/click/core.py"", line 722, in __call__      return self.main(*args, **kwargs)    File ""/var/task/click/core.py"", line 697, in main      rv = self.invoke(ctx)    File ""/var/task/click/core.py"", line 895, in invoke      return ctx.invoke(self.callback, **ctx.params)    File ""/var/task/click/core.py"", line 535, in invoke      return callback(*args, **kwargs)    File ""/var/task/click/decorators.py"", line 17, in new_func      return f(get_current_context(), *args, **kwargs)    File ""/var/task/black.py"", line 341, in main      executor = ProcessPoolExecutor(max_workers=os.cpu_count())    File ""/var/lang/lib/python3.6/concurrent/futures/process.py"", line 390, in __init__      EXTRA_QUEUED_CALLS)    File ""/var/lang/lib/python3.6/multiprocessing/context.py"", line 102, in Queue      return Queue(maxsize, ctx=self.get_context())    File ""/var/lang/lib/python3.6/multiprocessing/queues.py"", line 42, in __init__      self._rlock = ctx.Lock()    File ""/var/lang/lib/python3.6/multiprocessing/context.py"", line 67, in Lock      return Lock(ctx=self.get_context())    File ""/var/lang/lib/python3.6/multiprocessing/synchronize.py"", line 163, in __init__      SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)    File ""/var/lang/lib/python3.6/multiprocessing/synchronize.py"", line 60, in __init__      unlink_now)  OSError: [Errno 38] Function not implemented  ```  ";codingjoe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.7.2018 4:30;26.9.2018 21:23;26.9.2018 21:23;closed;[];1;422;Deploy windows binary (#362);https://api.github.com/repos/ambv/black/issues/422;https://github.com/ambv/black/pull/422;Built using appveyor and uploaded when releases are made. See example: https://github.com/cxong/black/releases/tag/appveyor_deploy_test5    Note: this uploads an .exe which might be blocked depending on your computer settings. Should it zip the exe instead?;cxong;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.7.2018 21:33;null;23.9.2018 14:20;open;[design, help wanted];8;423;Syntax errors reported on the wrong line due to multiple grammars tested;https://api.github.com/repos/ambv/black/issues/423;https://github.com/ambv/black/issues/423;"Operating system: Ubuntu 16.04  Python version: 3.7.0  *Black* version: 18.6b4  Does also happen on master: yes    For this minimal example, the syntax error is reported on the second line instead of the first:  ```python  print(f""spam"", ham=""eggs"")  pancakes = [,,]  ```  It happens with at least several other syntax errors too (eg `pancakes = [..]`, `pancakes =`).  It happens no matter how many valid statements are added before, after, or between the lines.  It only happens with the print function, and only when passing it a keyword argument.";noahstier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.7.2018 13:32;28.7.2018 14:07;28.7.2018 14:07;closed;[];1;424;Black breaks typing comments;https://api.github.com/repos/ambv/black/issues/424;https://github.com/ambv/black/issues/424;Operating system: OSX  Python version: 3.6  *Black* version: black, version 18.6b4  Does also happen on master: Yes    Black breaks type-hints in comments. My project is Python2.7 and Python3 compatible, with typing information in comments. When black reformats a function with multiple arguments, it combines type hint comments, which MyPy can no longer understand.    Here's an example:    ```  --- ftpfs.py 2018-07-28 11:15:16.171417 +0000  +++ ftpfs.py 2018-07-28 11:24:31.528996 +0000  @@ -697,13 +697,11 @@                       if not self.isempty(path):                           raise errors.DirectoryNotEmpty(path)                   raise  # pragma: no cover          def _scandir(  -        self,  -        path,  # type: Text  -        namespaces=None   # type: Optional[Container[Text]]  +        self, path, namespaces=None  # type: Text  # type: Optional[Container[Text]]       ):           # type: (...) -> Iterator[Info]           _path = self.validatepath(path)           with self._lock:               if self.supports_mlst:  ```    ;willmcgugan;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.7.2018 16:50;17.8.2018 18:03;17.8.2018 18:03;closed;[bug, documentation, question];6;425;Documented mechanism for calling black from Python code;https://api.github.com/repos/ambv/black/issues/425;https://github.com/ambv/black/issues/425;"I tried to write a unit test that uses ""black --check"" to confirm that the other code in the repository is black-approved.    I couldn't see an easy way to do this by importing `black` directly, so instead I used the `click.CliRunner` class to programatically execute it using CLI arguments. Here's [my implementation](https://github.com/simonw/sqlite-utils/blob/501618d0d519f808e54210f3c54420e5559a9343/tests/test_black.py) of that:    ```  import black  from click.testing import CliRunner  from pathlib import Path    code_root = Path(__file__).parent.parent      def test_black():      runner = CliRunner()      result = runner.invoke(          black.main,          [str(code_root / ""tests""), str(code_root / ""sqlite_utils""), ""--check""],      )      assert result.exit_code == 0, result.output  ```    This works! Or rather, it works under Python 3.6. Python 3.7 in Travis is giving me this [surprising result](https://travis-ci.com/simonw/sqlite-utils/jobs/136947772):    ```  __________________________________ test_black __________________________________      def test_black():          runner = CliRunner()          result = runner.invoke(              black.main,              [str(code_root / ""tests""), str(code_root / ""sqlite_utils""), ""--check""],          )  >       assert result.exit_code == 0, result.output  E       AssertionError:   E       assert -1 == 0  E        +  where -1 = <Result KeyError(<Task finished coro=<BaseEventLoop.run_in_executor() done, defined at /opt/python/3.7-dev/lib/python3.7/asyncio/base_events.py:653> result=False>)>.exit_code  ```    I'm still trying to figure out what went wrong there.    At any rate though: it would be really useful if there was an easy, documented mechanism for programatically invoking black.";simonw;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.7.2018 21:23;31.7.2018 15:38;31.7.2018 15:38;closed;[];1;426;module level multiline strings getting mangled into unreadability, forcing code changes;https://api.github.com/repos/ambv/black/issues/426;https://github.com/ambv/black/issues/426;"As a YAML library developer, I have quite a few module level multiline strings:    ```  data = yaml.load(""""""\  a: 1  b: 2  """""")  ```  Black transforms this into   ```  data = yaml.load(      """"""\  a: 1  b: 2  """"""  )  ```  I can live with the two extra lines, but one wants to have the triple-quotes aligned (as this is not the same string, I understand that this is not done automagically):    ```  data = yaml.load(      """"""\  a: 1  b: 2      """"""  )  ```    That is of course unacceptable from a readability point of view, so one would tend to align the mapping keys in the document as well:    ```  data = yaml.load(      """"""\      a: 1      b: 2      """"""  )  ```    now for _this_ YAML document that leads to the same data being loaded, but that is not always the case (e.g. not if the document starts with an explicit document marker).    I can provide some mechanism in the library for (auto-) dedenting of the input on calling load, but it seems to me that the transform of a multiline string to the next line **as if it doesn't fit**, is contrary to why one is using multiline strings in the first place: `""so you don't have to cope with long strings\nwith embedded newlines that don't fit\non any reasonably sized line width""`)    _Black should, for correct behavior, only consider the first line of a multi-line strings and check if that (with the preceding assignment and function call) on the line or not,_ whereas now it seems black takes the rather dumb approach of considering the whole of the multi-line string and then comes to the conclusion that it does **not** fit on a single line (which cannot really be a surprise), and so uglifies the code by pushing the starting triple quotes to the next line.    ---  There is a ""workable"" alternative, that doesn't get mangled by black:    ```  str_raw = """"""\  a: 1  b: 2  """"""  data = yaml.load(str_raw)  ```    but I rather not have to make code changes in all of the places I have module level strings are used to work around this issue.";AvdN;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.7.2018 11:40;3.8.2018 20:29;3.8.2018 20:31;closed;[];3;427;vim plugin needs user to run PluginInstall for every vim session;https://api.github.com/repos/ambv/black/issues/427;https://github.com/ambv/black/issues/427;Operating system: Linux/Ubuntu 18,04  Python version: 3.6  *Black* version: 18.6b4    ;sureshvv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.7.2018 12:34;31.7.2018 15:46;31.7.2018 15:52;closed;[];2;428;Black way of splitting tuples without parentesis in conditional expresions doesn't look good;https://api.github.com/repos/ambv/black/issues/428;https://github.com/ambv/black/issues/428;Operating system:  Python version: 2.7.12  *Black* version: 18.6b2  Does also happen on master: Not tested, but watching the commits it should    Original code:  ```python  def a(foo, bar):      return (foo.abcdef, foo.abcdef) if foo.abcdef == bar.abcdef else (foo.abcdef, foo.abcdef)    def b(foo, bar):      return (foo.abcdef, foo.abcdef) if foo.abcdef == bar.abcdef else foo.abcdef, foo.abcdef    def c(foo, bar):      return foo.abcdef, foo.abcdef if foo.abcdef == bar.abcdef else (foo.abcdef, foo.abcdef)    def d(foo, bar):      return foo.abcdef, foo.abcdef if foo.abcdef == bar.abcdef else foo.abcdef, foo.abcdef  ```    Formatted code:  ```python  def a(foo, bar):      return (          (foo.abcdef, foo.abcdef)          if foo.abcdef == bar.abcdef          else (foo.abcdef, foo.abcdef)      )      def b(foo, bar):      return (          (foo.abcdef, foo.abcdef) if foo.abcdef == bar.abcdef else foo.abcdef,          foo.abcdef,      )      def c(foo, bar):      return (          foo.abcdef,          foo.abcdef if foo.abcdef == bar.abcdef else (foo.abcdef, foo.abcdef),      )      def d(foo, bar):      return (          foo.abcdef,          foo.abcdef if foo.abcdef == bar.abcdef else foo.abcdef,          foo.abcdef,      )    ```    Without the optional parenthesis, the multiline splitting black does in the last 3 methods is quite bad.    And obvious workaround is the first method,    Maybe related to https://github.com/ambv/black/issues/330;Alexgmin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.7.2018 23:06;null;25.8.2018 16:09;open;[documentation];7;429;Provide lists of lint / pycodestyle rules that Black makes obsolete;https://api.github.com/repos/ambv/black/issues/429;https://github.com/ambv/black/issues/429;Information Request / Addition to README    This is related to https://github.com/ambv/black/issues/259#issuecomment-392242976, but I have the opposite aim as that thread. For me, my editor shows everything flake8 is catching for me, but many things I'm intentionally not worrying about because I know Black will handle it. I want to continue to have flake8 tell me valuable things, but never bother me for anything Black handles. They are distractions. I can add all of these rules to my `.flake8`, which works great, but I've been only finding them as I go.    Is there a complete list of Black-made obsolete pycodestyle rules? I know only a subset of [these rules](http://pycodestyle.pycqa.org/en/latest/intro.html#error-codes) are made obsolete.    I'd love to just drop that list in my `.flake8` and never be bothered by the obsolete rules again. I suggest adding this list to the README.;nixjdm;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.8.2018 0:03;17.8.2018 18:01;17.8.2018 18:09;closed;[];8;430;not enforcing python3.6 for precommit hook;https://api.github.com/repos/ambv/black/issues/430;https://github.com/ambv/black/pull/430;this should allow precommit hooks to be used with py37;miki725;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.8.2018 15:30;2.8.2018 12:19;3.9.2018 10:40;closed;[];3;431;[Question] Is it possible to get formatted file to stdout without side-effect of file modification?;https://api.github.com/repos/ambv/black/issues/431;https://github.com/ambv/black/issues/431;As a user unfamiliar with Black I would like to customize the view of formatting results as in   ```black filename --diff``` .  If only I could pipe results as an input for a tool of choice to   - review diff side-by-side  - highlight it with green/red colors with some other tool    Two options I could find:  1. `$ black filename --diff -q` - to use this output as an input I should parse it by `+/-` appearance (nontrivial)  2. `$ black filename -q ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.8.2018 23:15;1.8.2018 23:20;1.8.2018 23:20;closed;[];2;432;Describe how to format code without modifying the file;https://api.github.com/repos/ambv/black/issues/432;https://github.com/ambv/black/pull/432;Fixes #431 ;maximbaz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.8.2018 18:33;17.8.2018 17:39;17.8.2018 17:40;closed;[];2;433;vim: Restore cursor/window position after format;https://api.github.com/repos/ambv/black/issues/433;https://github.com/ambv/black/pull/433;Without this the cursor jumps to the top of the window after formatting occurs.;Jonty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.8.2018 0:43;17.8.2018 16:30;17.8.2018 16:30;closed;[design];2;434;Black mangles multiple assignments unnecessarily by introducing parentheses;https://api.github.com/repos/ambv/black/issues/434;https://github.com/ambv/black/issues/434;"Operating system: macOS High Sierra 10.13.5   Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: Yes    Before `black`:    ```python  xxx_pattern_with_no_padding = yyy_pattern_with_no_padding = zzz_pattern_with_no_padding = aaa_pattern_with_no_padding = r""\d{9}""    xxx = yyy = zzz = aaa = r""\d{9}""  ```    After `black`:    ```python  xxx_pattern_with_no_padding = (      yyy_pattern_with_no_padding  ) = zzz_pattern_with_no_padding = aaa_pattern_with_no_padding = r""\d{9}""    xxx = yyy = zzz = aaa = r""\d{9}""  ```    Not sure why black is introducing those parentheses for the first line.";crd;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.8.2018 13:53;5.8.2018 18:49;5.8.2018 18:49;closed;[];2;435;Pdb breakpoint line unnecessarily get formatted;https://api.github.com/repos/ambv/black/issues/435;https://github.com/ambv/black/issues/435;The breakpoint set using `pdb`: `import pdb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.8.2018 13:29;8.8.2018 11:29;8.8.2018 11:29;closed;[];4;436;Not respecting line limit;https://api.github.com/repos/ambv/black/issues/436;https://github.com/ambv/black/issues/436;<!--  Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:  -->    ### System info    Operating system: Darwin 10.13.5 (macOS HighSierra)  Python version: 3.6.5  *Black* version: black-18.6b4  Does also happen on master: yes    <!--  To answer the last question, follow these steps:  * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.8.2018 16:27;17.8.2018 17:36;17.8.2018 17:37;closed;[];2;437;Add link to Black Playground;https://api.github.com/repos/ambv/black/issues/437;https://github.com/ambv/black/pull/437;Open to changing copy or placement.;jpadilla;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.8.2018 0:38;null;26.9.2018 20:03;open;[design];9;438;Black does not honor exclude regex when files explicitly listed on the command line;https://api.github.com/repos/ambv/black/issues/438;https://github.com/ambv/black/issues/438;"Operating system: OSX  Python version: 3.6.2  *Black* version: black, version 18.6b4    The problem: certain directories in our repo contain generated python code that we don't want black to change. We've configure our repo to run black via pre-commit. Pre-commit invokes black with a list of changed files on the command line, and black's exclude regex does not work against those files and paths.    i.e.   ```  black --exclude ""/migrations/"" content/migrations/0049_publicationstore_is_test.py  reformatted content/migrations/0049_publicationstore_is_test.py  All done! ? ? ?  1 file reformatted.  ```    This makes us sad, since we've carefully put exclusion regexes into our pyproject.toml and black doesn't honor them when pre-commit calls it. Instead, we're having to workaround by configuring pre-commit to skip that path:  ```  repos:  -   repo: https://github.com/ambv/black      rev: stable      hooks:      - id: black        language_version: python3.6        exclude: migrations  ```    The behavior we'd like to see is that black's exclude regex would apply even when full file paths are listed on the commandline. I'd be happy to try for a PR if this seems like desirable behavior to anyone else...";adamehirsch;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.8.2018 15:50;8.8.2018 16:40;8.8.2018 16:40;closed;[];1;439;Unable to install black with pip;https://api.github.com/repos/ambv/black/issues/439;https://github.com/ambv/black/issues/439;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: macOS High Sierra 10.13.4  Python version: 2.7.10/3.7.0  *Black* version: N/A  Does also happen on master:    If i use pip i get this:  ```  pip install black  Collecting black  Could not find a version that satisfies the requirement black (from versions: )  No matching distribution found for black  ```    So i tried installing from Github and got this:    ```  pip install ""git+https://github.com/ambv/black.git""  Collecting git+https://github.com/ambv/black.git    Cloning https://github.com/ambv/black.git to /private/var/folders/d1/xvn4kf7501xbnpp3grb11w6rhdspfc/T/pip-req-build-SvhG55    Installing build dependencies ... done      Complete output from command python setup.py egg_info:      Traceback (most recent call last):        File ""<string>"", line 1, in <module>        File ""/private/var/folders/d1/xvn4kf7501xbnpp3grb11w6rhdspfc/T/pip-req-build-SvhG55/setup.py"", line 13          def get_long_description() -> str:                                     ^      SyntaxError: invalid syntax        ----------------------------------------  Command ""python setup.py egg_info"" failed with error code 1 in /private/var/folders/d1/xvn4kf7501xbnpp3grb11w6rhdspfc/T/pip-req-build-SvhG55/  ```    Is it possible because i have two python version pip is trying to install black as a Python2 package and it therefore fails? How can i solve this problem?";borisyordanov;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.8.2018 19:00;12.8.2018 19:59;12.8.2018 19:59;closed;[];4;440;Condense Multi-line Lists Where Possible?;https://api.github.com/repos/ambv/black/issues/440;https://github.com/ambv/black/issues/440;Operating system: Ubuntu 18.04 LTS  Python version: 3.6.3  *Black* version: `master`    Currently I'm getting push back from a colleague about using `black` because it formats a long list like this:    ```python  l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 , 18, 19, 20, 21, 22, 23, 24, 25]    # or    l = [      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,      12, 13, 14, 15, 16, 17, 18, 19, 20,      21, 22, 23, 24, 25,  ]  ```    Into an unreasonably long multi line expressions.    ```python  l = [      1,      2,      3,      4,      5,      6,      7,      8,      9,      10,      11,      12,      13,      14,      15,      16,      17,      18,      19,      20,      21,      22,      23,      24,      25,  ]  ```    Is this behavior intentional?    > It should be mentioned that this is an entirely hypothetical problem as I'm not sure I've ever needed a list like this.;rmorshea;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.8.2018 5:00;22.8.2018 6:11;22.8.2018 6:11;closed;[bug];2;441;Multi-line string separated by \ results in line exceeding line length;https://api.github.com/repos/ambv/black/issues/441;https://github.com/ambv/black/issues/441;"Operating system: macOS Sierra (10.12.6)  Python version: 3.7.0  *Black* version: 18.6b4  Does also happen on master: yes (but I also see one test failure on `master` so I might be doing this wrong)    Input file:    ```python  def myfn():      val = ""string""      my_str_w_long_name = f""This is a string string string string string {val}""\                           f""string string string string string {val}""  ```    Output file:    ```python  def myfn():      val = ""string""      my_str_w_long_name = f""This is a string string string string string {val}"" f""string string string string string {val}""    ```    Unexpected outcomes:  * Two separate f-strings in one line  * Resulting line exceeds max line length  * Additional empty line added making flake8 say: `W391: blank line at end of file`    Other observations:  * Does not happen when the second line of the string assignment also terminates in `\`  * Does not happen when the `\` isn't there  * Does happen when there is a space character before the `\`";jonemo;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.8.2018 14:26;9.8.2018 16:27;9.8.2018 16:29;closed;[];2;442;Enforce PEP8 class name convention (CapitalizedWords)?;https://api.github.com/repos/ambv/black/issues/442;https://github.com/ambv/black/issues/442;How about enforcing class names [according to PEP8](https://www.python.org/dev/peps/pep-0008/#class-names)? I.e. as `MyClass`.    I don't know if naming conventions are enforced for functions, methods and modules (all case with underscores), but that could also be a good idea perhaps?;GandalfSaxe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.8.2018 13:16;19.8.2018 14:10;19.8.2018 14:13;closed;[];5;443;Fix minor typos;https://api.github.com/repos/ambv/black/issues/443;https://github.com/ambv/black/pull/443;This is a minor proposal to align the style of comments somewhat.    (Most of the changes being found by a furious comment/documentation formatter that I'm trying to bootstrap.)    This is of course very subjective, and may spur bikeshedding. Although I found that the majority of the code in black were already on par with the changes being made.    Please just close this PR if these kind of styling attempts are frowned upon.;ceh;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.8.2018 20:02;15.8.2018 9:02;15.8.2018 9:02;closed;[unstable formatting];1;444;Instability with for loop + multiple assignment + long function;https://api.github.com/repos/ambv/black/issues/444;https://github.com/ambv/black/issues/444;  Operating system: Linux  Python version: 3.6.3  *Black* version: 18.6b4  Does also happen on master: yes    Black produces unstable formatting on this file:  ```  def f(start_time, end_time):      for t, step, property, value, count in \              a.b.c.really_long_function_name_that_goes_on_forever(                  start_time, end_time):          pass  ```    Here's the log:  ```  $ cat /tmp/blk_6h9f1clv.log  --- source  +++ first pass  @@ -1,6 +1,12 @@   def f(start_time, end_time):  -    for t, step, property, value, count in \  -            a.b.c.really_long_function_name_that_goes_on_forever(  -                start_time, end_time):  +    for (  +        t,  +        step,  +        property,  +        value,  +        count,  +    ) in a.b.c.really_long_function_name_that_goes_on_forever(  +        start_time, end_time  +    ):           pass     --- first pass  +++ second pass  @@ -3,10 +3,8 @@           t,           step,           property,           value,           count,  -    ) in a.b.c.really_long_function_name_that_goes_on_forever(  -        start_time, end_time  -    ):  +    ) in a.b.c.really_long_function_name_that_goes_on_forever(start_time, end_time):           pass  ```    I worked around it by assigning the result of the function call to a variable first. I feel like I've seen this on the Black tracker before but couldn't find it, so my apologies if this is a duplicate.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.8.2018 16:25;null;19.8.2018 23:44;open;[enhancement];3;445;no opinion on tuple assignment parentheses?;https://api.github.com/repos/ambv/black/issues/445;https://github.com/ambv/black/issues/445;"This might be intentional but it feels like an omission, so I'm reporting it.    Does Black not have an opinion on parentheses around tuples, when assigning or returning? The following file remains untouched:  ```python  (a, b, c) = 1, 2, 3  a, b, c = (1, 2, 3)  return (d, e, f)  return 1, 2, 3  ```  I would expect the optional parentheses would be removed in all above cases, per this: _""In those cases, parentheses are removed when the entire statement fits in one line, or if the inner expression doesn't have any delimiters to further split on.""_    Operating system: Linux Mint  Python version: 3.6  *Black* version: 18.6b4  Does also happen on master: yes";matejcik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 5:52;15.8.2018 8:56;16.8.2018 0:30;closed;[];5;446;Spaces Before/After Slice :'s;https://api.github.com/repos/ambv/black/issues/446;https://github.com/ambv/black/issues/446;Operating system: macOS 10.13.6  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: yes    Black gives the following output:    ```python  class ItHasConstants:      LONG_NAME_FOR_A_CONSTANT = 0      def myfunc():      mylist = []      slicea, sliceb = (          mylist[: ItHasConstants.LONG_NAME_FOR_A_CONSTANT],          mylist[ItHasConstants.LONG_NAME_FOR_A_CONSTANT :],      )  ```    I think that in this case, it should read:  ```python  ...      slicea, sliceb = (          mylist[:ItHasConstants.LONG_NAME_FOR_A_CONSTANT],          mylist[ItHasConstants.LONG_NAME_FOR_A_CONSTANT:],      )  ```    With no spaces before or after the `:`. Am I wrong or is this an oversight in Black's handling of slices when attribute access is happening?  ;scolby33;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 6:05;16.8.2018 5:09;16.8.2018 5:09;closed;[];3;447;write to cache even if the file is unchanged;https://api.github.com/repos/ambv/black/issues/447;https://github.com/ambv/black/pull/447;Maybe I'm missing something, but it seems useful to write to the cache even if the file is unchanged, so that the next time we run Black, we don't need to look at the file.    However, there is no need to write to the file if the result is already cached.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 7:36;17.8.2018 16:40;17.8.2018 16:41;closed;[enhancement, performance];2;448;`--check` mode does not write cache;https://api.github.com/repos/ambv/black/issues/448;https://github.com/ambv/black/issues/448;I noticed that the cache is not written when `--check` mode is on. This makes sense if the check fails, but if the file being checked is well-formatted, it would seem to be safe to write the cache. I propose that in `--check` mode we write to the cache only if the checked file is well-formatted.     My proposed behavior is useful when running Black in CI with `--check`, where we will frequently check the same file, and almost all will usually be well-formatted.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 10:23;null;6.11.2018 13:30;open;[design, parentheses];5;449;Use parentheses in: a = b == c;https://api.github.com/repos/ambv/black/issues/449;https://github.com/ambv/black/issues/449;"Some changes black wants to make to my code:    ```diff  -on_windows = (os.name == ""nt"")  +on_windows = os.name == ""nt""  ```    ```diff  -        currently_registered = (fd in self._registered)  +        currently_registered = fd in self._registered  ```    The parentheses were originally there to aid readability, by emphasizing that RHS of the `=` is an unusual-but-valid self-contained expression and not, like, a chained assignment or comprehension or something. Perhaps black should preserve, or even add, parentheses in cases like this? I guess the `in` case is more debateable, but the `= ==` case is really really easy to misread.";njsmith;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 10:45;null;6.11.2018 14:01;open;[design, empty lines];4;450;Proposal: only enforce blank line separation between functions and classes at the same level of nesting;https://api.github.com/repos/ambv/black/issues/450;https://github.com/ambv/black/issues/450;Black insists that function and class definitions should be separated by blank lines. Good rule! However, I think it's *slightly* overenthusiastic.    For functions at the same level of nesting, this is a good idea:    ```diff   def foo():       pass  +   def bar():       pass  ```    And it's not just between two functions, but between any start/end of a function and surrounding code:    ```diff   FOO = 1  +   def foo():       pass  +   BAR = 2  ```    But! This seems unnecessary – and dare I say, ugly and less readable – when the adjacent line of code is on a different nesting level:    ```python      if clogged_stream_maker is not None:            async def flipped_clogged_stream_maker():              return reversed(await clogged_stream_maker())        else:          flipped_clogged_stream_maker = None  ```    I claim that the above snippet ([source](https://github.com/python-trio/trio/blob/975107ae9f53bdd2495b38eabb45504207caab09/trio/testing/_check_streams.py#L374) would be better without any blank lines.    The same applies to classes, like, how does this blank line help anything? ([source](https://github.com/python-trio/trio/blob/975107ae9f53bdd2495b38eabb45504207caab09/trio/tests/test_file_io.py#L34)    ```diff   def test_wrap_non_iobase():  +       class FakeFile:             def close(self):  # pragma: no cover               pass  ```    The intuition here is that blank lines are *separators*, not headers/footers. And you only need separation between items at the same level of nesting. We don't insist on using blank lines to separate a `class` or `def` from the beginning or end of the file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.8.2018 20:34;14.8.2018 21:16;14.8.2018 21:16;closed;[];2;451;Exclude formatter from running on specific lines with inline comment;https://api.github.com/repos/ambv/black/issues/451;https://github.com/ambv/black/issues/451;"Some of my code is just over the border of the line limit. Here is an example:  ```  self.parser.add_argument(""--co2"", action=""store_true"", help=""read co2"")  self.parser.add_argument(""--mode"", type=int, help=""set device mode 1-4"")  self.parser.add_argument(      ""--status"", action=""store_true"", help=""read status register""  )  self.parser.add_argument(      ""--error"", action=""store_true"", help=""read error register""  )  self.parser.add_argument(""--reset"", action=""store_true"", help=""resets sensor"")  ```    I'd really like it to look like this (or equivalent):  ```  self.parser.add_argument(""--co2"", action=""store_true"", help=""read co2"")  self.parser.add_argument(""--mode"", type=int, help=""set device mode 1-4"")  self.parser.add_argument(""--status"", action=""store_true"", help=""read status register"") # nofmt  self.parser.add_argument(""--error"", action=""store_true"", help=""read error register"")  # nofmt  self.parser.add_argument(""--reset"", action=""store_true"", help=""resets sensor"")  # nofmt  ```    Is this something that aligns with the black ideology?";jakerye;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.8.2018 20:42;17.8.2018 16:03;17.8.2018 16:03;closed;[];0;452;Proposal: Add underscores in long numeric literals.;https://api.github.com/repos/ambv/black/issues/452;https://github.com/ambv/black/issues/452;"I am bad at counting zeros, so it's hard for me to tell at a glance what value ""100000000"" is. It would be nice if Black automatically added underscores (in versions of Python that support it), so that this would become ""100_000_000"".";JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.8.2018 5:08;17.8.2018 16:40;17.8.2018 17:25;closed;[];2;453;write cache in --check mode;https://api.github.com/repos/ambv/black/issues/453;https://github.com/ambv/black/pull/453;Fixes #448.    This diff makes us always write to the cache in normal mode, except  if the file is already in the cache, and it makes us write to the  cache in --check mode if the file is already well formatted.    I also fixed some related docstrings.    WriteBack.NO is now used only in tests.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.8.2018 6:02;17.8.2018 16:03;17.8.2018 17:21;closed;[];2;454;normalize numeric literals;https://api.github.com/repos/ambv/black/issues/454;https://github.com/ambv/black/pull/454;Fixes #452    I ended up making a couple of other normalizations to numeric literals  too (lowercase everything, don't allow leading or trailing . in floats,  remove redundant + sign in exponent). I don't care too much about those,  so I'm happy to change the behavior there.    For reference, here is Python's grammar for numeric literals:  https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals    I ran black with this patch on CPython's test suite (which I'm guessing  provides a good variety of numeric identifiers) and found no new crashes.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.8.2018 6:05;null;26.9.2018 19:02;open;[bug, help wanted, lib2to3];1;455;Parse failure on some Unicode identifiers;https://api.github.com/repos/ambv/black/issues/455;https://github.com/ambv/black/issues/455;Black gives a syntax error on this file:  ```python  import unittest    class PEP3131Test(unittest.TestCase):        def test_valid(self):          class T:              ä = 1              µ = 2 # this is a compatibility character              ? = 3              x? = 4  ```  Error:  ```  error: cannot format unident.py: Cannot parse: 10:13:             x? = 4  ```    This is part of `Lib/test/test_unicode_identifiers.py` from the CPython test suite.    Operating system: OS X  Python version: 3.7.0  *Black* version: master  ;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.8.2018 21:52;17.8.2018 17:25;17.8.2018 17:25;closed;[];4;456;Use atom-black plugin for Atom integration;https://api.github.com/repos/ambv/black/issues/456;https://github.com/ambv/black/pull/456;I wrote an Atom plugin for Black :) Thank you;hauntsaninja;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.8.2018 6:16;17.8.2018 15:49;17.8.2018 20:15;closed;[];2;457;Disable blank lines around top level definition;https://api.github.com/repos/ambv/black/issues/457;https://github.com/ambv/black/issues/457;Operating system: windows10  Python version: 3.6.5  *Black* version: 18.6b4    I need to use only one blank line or whatever how many blank lines before top level of class/def I want,  How `black` would help in this case?;tuyenpm9;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.8.2018 19:36;null;26.9.2018 18:52;open;[bug, comments];1;458;Comments interfering with fluent formatting;https://api.github.com/repos/ambv/black/issues/458;https://github.com/ambv/black/issues/458;"Copied over from https://github.com/ambv/black/issues/379#issuecomment-409710377    Without a comment, formatted with black (`-l 79`)    ```python      return (          df_day.assign(date=date, fund_ticker=ticker)          .pipe(lambda x: x.loc[x[""Shares""].notnull()])          .assign(Shares=df_day[""Shares""].astype(""float64""))      )  ```    Adding a comment, before formatting    ```python      return (          df_day.assign(date=date, fund_ticker=ticker)          .pipe(lambda x: x.loc[x[""Shares""].notnull()])          # arrives as int sometimes          .assign(Shares=df_day[""Shares""].astype(""float64""))      )  ```    With a comment, after formatting with black:    ```python      return (          df_day.assign(date=date, fund_ticker=ticker).pipe(              lambda x: x.loc[x[""Shares""].notnull()]          )          # arrives as int sometimes          .assign(Shares=df_day[""Shares""].astype(""float64""))      )  ```    Without thinking about the more general problem, the second example here is ideal - the comment can be _within_ a fluent expression and wouldn't change the fluent expression formatting.    Thanks again for such an awesome library and vision!    Operating system: MacOS  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master:   ";max-sixty;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.8.2018 19:56;17.8.2018 20:07;17.8.2018 20:07;closed;[];1;459;Error cannot format – argument wrapping in indented for-loop;https://api.github.com/repos/ambv/black/issues/459;https://github.com/ambv/black/issues/459;Operating system: macOS 10.13.6  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: Not sure, how different is master? I'll do this later.    Bug:    ```  error: cannot format /path/to/grey.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /path/to/log  ```    Test case:    ```python  class Foo:      def bar():          def wrapped():              for long_argument_1, long_argument_2 in utils.do_a_long_thing_with_some_args(                  argument_1,                  argument_2,              ):                  yield something, something_else  ```    Diff:    ```diff  --- source  +++ first pass  @@ -1,9 +1,11 @@   class Foo:       def bar():           def wrapped():  -            for long_argument_1, long_argument_2 in utils.do_a_long_thing_with_some_args(  -                argument_1,  -                argument_2,  +            for (  +                long_argument_1,  +                long_argument_2,  +            ) in utils.do_a_long_thing_with_some_args(  +                argument_1, argument_2               ):                   yield something, something_else     --- first pass  +++ second pass  @@ -2,10 +2,8 @@       def bar():           def wrapped():               for (                   long_argument_1,                   long_argument_2,  -            ) in utils.do_a_long_thing_with_some_args(  -                argument_1, argument_2  -            ):  +            ) in utils.do_a_long_thing_with_some_args(argument_1, argument_2):                   yield something, something_else   ```  ;danpalmer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.8.2018 12:28;17.9.2018 19:02;17.9.2018 19:02;closed;[];13;460;blackd: a HTTP server for blackening;https://api.github.com/repos/ambv/black/issues/460;https://github.com/ambv/black/pull/460;This implements https://github.com/ambv/black/issues/349#issuecomment-411396604    As expected, it shaves off a couple hundred milliseconds (the python startup time) when individually formatting files. In my extremely dubious testing, this takes about 16-17 ms (after starting `python blackd.py`):    ```  curl http://localhost:45484 -d hello  ```    While doing it the old-fashioned way takes about 280-290 ms:  ```  echo hello | python black.py -  ```    I'm putting this early version up to get feedback, but will add     - [x]  a `--bind-host` and a `--bind-port` option  - [x] 100% test coverage  - [x] CI config updates  - [x] timestamps in the server output    before merging.    Fixes #349 ;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.8.2018 5:51;20.8.2018 6:02;20.8.2018 6:02;closed;[];3;461;autodetect Python 3.6 on the basis of underscores;https://api.github.com/repos/ambv/black/issues/461;https://github.com/ambv/black/pull/461;;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.8.2018 14:30;26.9.2018 18:50;26.9.2018 18:50;closed;[duplicate];4;462;black adds unnecessary lines around triple-quoted blocks;https://api.github.com/repos/ambv/black/issues/462;https://github.com/ambv/black/issues/462;"Using the rpy2 library to embed R code in a Python project, a common idiom is this:    ```python  import rpy2.robjects as robjects    robjects.r('''  loadRData <- function(fileName){      #' Load an .rda file and return it as a r.DataFrame.      load(fileName)      get(ls()[ls() != ""fileName""])  }  ''')  ```    Appying `black -S` to it, the code becomes:    ```python  robjects.r(      '''  loadRData <- function(fileName){      #' Load an .rda file and return it as a r.DataFrame.      load(fileName)      get(ls()[ls() != ""fileName""])  }  '''  )  ```    This might be an issue with other language embeddings as well.    My suggestion is that black does not change this idiom, i.e., the opening and closing parenthesis should be coalesced with the triple (single) quotes.    Operating system:  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    EDIT: earlier versions did not show the whitespace correctly.";webartifex;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.8.2018 4:34;22.8.2018 6:11;24.8.2018 19:13;closed;[];2;463;wrap atoms in invisible parens to split adjacent strings;https://api.github.com/repos/ambv/black/issues/463;https://github.com/ambv/black/pull/463;Fixes #441.    Adjacent string literals, which are concatenated by Python, create atom nodes rather than expr nodes like actual operators, so we weren't wrapping them in invisible parens and we weren't considering them for splitting into multiple lines.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.8.2018 6:14;20.8.2018 17:19;20.8.2018 17:19;closed;[];1;464;fix misformatting of floats with leading zeros;https://api.github.com/repos/ambv/black/issues/464;https://github.com/ambv/black/pull/464;"This is a bug in my previous code: it ended up turning ""0.06"" into ""0.6"".    The solution in this diff is a bit hacky, but it has the virtue of being correct, unlike the previous code.    It might be worth thinking about this part of the style some more: Should we even put underscores in the part of floats behind the decimal point? If so, should we count the groups from the end, like we do now, or from the beginning? (The difference between `0.12_345_678` and `0.123_456_78`.)";JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.8.2018 17:08;20.8.2018 17:30;20.8.2018 17:30;closed;[];5;465;Typo in README (flake8 configuration);https://api.github.com/repos/ambv/black/issues/465;https://github.com/ambv/black/issues/465;There is a typo in `README.md`, relative to flake8 configuration ([Line length](https://github.com/ambv/black/blob/master/README.md#line-length) section).    As stated in [flake8 documentation](http://flake8.pycqa.org/en/latest/user/configuration.html#project-configuration), underscore instead of hyphens must be used in option name when used in an INI-file.;cailloumajor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.8.2018 17:20;20.8.2018 17:30;21.8.2018 16:02;closed;[];1;466;Fix typo for flake8 configuration;https://api.github.com/repos/ambv/black/issues/466;https://github.com/ambv/black/pull/466;Fixes #465;cailloumajor;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.8.2018 20:54;23.8.2018 20:55;23.8.2018 20:55;closed;[];3;467;Numeric formatting;https://api.github.com/repos/ambv/black/issues/467;https://github.com/ambv/black/issues/467;I recently landed a diff adding normalization of numeric literals (#454, #464), but I want to make sure we all agree on the behavior before this goes into a release. It would be bad for user trust in Black if we change formatting in a release, then change our mind again in another release, so I'd rather discuss these now before they're locked into a release.    Here are the formatting rules included in my diff:    - `123456789` -> `123_456_789`  - `0.12345678` -> `0.12_345_678`     - Should this be `0.123_456_78` instead? Or perhaps we don't need underscores at all in the fractional part of floats;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.8.2018 10:52;23.8.2018 13:52;23.8.2018 13:52;closed;[bug];2;468;Formatting fails on lambda expression with default argument;https://api.github.com/repos/ambv/black/issues/468;https://github.com/ambv/black/issues/468;"Operating system: Win 10 1803 x64  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: Yes    The following snippet appears to be valid Python code but trips black:  ```Python  pem_spam = lambda l, spam = {      ""-----BEGIN PKCS7-----"": True, ""-----END PKCS7-----"": True, """": True  }: not spam.get(l.strip())  ```  Found at https://github.com/fonttools/fonttools/blob/master/Lib/fontTools/ttLib/tables/D_S_I_G_.py#L101.";madig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 6:05;23.8.2018 20:55;23.8.2018 20:57;closed;[];2;469;change some numeric behavior;https://api.github.com/repos/ambv/black/issues/469;https://github.com/ambv/black/pull/469;Closes #467.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 6:43;23.8.2018 13:52;23.8.2018 13:52;closed;[];2;470;fix bracket match bug;https://api.github.com/repos/ambv/black/issues/470;https://github.com/ambv/black/pull/470;Fixes #468.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 9:29;22.8.2018 16:23;22.8.2018 16:23;closed;[];1;471;black adds unnecessary lines around triple-quoted blocks;https://api.github.com/repos/ambv/black/issues/471;https://github.com/ambv/black/issues/471;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: OSX 10.13.6  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    When using a multiline, triple-quoted string literal as an argument for a function, black adds newlines around the literal, increasing the number of lines without increasing readability.    Consider:    ```python  textwrap.dedent(""""""\      Hello, I am      a multiline string used with      a common idiom  """""")  ```    black will convert this to:    ```python  textwrap.dedent(      """"""\      Hello, I am      a multiline string used with      a common idiom  """"""  )  ```    adding extra lines and more confusing indentation";gwax;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 12:22;null;26.9.2018 15:41;open;[enhancement];1;472;Comma placement wonky when comment block between code and comma;https://api.github.com/repos/ambv/black/issues/472;https://github.com/ambv/black/issues/472;Operating system: Windows 10 1803 x64  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: Yes.    The following `__init__` parameter list uses funky formatting that places commas on the next line instead of where they should be: https://github.com/googlefonts/fontbakery/blob/master/Lib/fontbakery/reporters/terminal.py#L174    This gets reformatted as  ```Python      def __init__(          self,          print_progress=True,          stdout=sys.stdout,          structure_threshold=None,          usecolor=True,          unicorn=True          # a tuple of structural statuses to be skipped          # e.g. (STARTSECTION, ENDSECTION)          ,          skip_status_report=None,          **kwd,      ):  ```  The comma should probably be moved before the comment block... Weird corner case, yeah, but I thought I should report it.;madig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 12:39;22.8.2018 12:51;22.8.2018 12:51;closed;[];1;473;Docstrings are not formatted properly;https://api.github.com/repos/ambv/black/issues/473;https://github.com/ambv/black/issues/473;"Operating system: Windows 10  Python version: 3.7.0  *Black* version: 18.6b4  Does also happen on master: Yes    Input:  ```  def func():    """"""   abc   """"""  ```  output:  ```  def func():      """"""   abc   """"""  ```    Supplied input had 2 spaces for the docstring's starting quote and 1 space for the content `abc` and ending quotes. After running black on the file, it had four spaces for the starting quote while the remaining where unaffected. As per the discussion #144, expectation is that this should be formatted as per PEP 257 guidelines. ";VighneshKSP;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.8.2018 19:40;11.9.2018 20:25;11.9.2018 20:25;closed;[];6;474;Add link to Atom plugin python-black ;https://api.github.com/repos/ambv/black/issues/474;https://github.com/ambv/black/pull/474;Pull request #456 linked a Black for Atom named [atom-black](https://github.com/hauntsaninja/atom-black) in the Readme.  A plugin named [python-black](https://github.com/mikehoyio/atom-python-black) already existed. I suggest to link both in the Readme.  ;quic0;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.8.2018 15:38;null;5.10.2018 16:23;open;[enhancement];4;475;Automatically ignore files in .gitignore;https://api.github.com/repos/ambv/black/issues/475;https://github.com/ambv/black/issues/475;I think a feature to automatically ignore files and directories listed in `.gitignore` would be useful. This file normally contains a long list of auto-generated files or files that are otherwise unnecessary to format. By pruning these big directories, black will run much faster. By adding such a feature, black will require even less configuration as most projects will no longer require passing `--exclude` on the command line.     Other opinionated code format tools already do this or are discussing this. For example:    JavaScript Standard: https://standardjs.com/#how-do-i-ignore-files    > Paths in a project's root .gitignore file are also automatically ignored.    PHP-CS-Fixer: https://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/3947#issuecomment-408342692    > I think it can be fixed in a broader, generalised way, by parsing (and excluding the results of) ignore files like .gitignore.;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.8.2018 14:31;24.8.2018 16:42;24.8.2018 16:42;closed;[];1;476;typing.Union should not be joined if end of line has comments;https://api.github.com/repos/ambv/black/issues/476;https://github.com/ambv/black/issues/476;black 18.6b4    ```python  from typing import Union      A = Union[      int,  # my comment      float,  # my other comment  ]  ```    gets translated into:    ```python  from typing import Union      A = Union[int, float]  # my comment  # my other comment  ```    Interestingly black already handles lists well:    ```python  # this does not get reformatted  A = [      int,  # my comment      float,  # my other  ]  ```;gaborbernat;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.8.2018 19:09;24.8.2018 19:12;24.8.2018 19:12;closed;[];1;477;When using backslashes, Black replaces multiline strings to single lines but loo long string;https://api.github.com/repos/ambv/black/issues/477;https://github.com/ambv/black/issues/477;"Operating system: Ubuntu 14/04  Python version: 3.6.4  *Black* version: 18.6b4 (a37abdcbc5d8828428cea8b9daca65d9ee0994b5)  Does also happen on master: yes    Here is my file:  ```Python3  a = ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a"" \      ""a""  print(a)  ```    What Black does:  ```Python3  a = ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a"" ""a""  print(a)  ```    This is obviously totally wrong.    What I would expect instead:  ```Python3  a = (      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""      ""a""  )  print(a)  ```    It is interesting to note that if my string is already formatted using parenthesis, Black keeps them *if* there is 22 or more lines, else it merges them on one line which is 87 chars long (so I guess this behavior is ok).";erdnaxeli;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24.8.2018 20:56;24.8.2018 23:05;24.8.2018 23:05;closed;[];4;478;Cannot pip install black: No matching distribution found for black;https://api.github.com/repos/ambv/black/issues/478;https://github.com/ambv/black/issues/478;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    I'm trying to install black from pip and I'm getting:    ```  (virtualenvname) username@machine:~/webapp$ pip install black  Collecting black    Could not find a version that satisfies the requirement black (from versions: )  No matching distribution found for black    ```  Operating system: Linux, Devuan ascii  Python version: 2.7.13  *Black* version: newest???  ;MrCsabaToth;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.8.2018 20:59;25.8.2018 21:13;25.8.2018 21:16;closed;[];2;479;missing aiohttp dependency;https://api.github.com/repos/ambv/black/issues/479;https://github.com/ambv/black/pull/479;;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.8.2018 10:45;7.9.2018 22:14;7.9.2018 22:14;closed;[];3;480;Black adoption comments;https://api.github.com/repos/ambv/black/issues/480;https://github.com/ambv/black/issues/480;Hi!    We held a meeting last week to discuss introducing Black in one of our product, and these was the main pain-points for the team. I thought it might be helpful to get a little bit insight. We plan to use it on two repositories, about 150k Loc in total.  It's not a problem report, you can close it right away if you think so, but I though it might worth an open discussion. Or we might make a new concrete issue you are willing to accept or solve, or maybe there is one or two which could be mentioned in the documentation.    - How we deploy it? We have different versions of Ubuntu we have to support and it's not trivial to install for example to Ubuntu Xenial because of 3.6-only codebase. Somebody mentioned it would not be easy to make a pull request about 3.5 support because f-strings are all over the place.  (We will probably use the deadsnakes PPA.)  - The quotation mark usage is terrible.    I think these two are seriously hurting Black adoption, because I read/hear these complaints all over the place (Twitter, HN, developers forum and now in our company). It would be still not too late to change these, because it is still pre 1.0. The adoption thing could be solved by ubuntu packages and for xenial, the 3.6 interpreter could be packaged with something like [dh-virtualenv](https://github.com/spotify/dh-virtualenv). Would you accept such a PR in this repo?    We just had to talk about these, not necessarily problems:  - How do we install it? Do we install from salt, globally with `python -m pip` or in a virtualenv? We agreed in a virtualenv, because then you don't have to redeploy Jenkins slaves or other test machines when a new Black version is released.  - When do we run it? Should it be introduced in a git pre-commit hook, should CI run it, should CI only test it? We agreed that CI will only call `--check`, and everybody will format themselves.  - How gradually will we introduce it? Do we format it once and be done with it and from that point there is just Black, or do we introduce it for changed files. The gradual introduction doesn't seem viable at all.  - There will be people who will not like the formatting style at all after we committed the initial format changes. That can be a problem. I said that EVERYBODY has something which will hate about it, but we don't have to argue or think about formatting anymore. I read the README and discussion about the style, but I feel like Black doesn't follow long-standing practices or common usage patterns.  - What about developer machines? We agreed that everybody should install and use it themselves, we don't want to force anybody to any particular workflow.  - Will we run pep8 (now pycodestyle) also in tandem? We agreed to drop it and use black instead.  ;kissgyorgy;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.8.2018 11:03;27.8.2018 11:10;27.8.2018 11:29;closed;[];2;481;ISSUE_TEMPLATE.md: Add mention of online formatter;https://api.github.com/repos/ambv/black/issues/481;https://github.com/ambv/black/pull/481;People can try out https://black.now.sh/?version=master to test against master. That should make issue reporting easier.    See https://github.com/jpadilla/black-playground/issues/6#issuecomment-416088863. Thanks @jpadilla!;madig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 2:25;7.9.2018 22:13;7.9.2018 22:13;closed;[];2;482;black --exclude .vscode --diff . is writing files back;https://api.github.com/repos/ambv/black/issues/482;https://github.com/ambv/black/issues/482;Operating system: Ubuntu 18.04  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: Don't know.    I read the `black --help` output and it seemed that `--diff` should behave like a typical dry-run but apparently that's not the case. Am I missing something or is this expected behaviour?;holmboe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 10:47;28.8.2018 10:56;28.8.2018 12:41;closed;[];2;483;Change my email in the README;https://api.github.com/repos/ambv/black/issues/483;https://github.com/ambv/black/pull/483;Would prefer my personal email here. I realise it's still in the git log but c'est la vie.;treuherz;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 11:19;28.8.2018 13:58;29.8.2018 2:27;closed;[];1;484;Include license file in the generated wheel package;https://api.github.com/repos/ambv/black/issues/484;https://github.com/ambv/black/pull/484;The wheel package format supports including the license file. This is done using the `[metadata]` section in the `setup.cfg` file. For additional information on this feature, see:    https://wheel.readthedocs.io/en/stable/index.html#including-the-license-in-the-generated-wheel-file    Helps project comply with its own license:    > The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 11:23;28.8.2018 14:00;29.8.2018 2:27;closed;[];2;485;Prefer https:// links where available;https://api.github.com/repos/ambv/black/issues/485;https://github.com/ambv/black/pull/485;;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 11:28;28.8.2018 14:00;29.8.2018 2:27;closed;[];3;486;Add trove classifier for Python 3.7 support;https://api.github.com/repos/ambv/black/issues/486;https://github.com/ambv/black/pull/486;Testing added in 3bdd42389128bbbe8b64a8e050563f09bff99979.;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 11:33;28.8.2018 13:59;29.8.2018 2:27;closed;[];1;487;Add build & dist directories to .gitignore;https://api.github.com/repos/ambv/black/issues/487;https://github.com/ambv/black/pull/487;Generated when running the command `python3 setup.py bdist_wheel`.;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 11:36;28.8.2018 13:52;29.8.2018 2:27;closed;[];3;488;Update pypi.python.org URL to pypi.org;https://api.github.com/repos/ambv/black/issues/488;https://github.com/ambv/black/pull/488;For details on the new PyPI, see the blog post:    https://pythoninsider.blogspot.ca/2018/04/new-pypi-launched-legacy-pypi-shutting.html;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 15:03;7.9.2018 22:10;7.9.2018 22:10;closed;[];4;489;Compatibility with AutoPEP8 and yapf command line;https://api.github.com/repos/ambv/black/issues/489;https://github.com/ambv/black/issues/489;Hi there. I am recently experimenting with different linters and ```black``` seems to win it easily. I was very happy with a lot of things that work which are broken by ```AutoPEP8``` and ```yapf```.    We use [Arcanist](https://secure.phabricator.com/book/phabricator/article/arcanist/) as our Code review tool(which co-exists with Phabricator). I am trying to set up Python linting using ```black``` for our project. Arcanist supports linting by writing a custom wrapper around a command line tool and using the error code / stdout and stderr to find out what to do.    The good part about both of those tools is that they have a consistent command line where default is to print the new file to stdout. This makes it incredibly easy to make it just replace my file with the new file.    I wanted to understand why ```black``` has a different set of default behaviors, any reason for that? At the same time, in order to make it work similar to the other 2 tools, can we add a command line parameter which simply prints the new file instead of printing the diff or replacing it in place?   It should be easier to do it in black rather than wiring up a PHP git patch parser in my Arc plugin. (although it definitely should not be hard);kunalgrover05;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28.8.2018 16:34;19.9.2018 0:27;19.9.2018 17:20;closed;[];5;490;Update the Poetry section in pyproject.toml;https://api.github.com/repos/ambv/black/issues/490;https://github.com/ambv/black/pull/490;"This PR updates the `tool.poetry` section of the `pyproject.toml` file to properly package the project.    This PR should make Poetry the only tool needed to develop and package the project and as such the following files should no longer be needed:    - `MANIFEST.in`  - `Pipfile` and `Pipfile.lock`  - `setup.py`  - `setup.cfg`    I did not remove them in the PR since they might still want to be used by the maintainers, so I let this decision to them.    Also, this will now package the `*.pyi` files, which is not currently the case. If this is not desired, it's possible to exclude them by adding the following line to the `tool.poetry` section:    ```toml  exclude = [""**/*.pyi""]  ```    Also, if the maintainers want to only rely on Poetry I am willing to update the necessary files (like the CI configuration files) to make it work.    Finally, I added the `pyproject.lock` file to the `.gitignore` file because `black` is a library and as such does not need it.";sdispater;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.8.2018 18:00;7.9.2018 22:03;7.9.2018 22:03;closed;[];3;491;Black should include extension-less Python files with a shebang by default;https://api.github.com/repos/ambv/black/issues/491;https://github.com/ambv/black/issues/491;Standalone Python scripts often don't have an extension, but include a shebang. e.g. `#!/usr/bin/env python3`. Black should detect these files and format them the same as a `.py` file. Other format tools, such as isort, already do this. For details on how isort does this, see:    https://github.com/timothycrosley/isort/blob/fcd80d46e66179f9464c2df745ffed07622d9ee3/isort/main.py#L61-L74    Right now, I'm required to list each extension-less script explicitly, which I find to be error prone as new scripts are added.;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30.8.2018 9:21;30.8.2018 17:05;31.8.2018 9:52;closed;[];3;492;flake8 breakage;https://api.github.com/repos/ambv/black/issues/492;https://github.com/ambv/black/issues/492;"**Black https://github.com/ambv/black/commit/25795c**    [Playground link](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ABgAE1dAD2IimZxl1N_WlbvK5V-fnZfBCsrtgusrgnfFel2t2k2kWUYhDx0OUqK0YojNOWs2BRifL_hC9fli1DpIt0jUk7p0Vq6iHCbwZaItkU_AAAAAMP7Mjh8lsFvAAFpYQs0DK4ftvN9AQAAAAAEWVo=)    ## Options    `--line-length=60`    ## Input    ```python  def main():      s[len(s):2] = 'a'  ```    ## Output    ```python  def main():      s[len(s) : 2] = ""a""    ```    ## Expected";sureshvv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.8.2018 1:09;null;7.9.2018 21:57;open;[design, trailing comma];1;493;single-member multi-line expressions and trailing commas;https://api.github.com/repos/ambv/black/issues/493;https://github.com/ambv/black/issues/493;"Operating system: MacOS  Python version: 3.7.0  *Black* version: 18.6b4  Does also happen on master: yes    I can't quite tell if this is intended behavior or if it is emergent behavior caused by other things.    I noticed this because `black` and `isort` (configured with `multi_line_output = 3` and `include_trailing_comma = True`) started fighting over a particular line.    Per the trailing comma rules, it it my understanding that all multi-member expressions defined over multiple lines should have a trailing comma at the end of each member line, but expressions that fit on a single line and do not syntactically require a trailing comma will have that trailing comma removed.    This is good, and in my experience this is what `black` does. However, there is an edge case that is not directly addressed in the rules in the readme: an expression that can contain multiple members but only contains a single member and cannot fit on a single line.    Based on my understanding of the reason behind the adding trailing commas to the end of multi-line expression members (making diffs less bad), I would think that the single member in these cases should still have a trailing comma.    However, based on the ""remove trailing commas on single line expressions unless syntactically necessary"" exception, the trailing comma should not be present.    The behavior that `black` applies follows the rules that would be followed if the expressions were contained on a single line. Is this intentional? If so, could a mention of this exception be added to the readme?    input:  ```python  from long_namespace_that_makes_the_line_too_line import (      long_variable_name,  )      long_namespace_that_makes_the_line_too_line = (      long_variable_name,  )      long_namespace_that_makes_the_line_too_line = [      long_variable_name,  ]      long_namespace_that_makes_the_line_too_line = {      ""foo"": long_variable_name,  }      long_namespace_that_makes_the_line_too_line = {      long_variable_name,  }  ```    output:  ```python  from long_namespace_that_makes_the_line_too_line import (      long_variable_name  )      long_namespace_that_makes_the_line_too_line = (      long_variable_name,  )      long_namespace_that_makes_the_line_too_line = [      long_variable_name  ]      long_namespace_that_makes_the_line_too_line = {      ""foo"": long_variable_name  }      long_namespace_that_makes_the_line_too_line = {      long_variable_name  }  ```";mattsb42-aws;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.9.2018 17:20;null;9.10.2018 11:37;open;[bug];5;494;Black is not formatting code on windows and python 3.7 (32bit);https://api.github.com/repos/ambv/black/issues/494;https://github.com/ambv/black/issues/494;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Windows 10 64bit  Python version: Python 3.7.0 (32Bit)  *Black* version: 18.6b4  Does also happen on master: Yes    When running black for directory it fails without any error when formatting.    As far as I can tell it happens here:  `black.py@445`    ```py  tasks = {          loop.run_in_executor(              executor,              format_file_in_place,              src,              line_length,              fast,              write_back,              mode,              lock,          ): src          for src in sorted(sources)      }  ```    So I'm not sure if it's an bug in black or somewhere deeper. Or it might just be a feature of running 32bit python3 on windows 64bit.  It doesn't happen when using py3.7 64bit. Nor on py3.6 64bit. When I have a moment I'll test it on py3.6 32bit.    ;utek;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.9.2018 19:10;7.9.2018 21:50;7.9.2018 21:50;closed;[];1;495;bug(formatting): formatting inside braces and brackets on Windows;https://api.github.com/repos/ambv/black/issues/495;https://github.com/ambv/black/issues/495;"### 1. Summary    Black ugly formats code between {braces} and (parentheses) on Windows.    This was the reason why I didn't use Black in my code. But I try online formatter and get different result.    ### 2. Data    Is not a working code, this is examples, that Black incorrect format on my machine.    + `kira__demo__black.py`:    ```python  SITEMAP = {      'format': 'xml',      'priorities': {          'articles': 1,          'indexes': 0.5,          'pages': 0.5      },      'changefreqs': {          'articles': 'always',          'indexes': 'weekly',          'pages': 'always'      }  }      def pyfancy_critical(pyfancy_variable):      """"""Critical level.""""""      pyfancy_function(          logger_function().critical,          pyfancy().red_bg().bold(),          pyfancy_variable)      def logger_function():      return logbook.Logger(os.path.splitext(          os.path.basename(traceback.extract_stack()[-3].filename))[0])      def eric_head(head_metadata):      for filename_pylint in files_loop():          if head_metadata in open(filename_pylint, encoding='utf-8').read():              pyfancy_debug(                  '«' +                  head_metadata +                  '» contains in ' +                  filename_pylint)          else:              pyfancy_error(                  filename_pylint +                  ' not contains «' +                  head_metadata + '»')              yield False    ```    ### 3. Expected behavior    [**As in online formatter**](https://black.now.sh/?version=stable&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ASIAeVdAD2IimZxl1N_WkVym1IshEZ_jhrwXo6Cwl46lz4XNFi-N352CdFYdlBo2CBQXO6sZCs3WKoDWFltXglbfgMpZUn2YCnWOp0mr_NnUUSvs9fky_EP8-HIH6GcHIbobmy-wkfPRod8WrUl_GWaqrjdg_ICihL6E7pNum9KH5wGH2XXHoh0bIlldOQTGFlS7-LMCM0NHxlKzT6q1oVkn72ZxjE1lUY4zvJ_dzBZv2AhcJYMbU89vOGjEVtBF71egjlaExLqBS4vjARRjBUYpR7wVN7J4RiuTBf2HGTNrdkfh3bkJkGKkoMmRqkRkfX-NSxIvBalLFZxYAL_1Izhx8Yvp6OexEj5jR0B32PD1ls8JMuQXexcaH7pdSdSjHBlFRWL8GfFe4Z1EVt7XPt683dfsnDrteLlDnyUCiih-virZQmMCpeRHYR59RApox2MlUu4Nsu2i-st_GFalM1inXMtMJLXO81C5-NdxzbaZKDKNfeOwE42cv6Li9yTEVRmG33z1tQZ53pTsDjwVJoPyT5u0Iv784zKjqHU67grrVjLffOEdfiMomtsyjzH1bs4PrXqfgIsFK-Td3bRKyp3cGVufoq9eOxuh3rHq6uslhKpeoxO0ld9x6Dbsd9ZdeCthkjYzugCofwAAAAAAJGH99PoKqAVAAGBBIkJAABed7l8scRn-wIAAAAABFla):    ```python  SITEMAP = {      ""format"": ""xml"",      ""priorities"": {          ""articles"": 1,          ""indexes"": 0.5,          ""pages"": 0.5,      },      ""changefreqs"": {          ""articles"": ""always"",          ""indexes"": ""weekly"",          ""pages"": ""always"",      },  }      def pyfancy_critical(pyfancy_variable):      """"""Critical level.""""""      pyfancy_function(          logger_function().critical,          pyfancy().red_bg().bold(),          pyfancy_variable,      )      def logger_function():      return logbook.Logger(          os.path.splitext(              os.path.basename(                  traceback.extract_stack()[-3].filename              )          )[0]      )      def eric_head(head_metadata):      for filename_pylint in files_loop():          if (              head_metadata              in open(                  filename_pylint, encoding=""utf-8""              ).read()          ):              pyfancy_debug(                  ""«""                  + head_metadata                  + ""» contains in ""                  + filename_pylint              )          else:              pyfancy_error(                  filename_pylint                  + "" not contains «""                  + head_metadata                  + ""»""              )              yield False    ```    ### 4. Actual behavior    On my local machine:    ```diff  D:\SashaDebugging\SashaPython>black --diff kira__demo__black.py  --- kira__demo__black.py        2018-09-02 16:57:51.430521 +0000  +++ kira__demo__black.py        2018-09-02 16:58:17.160718 +0000  @@ -1,47 +1,32 @@   # -*- coding: utf-8 -*-   # @Author: SashaChernykh   # @Date: 2018-09-02 15:53:37   # @Last Modified time: 2018-09-02 19:57:51   SITEMAP = {  -    'format': 'xml',  -    'priorities': {  -        'articles': 1,  -        'indexes': 0.5,  -        'pages': 0.5  -    },  -    'changefreqs': {  -        'articles': 'always',  -        'indexes': 'weekly',  -        'pages': 'always'  -    }  +    ""format"": ""xml"",  +    ""priorities"": {""articles"": 1, ""indexes"": 0.5, ""pages"": 0.5},  +    ""changefreqs"": {""articles"": ""always"", ""indexes"": ""weekly"", ""pages"": ""always""},   }       def pyfancy_critical(pyfancy_variable):       """"""Critical level.""""""       pyfancy_function(  -        logger_function().critical,  -        pyfancy().red_bg().bold(),  -        pyfancy_variable)  +        logger_function().critical, pyfancy().red_bg().bold(), pyfancy_variable  +    )       def logger_function():  -    return logbook.Logger(os.path.splitext(  -        os.path.basename(traceback.extract_stack()[-3].filename))[0])  +    return logbook.Logger(  +        os.path.splitext(os.path.basename(traceback.extract_stack()[-3].filename))[0]  +    )       def eric_head(head_metadata):       for filename_pylint in files_loop():  -        if head_metadata in open(filename_pylint, encoding='utf-8').read():  -            pyfancy_debug(  -                '«' +  -                head_metadata +  -                '» contains in ' +  -                filename_pylint)  +        if head_metadata in open(filename_pylint, encoding=""utf-8"").read():  +            pyfancy_debug(""«"" + head_metadata + ""» contains in "" + filename_pylint)           else:  -            pyfancy_error(  -                filename_pylint +  -                ' not contains «' +  -                head_metadata + '»')  +            pyfancy_error(filename_pylint + "" not contains «"" + head_metadata + ""»"")               yield False    reformatted kira__demo__black.py  All done! ? ? ?  1 file reformatted.  ```    ### 5. Virtual environment    I reproduce the problem in virtual environment.    3 tests failed ? I press <kbd>Ctrl+C</kbd>.    <details>  <summary>  <b>Click here to see full output.</b></summary><br>    ```sh  D:\SashaForks>mkvirtualenv kirablackenv  Using base prefix 'c:\\python37'  New python executable in C:\Users\SashaChernykh\Envs\kirablackenv\Scripts\python.exe  Installing setuptools, pip, wheel...done.    (kirablackenv) D:\SashaForks>toggleglobalsitepackages        Disabled global site-packages  (kirablackenv) D:\SashaForks>hub clone ambv/black  Cloning into 'black'...  remote: Counting objects: 2140, done.  remote: Compressing objects: 100% (13/13), done.  remote: Total 2140 (delta 7), reused 14 (delta 7), pack-reused 2120 eceiving objects: 100% (2140/2140), 1.94 MiB | 482.0Receiving objects: 100% (2140/2140), 2.58 MiB | 606.00 KiB/s, done.    Resolving deltas: 100% (1447/1447), done.    (kirablackenv) D:\SashaForks>cd black    (kirablackenv) D:\SashaForks\black>pip install -e .  Obtaining file:///D:/SashaForks/black    Installing build dependencies ... done  Collecting click>=6.5 (from black==18.6b4)    Using cached https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl  Collecting attrs>=17.4.0 (from black==18.6b4)    Using cached https://files.pythonhosted.org/packages/3a/e1/5f9023cc983f1a628a8c2fd051ad19e76ff7b142a0faf329336f9a62a514/attrs-18.2.0-py2.py3-none-any.whl  Collecting appdirs (from black==18.6b4)    Using cached https://files.pythonhosted.org/packages/56/eb/810e700ed1349edde4cbdc1b2a21e28cdf115f9faf263f6bbf8447c1abf3/appdirs-1.4.3-py2.py3-none-any.whl  Collecting toml>=0.9.4 (from black==18.6b4)    Using cached https://files.pythonhosted.org/packages/f5/f9/044110c267e6408013b85166a7cfcd352cf85275aa8ce700aa5c0eb407ba/toml-0.9.4.tar.gz  Building wheels for collected packages: toml    Running setup.py bdist_wheel for toml ... done    Stored in directory: C:\Users\SashaChernykh\AppData\Local\pip\Cache\wheels\60\a0\8a\eaebd461aa0abf3d38546b12f3b3234de0a39de13374dad39e  Successfully built toml  Installing collected packages: click, attrs, appdirs, toml, black    Running setup.py develop for black  Successfully installed appdirs-1.4.3 attrs-18.2.0 black click-6.7 toml-0.9.4    (kirablackenv) D:\SashaForks\black>python setup.py test  running test  running egg_info  writing black.egg-info\PKG-INFO  writing dependency_links to black.egg-info\dependency_links.txt  writing entry points to black.egg-info\entry_points.txt  writing requirements to black.egg-info\requires.txt  writing top-level names to black.egg-info\top_level.txt  reading manifest file 'black.egg-info\SOURCES.txt'  reading manifest template 'MANIFEST.in'  warning: no files found matching '*.rst'  warning: no files found matching '*.txt' under directory 'tests'  writing manifest file 'black.egg-info\SOURCES.txt'  running build_ext  test_assertFormatEqual (tests.test_black.BlackTestCase) ... ok  test_assert_equivalent_different_asts (tests.test_black.BlackTestCase) ... ok  test_black (tests.test_black.BlackTestCase) ... ok  test_bracket_match (tests.test_black.BlackTestCase) ... ok  test_broken_symlink (tests.test_black.BlackTestCase) ... ok  test_cache_broken_file (tests.test_black.BlackTestCase) ... ok  test_cache_multiple_files (tests.test_black.BlackTestCase) ... ok  test_cache_single_file_already_cached (tests.test_black.BlackTestCase) ... ok  test_cantfit (tests.test_black.BlackTestCase) ... ok  test_check_diff_use_together (tests.test_black.BlackTestCase) ... running test  running egg_info  writing black.egg-info\PKG-INFO  writing dependency_links to black.egg-info\dependency_links.txt  writing entry points to black.egg-info\entry_points.txt  writing requirements to black.egg-info\requires.txt  writing top-level names to black.egg-info\top_level.txt  reading manifest file 'black.egg-info\SOURCES.txt'  reading manifest template 'MANIFEST.in'  warning: no files found matching '*.rst'  warning: no files found matching '*.txt' under directory 'tests'  writing manifest file 'black.egg-info\SOURCES.txt'  running build_ext  test_assertFormatEqual (tests.test_black.BlackTestCase) ... ok  test_assert_equivalent_different_asts (tests.test_black.BlackTestCase) ... ok  test_black (tests.test_black.BlackTestCase) ... ok  test_bracket_match (tests.test_black.BlackTestCase) ... ok  test_broken_symlink (tests.test_black.BlackTestCase) ... ok  test_cache_broken_file (tests.test_black.BlackTestCase) ... ok  test_cache_multiple_files (tests.test_black.BlackTestCase) ... ok  test_cache_single_file_already_cached (tests.test_black.BlackTestCase) ... ok  test_cantfit (tests.test_black.BlackTestCase) ... ok  test_check_diff_use_together (tests.test_black.BlackTestCase) ... FAIL  test_comments (tests.test_black.BlackTestCase) ... ok  test_comments2 (tests.test_black.BlackTestCase) ... ok  test_comments3 (tests.test_black.BlackTestCase) ... ok  test_comments4 (tests.test_black.BlackTestCase) ... ok  test_comments5 (tests.test_black.BlackTestCase) ... ok  test_composition (tests.test_black.BlackTestCase) ... ok  test_debug_visitor (tests.test_black.BlackTestCase) ... ok  test_empty (tests.test_black.BlackTestCase) ... ok  test_empty_exclude (tests.test_black.BlackTestCase) ... ok  test_empty_ff (tests.test_black.BlackTestCase) ... ok  test_empty_include (tests.test_black.BlackTestCase) ... ok  test_empty_lines (tests.test_black.BlackTestCase) ... ok  test_endmarker (tests.test_black.BlackTestCase) ... ok  test_expression (tests.test_black.BlackTestCase) ... ok  test_expression_diff (tests.test_black.BlackTestCase) ... ok  test_expression_ff (tests.test_black.BlackTestCase) ... ok  test_failed_formatting_does_not_get_cached (tests.test_black.BlackTestCase) ... ok  test_filter_cached (tests.test_black.BlackTestCase) ... ok  test_fmtonoff (tests.test_black.BlackTestCase) ... ok  test_fmtonoff2 (tests.test_black.BlackTestCase) ... ok  test_format_file_contents (tests.test_black.BlackTestCase) ... ok  test_fstring (tests.test_black.BlackTestCase) ... ok  test_function (tests.test_black.BlackTestCase) ... ok  test_function2 (tests.test_black.BlackTestCase) ... ok  test_get_future_imports (tests.test_black.BlackTestCase) ... ok  test_import_spacing (tests.test_black.BlackTestCase) ... ok  test_include_exclude (tests.test_black.BlackTestCase) ... ok  test_invalid_include_exclude (tests.test_black.BlackTestCase) ... ok  test_is_python36 (tests.test_black.BlackTestCase) ... ok  test_multi_file_force_py36 (tests.test_black.BlackTestCase) ... FAIL  test_multi_file_force_pyi (tests.test_black.BlackTestCase) ... FAIL  test_new_line_between_class_and_code (tests.test_black.BlackTestCase) ... ok  test_no_cache_when_stdin (tests.test_black.BlackTestCase) ... ok  test_no_cache_when_writeback_diff (tests.test_black.BlackTestCase) ... ok  test_no_files (tests.test_black.BlackTestCase) ... ok  test_numeric_literals (tests.test_black.BlackTestCase) ... ok  test_numeric_literals_py2 (tests.test_black.BlackTestCase) ... ok  test_pipe_force_py36 (tests.test_black.BlackTestCase) ... ok  test_pipe_force_pyi (tests.test_black.BlackTestCase) ... ok  test_piping (tests.test_black.BlackTestCase) ... ok  test_piping_diff (tests.test_black.BlackTestCase) ... ok  test_preserves_line_endings (tests.test_black.BlackTestCase) ... ok  test_preserves_line_endings_via_stdin (tests.test_black.BlackTestCase) ... ok  test_python2 (tests.test_black.BlackTestCase) ... ok  test_python2_unicode_literals (tests.test_black.BlackTestCase) ... ok  test_python37 (tests.test_black.BlackTestCase) ... ok  test_read_cache_line_lengths (tests.test_black.BlackTestCase) ... ok  test_read_cache_no_cachefile (tests.test_black.BlackTestCase) ... ok  test_remove_empty_parentheses_after_class (tests.test_black.BlackTestCase) ... ok  test_report_normal (tests.test_black.BlackTestCase) ... ok  test_report_quiet (tests.test_black.BlackTestCase) ... ok  test_report_verbose (tests.test_black.BlackTestCase) ... ok  test_self (tests.test_black.BlackTestCase) ... ok  test_setup (tests.test_black.BlackTestCase) ... ok  test_shhh_click (tests.test_black.BlackTestCase) ... ok  test_single_file_force_py36 (tests.test_black.BlackTestCase) ... ok  test_single_file_force_pyi (tests.test_black.BlackTestCase) ... ok  test_slices (tests.test_black.BlackTestCase) ... ok  test_string_prefixes (tests.test_black.BlackTestCase) ... ok  test_string_quotes (tests.test_black.BlackTestCase) ... ok  test_stub (tests.test_black.BlackTestCase) ... ok  test_symlink_out_of_root_directory (tests.test_black.BlackTestCase) ... ok  test_write_cache_creates_directory_if_needed (tests.test_black.BlackTestCase) ... ok  test_write_cache_read_cache (tests.test_black.BlackTestCase) ... ok  test_write_cache_write_fail (tests.test_black.BlackTestCase) ... ok    ======================================================================  FAIL: test_check_diff_use_together (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""c:\python37\Lib\contextlib.py"", line 74, in inner      return func(*args, **kwds)    File ""d:\sashaforks\black\tests\test_black.py"", line 1005, in test_check_diff_use_together      self.assertEqual(result.exit_code, 1, result.output)  AssertionError: -1 != 1 :    ======================================================================  FAIL: test_multi_file_force_py36 (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""c:\python37\Lib\contextlib.py"", line 74, in inner      return func(*args, **kwds)    File ""d:\sashaforks\black\tests\test_black.py"", line 1123, in test_multi_file_force_py36      self.assertEqual(result.exit_code, 0)  AssertionError: -1 != 0    ======================================================================  FAIL: test_multi_file_force_pyi (tests.test_black.BlackTestCase)  ----------------------------------------------------------------------  Traceback (most recent call last):    File ""c:\python37\Lib\contextlib.py"", line 74, in inner      return func(*args, **kwds)    File ""d:\sashaforks\black\tests\test_black.py"", line 1067, in test_multi_file_force_pyi      self.assertEqual(result.exit_code, 0)  AssertionError: -1 != 0    ----------------------------------------------------------------------  Ran 75 tests in 11.365s    FAILED (failures=3)  Test failed: <unittest.runner.TextTestResult run=75 errors=0 failures=3>  error: Test failed: <unittest.runner.TextTestResult run=75 errors=0 failures=3>    (kirablackenv) D:\SashaDebugging\SashaPython>black --diff kira__demo__black.py  --- kira__demo__black.py        2018-09-02 16:57:51.430521 +0000  +++ kira__demo__black.py        2018-09-02 17:16:35.280453 +0000  @@ -1,47 +1,32 @@   # -*- coding: utf-8 -*-   # @Author: SashaChernykh   # @Date: 2018-09-02 15:53:37   # @Last Modified time: 2018-09-02 19:57:51   SITEMAP = {  -    'format': 'xml',  -    'priorities': {  -        'articles': 1,  -        'indexes': 0.5,  -        'pages': 0.5  -    },  -    'changefreqs': {  -        'articles': 'always',  -        'indexes': 'weekly',  -        'pages': 'always'  -    }  +    ""format"": ""xml"",  +    ""priorities"": {""articles"": 1, ""indexes"": 0.5, ""pages"": 0.5},  +    ""changefreqs"": {""articles"": ""always"", ""indexes"": ""weekly"", ""pages"": ""always""},   }       def pyfancy_critical(pyfancy_variable):       """"""Critical level.""""""       pyfancy_function(  -        logger_function().critical,  -        pyfancy().red_bg().bold(),  -        pyfancy_variable)  +        logger_function().critical, pyfancy().red_bg().bold(), pyfancy_variable  +    )       def logger_function():  -    return logbook.Logger(os.path.splitext(  -        os.path.basename(traceback.extract_stack()[-3].filename))[0])  +    return logbook.Logger(  +        os.path.splitext(os.path.basename(traceback.extract_stack()[-3].filename))[0]  +    )       def eric_head(head_metadata):       for filename_pylint in files_loop():  -        if head_metadata in open(filename_pylint, encoding='utf-8').read():  -            pyfancy_debug(  -                '«' +  -                head_metadata +  -                '» contains in ' +  -                filename_pylint)  +        if head_metadata in open(filename_pylint, encoding=""utf-8"").read():  +            pyfancy_debug(""«"" + head_metadata + ""» contains in "" + filename_pylint)           else:  -            pyfancy_error(  -                filename_pylint +  -                ' not contains «' +  -                head_metadata + '»')  +            pyfancy_error(filename_pylint + "" not contains «"" + head_metadata + ""»"")               yield False    reformatted kira__demo__black.py  All done! ? ? ?  1 file reformatted.  ```    </details><br>      ### 6. Environment    + Windows 10 Enterprise LTSB 64-bit EN,  + Python 3.7.0,  + Black 18.6b4,  + virtualenv 16.0.0,  + virtualenvwrapper-win 1.2.5.    Thanks.";Kristinita;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.9.2018 15:10;null;7.9.2018 21:49;open;[bug];1;496;empty lines at end of file trimmed even with fmt: off;https://api.github.com/repos/ambv/black/issues/496;https://github.com/ambv/black/issues/496;"Operating system: Linux Mint  Python version: 3.6.6  *Black* version: latest  Does also happen on master: yes    The following file:  ```  # fmt: off    print(""hello"")    ```  gets trimmed to:  ```  # fmt: off    print(""hello"")  ```    IOW, if the file ends with empty lines, they are removed.";matejcik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.9.2018 16:16;3.9.2018 16:20;3.9.2018 16:20;closed;[];1;497;Default line length to 79?;https://api.github.com/repos/ambv/black/issues/497;https://github.com/ambv/black/issues/497;Why is the default line length 88, when PEP8 states it should be 79? https://www.python.org/dev/peps/pep-0008/#maximum-line-length;nottrobin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.9.2018 18:49;7.9.2018 21:48;11.9.2018 3:12;closed;[];3;498;Consider switching line-length default to 79 chars, per PEP8;https://api.github.com/repos/ambv/black/issues/498;https://github.com/ambv/black/issues/498;I've read [the justification](https://github.com/ambv/black#line-length) for using 88 chars as the default max-line-length in Black:    > This number was found to produce significantly shorter files than sticking with 80 (the most popular), or even 79 (used by the standard library). In general, [90-ish seems like the wise choice](https://youtu.be/wf-BqAjZb8M?t=260). If you're paid by the line of code you write, you can pass --line-length with a lower number.    I'd like to suggest that this argument isn't strong enough to justify deviating from a strong standard that exists in the Python community and beyond. Not only does PEP8, and therefore Flake8 and almost every existing Python project use 79 chars, but this is also the default in [Prettier](https://prettier.io/docs/en/options.html) and is [the basis for the 72-character limit in Git commits](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c). (And, conversely to the sarcastic addendum above - who cares if a file is a few lines longer in this day and age?)    I [proposed to Canonical's webteam](https://github.com/canonical-webteam/practices/issues/73#issuecomment-418130616) that we follow Black's standard of 88 chars, but our developers rejected the suggestion primarily based on that it's harder to view in their terminals - which is the reason for the 79 char limit in the first place. And so that we don't need to reconfigure all our Flake8-based CI for our projects immediately to be able to start using Black.    Since Black is meant to use sensible defaults and in most cases remain unconfigured, it seems a real shame that it deviates from PEP8 in just this one case, which will almost inevitably lead to a good number of projects that use it having just one config override for `--line-length=79` (as we're planning to do).    This is, of course, just my (or rather, our) 2 cents. Please feel free to make whatever choice you feel is right for the project.;nottrobin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4.9.2018 15:38;4.9.2018 15:57;5.9.2018 2:33;closed;[];2;499;When trailing comma present, force explode formatting;https://api.github.com/repos/ambv/black/issues/499;https://github.com/ambv/black/issues/499;The following is an example of the idea being proposed.    By the current standards of `black` (modulo column size) this is considered readable style:    ```py      return Response(          statusCode=status_code, body=safe_json.dumps(body or dict()), headers=headers      )  ```    I personally disagree. I understand black is adverse toward configuration, and appreciate the justification for that. So my proposal here is that a trailing comma can force the explosion, like so:    Given a trailing comma:  ```py      return Response(          statusCode=status_code, body=safe_json.dumps(body or dict()), headers=headers,      )  ```  Black would format like so:  ```py      return Response(          statusCode=status_code,          body=safe_json.dumps(body or dict()),          headers=headers,      )  ```    The benefits are:    1. more readable IMHO  2. more friendly to viewing version control system [git, ...] diffs;jasonkuhrt;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.9.2018 18:16;26.9.2018 18:46;26.9.2018 18:46;closed;[duplicate];3;500;Consider not breaking line on outermost parenthesis;https://api.github.com/repos/ambv/black/issues/500;https://github.com/ambv/black/issues/500;"First of all - thank you for making black!  I'm applying it to my main project (Gammapy) today.    There are a few examples where I think that black gives non-ideal results, and wanted to mention them here. If those have been discussed before, I apologise, please just close this issue.    I think this is nice:  ```python  things = OrderedDict([      ('ham', 'spam'),      ('bla bla bla bla', 'some more text here'),  ])  ```  and putting `[` and `]` on a separate line like black does is not an improvement:  ```python  things = OrderedDict(      [          (""ham"", ""spam""),          (""bla bla bla bla"", ""some more text here""),      ]  )  ```    I read through the black description, and see that this is intended behaviour to always add line breaks on the outermost parenthesis. Is it possible / up for debate to change this in some cases?    This is another case:  ```python  text  = """"""  Hello hallo  allo allo  """"""[1:-1]  ```  where black gives this output:  ```  text = """"""  Hello hallo  allo allo  """"""[      1:-1  ]  ```  and I think the input formatting is better readable than the black output.";cdeil;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.9.2018 14:22;7.9.2018 21:42;10.9.2018 15:31;closed;[];2;501;error: cannot format C:\Users\m\t.py: [Errno 13] Permission denied: C:\Users\m\t.py;https://api.github.com/repos/ambv/black/issues/501;https://github.com/ambv/black/issues/501;"Hi all    Has anyone used pycharm with ""Black""? I am getting above ""Permission Denied"" error. Have you gotten the same thing? Or is it just me?    Operating system: Windows  Python version: Python 3.6  *Black* version: 18.6b4  Does also happen on master:    Should.    Thanks  ";chfw;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.9.2018 0:13;8.9.2018 9:36;11.9.2018 7:03;closed;[];4;502;Preserve alignmenment;https://api.github.com/repos/ambv/black/issues/502;https://github.com/ambv/black/issues/502;"Hi,    I have a plugin that aligns code like this:    ```python  environ = {      ""DB_HOST""      : ""1.2.3.4"",      ""DB_PORT""      : ""1234"",      ""DB_NAME""      : ""app_db_v2"",      ""DB_USER""      : ""new_user"",      ""DB_READ_ONLY"" : ""0"",      ""DB_DDL""       : ""~/mkdb.sql"",  }  ```    Would it be an option to preserve this kind of alignment, or perhaps even have black do the alignment?";mbarkhau;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.9.2018 10:50;8.9.2018 11:34;8.9.2018 11:34;closed;[];2;503;Make sure `async for` is not broken up to separate lines;https://api.github.com/repos/ambv/black/issues/503;https://github.com/ambv/black/pull/503;Fixes #372.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.9.2018 11:26;26.9.2018 14:26;26.9.2018 16:40;closed;[];2;504;Add trailing comma when a single import doesn't fit on a line.;https://api.github.com/repos/ambv/black/issues/504;https://github.com/ambv/black/pull/504;Fixes #250.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.9.2018 22:10;10.9.2018 11:19;10.9.2018 11:19;closed;[];2;505;Update atom plugin location to merged plugin;https://api.github.com/repos/ambv/black/issues/505;https://github.com/ambv/black/pull/505;Update documentation to link to the merged atom plugin.    Plugin merged the capabilities of https://github.com/hauntsaninja/atom-black/ and https://github.com/mikehoyio/atom-python-black .    This issue is also referenced here #456 .  Collaboration discussion was referenced here https://github.com/mikehoyio/atom-python-black/issues/5    Cheers  Mike;mikehoyio;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.9.2018 5:14;26.9.2018 15:35;26.9.2018 15:35;closed;[not a bug];2;506;Suggestion: Add indenting to nested list comprehension inside dict comprehension to match dict formatting;https://api.github.com/repos/ambv/black/issues/506;https://github.com/ambv/black/issues/506;"  Operating system: MacOS 10.14 (beta)  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: [Yes](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ALRANRdAD2IimZxl1N_Wk6rkWsZudzSMT2xmAtX-7MN3hbliw1OA31BdFn0Z9VyvCaR7fku_9AQcqKsn_8a21_qoOZpDfFV7DSY0QhPx74QZCoa9GkdLDiGW1xH5UDBGP4CZuACPLaMkA4lDOsGYWIHQo61gjQwYR7D_DhLTuPKd7OD2chUC4QEaYCalU8AhkwnuqOLqy6kTKjlMsfsxys3bH4VjbA4C1z85IJvKI1RWIf8Rr0SQJ_K9lY8AHoEYNtx3W9vG7fuSJGn3raTOHn0wsRvLENVi6csAPh6GMKB7inXAAHwAdIFAACNVzFhscRn-wIAAAAABFla)    We have written a dict comprehension that is generated using list comprehension, and when black formats it, it feels like it is treating it all as list comprehension. I would expect it to handle the list comprehension like as if it were a dict assignment.     So, we are writing code that looks like:   ```python3  dict_list_comprehenstion = {      m['email']: m for m in comprehension_data if m['kind'] == 'internal'  }  ```    Which black formats to:  ```python3  dict_list_comprehenstion = {      m[""email""]: m      for m in comprehension_data      if m[""kind""] == ""internal""  }  ```    The black formatted version reduces the clarity of what is going on by putting the list comprehension lines on the same indentation as the key argument. List comprehension can already be easy to misread. ";ashleybartlett;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.9.2018 15:29;null;12.9.2018 15:29;open;[];0;507;Unexpected line break in combination with assert;https://api.github.com/repos/ambv/black/issues/507;https://github.com/ambv/black/issues/507;Operating system: MacOS  Python version: 3.6  *Black* version: master    The following snippet is formatted by black:        assert (          dbreader.CategoryDataHandler.select(              connection, scenario_set_id=scen_set_id1, changeset_id=changeset_id0          )          == []      )    I would expect the `== []` to not appear on a separate line.;aberres;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.9.2018 17:52;12.9.2018 18:25;12.9.2018 22:06;closed;[];2;508;Adding trailing comma on kwargs breaks the SonarQube Python plugin;https://api.github.com/repos/ambv/black/issues/508;https://github.com/ambv/black/issues/508;If you're using the [Python plugin for SonarQube](https://docs.sonarqube.org/display/PLUG/SonarPython) (we're using v1.10, which is the current latest TMK), it results in a parse error when analyzing code that has a trailing comma after `kwargs`.  Ex:    ```  class FooBar:      def __init__(self, arg1: bytes, arg2: bytes, arg3: bytes, arg4: bytes, arg5: bytes, arg6: int, *args, *kwargs,):          pass  ```  When run through Sonar will give:  ```  ERROR: Parse error at line 250 column 20:   242: ,   243: arg1: bytes,   244: arg2: bytes,   245: arg3: bytes,   246: arg4: bytes,   247: arg5: bytes,   248: arg6: int,   249: *args,   --> **kwargs,   251: ):  ```  Our problem is that we run our code through Black, which adds the comma, which means that now that we're trying to use Sonar for static analysis, it's hitting this parse error.  If we remove the comma manually, then Black puts it back.    This is on a Python 3.6 project, so it's clearly a bug in the Python plugin for Sonar (and [I've reported that on their forums](https://community.sonarsource.com/t/parse-error-in-sonarpython-when-trailing-comma-on-kwargs/2507)), but given that the trailing comma is not required, wouldn't it be more prudent for Black to not add the trailing comma?    This is somewhat related to https://github.com/ambv/black/issues/419 though that's an issue about failing to identify 3.6 correctly.    We're using the latest version of Black (18.6b4).;pzelnip;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.9.2018 1:05;null;13.9.2018 1:05;open;[performance];0;509;Bad performance on huge dictionary;https://api.github.com/repos/ambv/black/issues/509;https://github.com/ambv/black/issues/509;We have a file that contains a huge (9000-line) configuration dictionary, and it takes about 10 minutes to run Black on that file. Profiling showed that ~80% of the time is spent in the `comments_after` function, currently at https://github.com/ambv/black/blob/master/black.py#L1227. This function contains two loops that loop over all leaves and comments in a logical line, which is presumably leading to quadratic performance on very large logical lines. We could speed it up by adding a dictionary that lets us access the required data in constant rather than linear time.    We're running Python 3.6 and Black 18.6b4, but the relevant code isn't different on master.;JelleZijlstra;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.9.2018 11:05;null;5.11.2018 17:50;open;[];1;510;black forces lines to be too long;https://api.github.com/repos/ambv/black/issues/510;https://github.com/ambv/black/issues/510;"Operating system: Ubuntu 18.04  Python version: 3.6.5  *Black* version: 18.6b4 (via pip)  Does also happen on master: [Yes](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ALGARNdAD2IimZxl1N_Wg099tqtiCpvNvhczGSadH52NplN9ZiSxcfFM2NX8YXd8XynNk3RUdhMTrbIIvCaqRNnoHIF0vYdhLS2aBRTjlyxXC7VlRuiC5EpRanskAhTSKwQyiL0IxxAViL3tP8fPRDrunhGZaCVCZoRWEYLXu8ztaLFbB3MqlVINuMiqZ-ikJ-UU7Ud_rNxD6v2PnXOUqTif-GQDVllK0q-lsJnYm72FFJxWO0hwk3GNxzsLCEZPxl3dch92R196-Dy9UZi6kJq9c3M67izOczel8uaxzlYDWEDToF8vTG3obG4PLsEd3nl2ZJMfyrov-20M50XH_23jdMQ7w9wDOLCFoAQ7dLojCd0wOFf2EdIAACTHQsMdoRm7gABrwLHBQAA0jCOvLHEZ_sCAAAAAARZWg==)    This might not be a bug, but then I'd like to get the (opinionated) explanation for this behavior.    Feeding this code into black:    ```  # A long line example for black    def my_function(x, y, z):      """"""Whatever""""""        if condition:          if other_condition:              result = ""{} {} {}"".format(                  x,                  y,                  z.and_then.something_very_deep.                  inside_the_complex.object_called_z.even_further,              )          else:              result = ""{} {} {}"".format(                  x,                  y,                  (                      z.and_then.something_very_deep.                      inside_the_complex.object_called_z.even_further                  ),              )          return result  ```    Gives me this:    ```  # A long line example for black      def my_function(x, y, z):      """"""Whatever""""""        if condition:          if other_condition:              result = ""{} {} {}"".format(                  x,                  y,                  z.and_then.something_very_deep.inside_the_complex.object_called_z.even_further,              )          else:              result = ""{} {} {}"".format(                  x,                  y,                  (                      z.and_then.something_very_deep.inside_the_complex.object_called_z.even_further                  ),              )          return result  ```    What bothers me is that the long dotted paths are kept on a single line that's way too long. The two examples are basically the same, I just tried the second thing with parentheses, as I got the impression – while skimming existing issues – that this might be a way to force wrapping the line to respect the line length limit.    How do I get black to wrap these lines within the limit, if possible at all?    Anyway: Thanks for an extremely nice utility :)";decibyte;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13.9.2018 15:46;13.9.2018 19:11;13.9.2018 19:11;closed;[];3;511;Allow for partially formatting a file e.g. from line 20 to 25;https://api.github.com/repos/ambv/black/issues/511;https://github.com/ambv/black/issues/511;Hello,    I just stumbled upon black and I immediately integrated it into my workflow in PyCharm. it's really great tool.    Unfortunately I cannot reformat all of our code at once and make everything consistent, because I would be clobbering our git history and every subsequent git blame would blame me!    So I would like to have a command line switch to only reformat a part of a file, say a range of lines, e.g.        black --from-line 20 --to-line 25    so I can only reformat the code that I'm touching anyway and transform our codebase over time.;devsnd;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.9.2018 4:22;26.9.2018 21:27;26.9.2018 21:27;closed;[duplicate];2;512;Black fails to detect tabbed standalone comment indent correctly;https://api.github.com/repos/ambv/black/issues/512;https://github.com/ambv/black/issues/512;Operating system: Linux  Python version: 3.7  *Black* version: master      Running black on the following:    ```py  def test():   if 1:    return True     # Note: we are not returning False here because a line might have *both*   # a leading opening bracket and a trailing closing bracket.  If the   # opening bracket doesn't match our rule, maybe the closing will.  ```    Generates:    ```py  def test():      if 1:          return True            # Note: we are not returning False here because a line might have *both*          # a leading opening bracket and a trailing closing bracket.  If the          # opening bracket doesn't match our rule, maybe the closing will.  ```  ;jleclanche;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.9.2018 5:24;14.9.2018 7:29;19.9.2018 12:13;closed;[];4;513;[WIP] Add a --use-tabs argument to use tabs instead of spaces;https://api.github.com/repos/ambv/black/issues/513;https://github.com/ambv/black/pull/513;Fixes #47     Yes, I know #47 was rejected. This is following up on [this Twitter thread](https://twitter.com/Adys/status/1040389461006266368). I figured it'd be better to just write the code if I were to restart this discussion.    This is a WIP. I'll finish it if I can get a thumbs up on the option itself. Blocking bits:  - [ ] Converting spaces to tabs causes instability errors with standalone comments following indented lines (only on the first pass). I tried my hand at debugging it and found the culprit: #512. Tried to fix it but been having a hard time, and it's an issue right now either way.  - [ ] Again in spaces<->tabs conversion, indented docstrings get mangled. This is an issue in Black today when going from tabs to spaces. [PEP0257](https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation) defines the algorithm to handle docstring indentation;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.9.2018 19:19;17.9.2018 13:03;17.9.2018 13:04;closed;[];1;514;fix unstable formatting when unpacking big tuples;https://api.github.com/repos/ambv/black/issues/514;https://github.com/ambv/black/pull/514;Fixes #267.;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.9.2018 10:42;17.9.2018 12:12;17.9.2018 12:12;closed;[];1;515;long strings are not broken into small chunks;https://api.github.com/repos/ambv/black/issues/515;https://github.com/ambv/black/issues/515;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system:  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    To answer the last question, you have two options:  1. Use the online formatter at https://black.now.sh/?version=master, which will use the latest master branch.  2. Or run black on your machine:      * create a new virtualenv (make sure it's the same Python version);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.9.2018 23:50;null;26.9.2018 15:36;open;[];4;516;"Consider where ""point/cursor"" should end up";https://api.github.com/repos/ambv/black/issues/516;https://github.com/ambv/black/issues/516;"Maybe it could be a nice addition when it becomes possible to add ""cursor_position"" and then black could return where it should end up after processing";kootenpv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.9.2018 10:49;null;18.9.2018 20:41;open;[];1;517;Non-prerelease black release;https://api.github.com/repos/ambv/black/issues/517;https://github.com/ambv/black/issues/517;It looks like Black is stable enough at the moment to release it as `stable` to PyPI. There are plenty of tools and integrations already which rely on `black` package and the fact that it is still in `prerelease` state sometime causes inconveniences, i.e. using it with `pipenv` forces `allow_prereleases` flag to be set to `true`.;lig;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.9.2018 15:42;null;26.9.2018 23:00;open;[];0;518;Automatic test-case detection;https://api.github.com/repos/ambv/black/issues/518;https://github.com/ambv/black/pull/518;This PR changes the way test cases are defined. Test cases that assert formatting can now be dropped into `tests/data/python`. For pyi files it's `tests/data/pyi`, and for inputs that need to be forced to python3.6 mode, it's `tests/data/python36`.    For tests that should exercise the infrastructure around the formatting logic (like caching, reporting, diff generation, etc), nothing changes.    TODO before merge:    - [ ] add pytest to Pipfile  - [ ] figure out how to do coverage with pytest  - [ ] change CI to run tests through pytest  - [ ] mention how to add new test cases in `CONTRIBUTING.md`  - [ ] describe test case format in the docs;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.9.2018 11:34;19.9.2018 15:57;19.9.2018 15:57;closed;[];2;519;Possibility of allowing python 3.5 with black (through pip)?;https://api.github.com/repos/ambv/black/issues/519;https://github.com/ambv/black/issues/519;I tried black with python 3.6 and I really like it.    A couple of colleagues and I were wondering whether it would be possible to have a version of black that supported python 3.5.   ;miguelgfierro;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.9.2018 17:37;26.9.2018 13:25;26.9.2018 13:25;closed;[];1;520;How does include in pyproject.toml work?;https://api.github.com/repos/ambv/black/issues/520;https://github.com/ambv/black/issues/520;Operating system:  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: yes    I just cloned this repo to my drive, run `pip install -e .` and after that:  1. Run `black` and nothing happens  2. Run `black --config pyproject.toml --verbose` and I see only    ```  Using configuration from pyproject.toml.  No paths given. Nothing to do ?  ```    So, if I should specify path every time I run `black` why `include` setting is still exists?;pythoninja;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.9.2018 14:58;20.9.2018 15:22;20.9.2018 16:32;closed;[];2;521;pypy3.5 support;https://api.github.com/repos/ambv/black/issues/521;https://github.com/ambv/black/issues/521;Why is this limited to only 3.6+ ? I'm unable to pip install with pypy3.5 so I installed with 3.7 and ran against the code written in 3.5 and all of my tests still pass. Are there specific known issues?    I would like to avoid forking and pushing to pip under a different name with only the setup.py altered but this tool would be amazing for my team.;slocke716;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.9.2018 18:01;20.9.2018 18:37;22.9.2018 0:16;closed;[];2;522;Bogus Error Message;https://api.github.com/repos/ambv/black/issues/522;https://github.com/ambv/black/issues/522;"Operating system: (Debian) Linux  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: yes    First of all: Thanks for black!    Here a funny bogus error message:    ```python  black root@ip-10-34-2-19:~r/mdv# cat r.py  errout = lambda *msg: print("" "".join(msg), file=sys.stderr) # <-no error here  correct = 'foo'  def foo():      if 1:  # <- error here      i = 2  ```  ```bash  black root@ip-10-34-2-19:~/mdv# black r.py  error: cannot format r.py: Cannot parse: 2:22: errout = lambda *msg: print("" "".join(msg), file=sys.stderr)  All done! ? ? ?  1 file failed to reformat.  black root@ip-10-34-2-19:~/terminal_markdown_viewer/mdv# black --version  black, version 18.6b4  ```    I'm not saying it should format it, I'm only saying that it reports the wrong place for the error, should be the `if1:\ni=2` place.    It seems to be a problem with print() in the ast - if I do `lambda: foo()` it works, if I do `lambda: print()` it does not:    ```bash    $ echo -e 'lambda: foo()\nif i:\ni=1' | black -  lambda: foo()  if i:  i=1  error: cannot format -: Cannot parse: 3:0: i=1  All done! ? ? ?  1 file failed to reformat.    $ # same with print function:    $ echo -e 'lambda: print()\nif i:\ni=1' | black -  lambda: print()  if i:  i=1  error: cannot format -: Cannot parse: 1:8: lambda: print()  All done! ? ? ?  1 file failed to reformat.  ```    -> a bit annoying when you have big file and and try to find the real place where you messed up...    ";AXGKl;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.9.2018 23:26;26.9.2018 2:59;26.9.2018 2:59;closed;[];4;523;[RFE] Order Set literals uniformly;https://api.github.com/repos/ambv/black/issues/523;https://github.com/ambv/black/issues/523;*Black* version: black, version 18.6b4  (Didn't try master)    Would be great if we could uniformly order order `set` literals.    Basically, reordering:  ```python  {    Foo.B,    Foo.A,  }  ```  to  ```python  {    Foo.A,    Foo.B,  }  ```    From Python's perspective, the results are the same.    I guess there's only one difference in order of these items, and that's function side effects.    Arguably, such cases should be performed via `set()` and passing in an ordered list of items, and not via a literal.    Does that make sense?;behnam;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.9.2018 9:28;null;26.9.2018 8:51;open;[];5;524;Semaphore is not implemented.;https://api.github.com/repos/ambv/black/issues/524;https://github.com/ambv/black/issues/524;Relates to #388    Operating system: Android 8.0.0 (OnePlus 3T, Termux)  Python version: ~~3.6.6~~ 3.6.5  *Black* version: 18.6b4  Does also happen on master: yes    It has come to my attention that there is no semaphore synchronization primitive on Android. This means that black will not work on this platform whatsoever, which is disappointing, especially as I find this to be a fairly useful tool that I use regularly. I cannot get the traceback off of my phone while at work unfortunately, but I believe this issue has been put in before. It occurs on line 341 of black.py when initialising a ProcessPool. In master, this is at https://github.com/ambv/black/blob/master/black.py#L343    I have tested this in the Python console with both the multiprocessing pool and the concurrent.futures process pool. Both complain about said missing synchronization primitives.    [Python issue #3770](https://bugs.python.org/issue3770) discusses this issue, which appears to not just occur on Android, but also on the BSDs. This would mean most likely (haven't tested as I don't use BSD) that both Android and BSD cannot support Black.    Whilst this is not ideal, the following could be a work around for ensuring that this package would actually still work on these platforms. Again, I haven't tested, but both TPE and PPE in concurrent.futures share the same interface.    ```py  import concurrent.futures  ...  def generate_pool(*args, **kwargs) -> concurrent.futures.Executor:      try:          return concurrent.futures.ProcessPoolExecutor(*args, **kwargs)      except ImportError:          return concurrent.futures.ThreadPoolExecutor(*args, **kwargs)  ...  # 344  executor = generate_pool(max_workers=os.cpu_count())  ```    Alternatively, could we just run the tasks in series if this issue is detected, rather than using a pool to perform multiple things at once? As much as it is an inconvenience for things to run slowly or inefficiently, I would much prefer that and be able to use this tool at least somewhat on this platform.    Would this be worth considering?    Cheers ?     ;ghost;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.9.2018 18:52;25.9.2018 17:25;26.9.2018 0:04;closed;[];2;525;Add .nox directories to default exclude;https://api.github.com/repos/ambv/black/issues/525;https://github.com/ambv/black/pull/525;[Nox](https://nox.readthedocs.io/) is similar to Tox. It creates a .nox directory that contains virtualenv for testing with different Python versions.;tswast;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.9.2018 19:29;null;29.9.2018 17:35;open;[];5;526;--diff output does not `git apply` cleanly when the diff context includes EOF;https://api.github.com/repos/ambv/black/issues/526;https://github.com/ambv/black/issues/526;"Thanks for making an awesome tool! I ran across this issue while trying to make a script that asks before applying changes. (Obviously I could reapply the changes by running `black` again so it's not too important, but being able to cache the diff so the apply is faster would be nice, and avoid a race condition if someone edits a file in the middle)    Steps to reproduce issue:    ```  # setup  git init black-repro && cd black-repro && echo ""x = '1'"" > foo.py    black --diff . | git apply  # error: patch failed: foo.py:1  # error: foo.py: patch does not apply  ```    The problem is that the diff includes an extra newline at the end compared to what git expects:  ```  black --diff . | sed s/1,2/1,1/g | grep -Ev '^ $' | git apply  # works  ```";benkuhn;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21.9.2018 22:35;25.9.2018 17:51;25.9.2018 17:51;closed;[];2;527;Enforce alignment of and/or in if statements;https://api.github.com/repos/ambv/black/issues/527;https://github.com/ambv/black/issues/527;Operating system: Windows 10  Python version: 3.6  *Black* version: 18.6b4        Thanks for the great tool. I had the following today:    IN    ```                  if (                      virtual_view.select_line(lines - 1).strip() == '' and                      (lines < 2 or virtual_view.select_line(lines - 2).strip() != '')                  ):                      continue  ```    OUT    ```                  if virtual_view.select_line(lines - 1).strip() == '' and (                      lines < 2                      or virtual_view.select_line(lines - 2).strip() != ''                  ):                      ...  ```    That seems an odd decision. I would rather like to see black doing this    ```                  if (                      virtual_view.select_line(lines - 1).strip() == ''                      and (                          lines < 2                           or virtual_view.select_line(lines - 2).strip() != ''                      )                  ):                      ...  ```    so that the logical operators get visually promoted.  ;kaste;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.9.2018 14:19;null;30.9.2018 23:26;open;[];6;528;Offer to choose a certain grammar;https://api.github.com/repos/ambv/black/issues/528;https://github.com/ambv/black/pull/528;Hi, this addresses #423 and #522, based on the suggestion I made in #423.     If you accept, the user would have the choice to force Black to use only one grammar when trying to build the AST - so that syntax errors do match the *intended* source code grammar and are not misleading.    I had to do this via a cli switch only and set process wide - passing it through your config machinery proved hard, could not manage to make it w/o tons of tests failing. But I think process wide is ok: When formatting many files through the subproc scheduler, then syntax errors should not be the problem -this is more for live coding and formatting in the editor. In the vim plugin I just set    ```  black.grammar_chosen.append('py3') after its import, don't need a conditional.  ```    Thanks for Black & hope you == ok with it    ![image](https://user-images.githubusercontent.com/9989548/45928293-8b8f3d80-bf41-11e8-9798-83a3a07aba0b.png)  ;AXGKl;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.9.2018 12:30;26.9.2018 13:32;26.9.2018 13:34;closed;[];6;529;Add underscores to numeric literals with more than 6 digits;https://api.github.com/repos/ambv/black/issues/529;https://github.com/ambv/black/pull/529;;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.9.2018 13:01;25.9.2018 17:01;26.9.2018 11:56;closed;[];1;530;Uppercase digits in hex literals;https://api.github.com/repos/ambv/black/issues/530;https://github.com/ambv/black/pull/530;;zsol;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.9.2018 13:21;25.9.2018 17:47;27.9.2018 16:03;closed;[];3;531;Black never uses \;https://api.github.com/repos/ambv/black/issues/531;https://github.com/ambv/black/issues/531;Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: Darwin Kernel Version 17.2.0  Python version: 3.7.0  *Black* version: 18.6b4  Happens on master: yes    ```          train_x = list(swml_embedding.encode(examples)) \                    + list(swml_embedding.encode(neutral))  ```  is encoded by `black` as  ```          train_x = list(swml_embedding.encode(examples)) + list(              swml_embedding.encode(neutral)          )  ```  This formatting makes it look like something different is happening in the second `list` than in the first one.    The problem happens because black only makes linebreaks inside parenthesis, and doesn't take advantage of the python backslash.    An alternative formatting would be  ```          train_x = (list(swml_embedding.encode(examples))                      + list(swml_embedding.encode(neutral)))  ```;thomasahle;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.9.2018 8:09;26.9.2018 18:43;26.9.2018 18:52;closed;[];4;532;Special comments formatted into normal comments breaks pweave, spyder IDE;https://api.github.com/repos/ambv/black/issues/532;https://github.com/ambv/black/issues/532;  Operating system: OS X  Python version: 3  *Black* version:18.6b4  Does also happen on master: yes    Literate programming and other types of sw use special comments to interleave text and code. In the case of pweave it's #', for Spyder IDE #%%. Black adds a space after the #, thus preventing the use of either. I know how to use #fmt: off, but they quickly pollute the ouput. If there any workaround? Thanks.;piccolbo;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.9.2018 8:50;3.10.2018 15:31;3.10.2018 15:31;closed;[];2;533;Added a fallback to using a ThreadPoolExecutor;https://api.github.com/repos/ambv/black/issues/533;https://github.com/ambv/black/pull/533;This enables devices lacking a hardware semaphore implementation such as some Android Devices (looking at the OnePlus3T here!) to still use black.    Fixes #524 ;ghost;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.9.2018 10:49;26.9.2018 11:54;26.9.2018 11:55;closed;[];2;534;blackd ignore pyproject;https://api.github.com/repos/ambv/black/issues/534;https://github.com/ambv/black/pull/534;I added it because, it was a question I'was  asking myself.;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.9.2018 11:21;26.9.2018 14:37;26.9.2018 14:37;closed;[];2;535;Formatting does not seem to be complying to max line width;https://api.github.com/repos/ambv/black/issues/535;https://github.com/ambv/black/issues/535;Hi everyone!    First, here is the requested information about my system:    Operating system: Ubuntu 18.04  Python version: 3.6.5  *Black* version: 18.6b4  Does also happen on master: didn't manage to try it, the website (https://black.now.sh/?version=master) keeps showing the loading symbol    So, I seem to have found an issue with regards to complying to max line width. The code that I'm trying to format is:    ```      column_rename_map: Dict[str, str] = {          OriginalTicketFields.TICKET_ID.value: TESTicketFields.TICKET_ID.value,          OriginalTicketFields.CREATED_AT.value: TESTicketFields.CREATED_AT.value,          OriginalTicketFields.DESCRIPTION.value: TESTicketFields.DESCRIPTION.value,          OriginalTicketFields.ORDER_PLACED.value: TESTicketFields.ORDER_PLACED.value,          OriginalTicketFields.MAIN_CATEGORY.value: TESTicketFields.MAIN_CATEGORY.value,          OriginalTicketFields.SUBCATEGORY.value: TESTicketFields.SUBCATEGORY.value,          OriginalTicketFields.PRIORITY.value: TESTicketFields.PRIORITY.value,          OriginalTicketFields.REQUESTER_ID.value: TESTicketFields.REQUESTER_ID.value,          OriginalTicketFields.STATE.value: TESTicketFields.STATE.value,          OriginalTicketFields.SUBJECT.value: TESTicketFields.SUBJECT.value,          OriginalTicketFields.TAGS.value: TESTicketFields.TAGS.value,          OriginalTicketFields.CREATED_DAY.value: TESTicketFields.CREATED_DAY.value,          OriginalTicketFields.SOLVED_AT.value: TESTicketFields.SOLVED_AT.value,          OriginalTicketFields.SOLVED_DAY.value: TESTicketFields.SOLVED_DAY.value,          OriginalTicketFields.STATUS.value: TESTicketFields.STATUS.value,          OriginalTicketFields.ASSIGNEE.value: TESTicketFields.ASSIGNEE.value,          OriginalTicketFields.AGENT.value: TESTicketFields.AGENT.value,          OriginalTicketFields.SUPERVISOR.value: TESTicketFields.SUPERVISOR.value,          OriginalTicketFields.OFFICE.value: TESTicketFields.OFFICE.value,          OriginalTicketFields.REQUESTER.value: TESTicketFields.REQUESTER.value,          OriginalTicketFields.REQUESTER_EMAIL.value: TESTicketFields.REQUESTER_EMAIL.value,          OriginalTicketFields.SUBMITTER.value: TESTicketFields.SUBMITTER.value,          OriginalTicketFields.SUBMITTER_EMAIL.value: TESTicketFields.SUBMITTER_EMAIL.value,          OriginalTicketFields.CATEGORY.value: TESTicketFields.CATEGORY.value,          OriginalTicketFields.CUSTOMER_CATEGORY.value: TESTicketFields.CUSTOMER_CATEGORY.value,          OriginalTicketFields.ORDER_CODE.value: TESTicketFields.ORDER_CODE.value,          OriginalTicketFields.LANGUAGE.value: TESTicketFields.LANGUAGE.value,          OriginalTicketFields.NEW_SUBCATEGORY.value: TESTicketFields.NEW_SUBCATEGORY.value,          OriginalTicketFields.NEW_MAIN_CATEGORY.value: TESTicketFields.NEW_MAIN_CATEGORY.value,      }  ```    When I run black over this code, either with the default max line width of 88 or with it set to 80, it is left as it is, i.e., without complying to the set max line width.    If I use YAPF instead to format the same piece of code, it gets reformatted to:    ```      column_rename_map Dict[str, str] = {          OriginalTicketFields.TICKET_ID.value:          TESTicketFields.TICKET_ID.value,          OriginalTicketFields.CREATED_AT.value   TESTicketFields.CREATED_AT.value,          OriginalTicketFields.DESCRIPTION.value   TESTicketFields.DESCRIPTION.value,          OriginalTicketFields.ORDER_PLACED.value   TESTicketFields.ORDER_PLACED.value,          OriginalTicketFields.MAIN_CATEGORY.value   TESTicketFields.MAIN_CATEGORY.value,          OriginalTicketFields.SUBCATEGORY.value   TESTicketFields.SUBCATEGORY.value,          OriginalTicketFields.PRIORITY.value   TESTicketFields.PRIORITY.value,          OriginalTicketFields.REQUESTER_ID.value   TESTicketFields.REQUESTER_ID.value,          OriginalTicketFields.STATE.value   TESTicketFields.STATE.value,          OriginalTicketFields.SUBJECT.value   TESTicketFields.SUBJECT.value,          OriginalTicketFields.TAGS.value   TESTicketFields.TAGS.value,          OriginalTicketFields.CREATED_DAY.value   TESTicketFields.CREATED_DAY.value,          OriginalTicketFields.SOLVED_AT.value   TESTicketFields.SOLVED_AT.value,          OriginalTicketFields.SOLVED_DAY.value   TESTicketFields.SOLVED_DAY.value,          OriginalTicketFields.STATUS.value   TESTicketFields.STATUS.value,          OriginalTicketFields.ASSIGNEE.value   TESTicketFields.ASSIGNEE.value,          OriginalTicketFields.AGENT.value   TESTicketFields.AGENT.value,          OriginalTicketFields.SUPERVISOR.value   TESTicketFields.SUPERVISOR.value,          OriginalTicketFields.OFFICE.value   TESTicketFields.OFFICE.value,          OriginalTicketFields.REQUESTER.value   TESTicketFields.REQUESTER.value,          OriginalTicketFields.REQUESTER_EMAIL.value   TESTicketFields.REQUESTER_EMAIL.value,          OriginalTicketFields.SUBMITTER.value   TESTicketFields.SUBMITTER.value,          OriginalTicketFields.SUBMITTER_EMAIL.value   TESTicketFields.SUBMITTER_EMAIL.value,          OriginalTicketFields.CATEGORY.value   TESTicketFields.CATEGORY.value,          OriginalTicketFields.CUSTOMER_CATEGORY.value   TESTicketFields.CUSTOMER_CATEGORY.value,          OriginalTicketFields.ORDER_CODE.value   TESTicketFields.ORDER_CODE.value,          OriginalTicketFields.LANGUAGE.value   TESTicketFields.LANGUAGE.value,          OriginalTicketFields.NEW_SUBCATEGORY.value   TESTicketFields.NEW_SUBCATEGORY.value,          OriginalTicketFields.NEW_MAIN_CATEGORY.value   TESTicketFields.NEW_MAIN_CATEGORY.value,      }  ```    Which is not pretty at all, but is compliant with the max line width.    Is there some kind of configuration that I can use to force compliance with the max line width?    Thanks!;ptresende;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
26.9.2018 14:45;26.9.2018 14:47;26.9.2018 14:50;closed;[];2;536;Document that blackd ignores pyproject.toml;https://api.github.com/repos/ambv/black/issues/536;https://github.com/ambv/black/pull/536;;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.9.2018 9:43;28.9.2018 0:47;28.9.2018 0:47;closed;[];1;537;add --skip-numeric-underscore-normalization in readme;https://api.github.com/repos/ambv/black/issues/537;https://github.com/ambv/black/pull/537;;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.9.2018 15:08;null;28.9.2018 9:49;open;[design, enhancement, help wanted];3;538;Allow no space between operator **;https://api.github.com/repos/ambv/black/issues/538;https://github.com/ambv/black/issues/538;This is a follow up of issue https://github.com/ambv/black/issues/148 (see in particular https://github.com/ambv/black/issues/148#issuecomment-384184113 by @njsmith)    Black still adds spaces around the operator `**`.    It is really bad for readability of math formula and it is not consistent with PEP 8 (https://www.python.org/dev/peps/pep-0008/#other-recommendations).    This operator has a so high precedence (https://docs.python.org/3/reference/expressions.html#operator-precedence) so I think it should be allowed not to put spaces around it.    I know that we can use   ```  # fmt: off  t = a**2 + b**3  # fmt: on  ```  for math, but many times, the spaces around `**` are the worst problems, so allowing `a**2` would save us from adding too many `# fmt: off ... # fmt: on`.  ;paugier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.9.2018 16:25;27.9.2018 17:08;27.9.2018 17:08;closed;[];1;539;Update attrs dependency from 17.4.0 please;https://api.github.com/repos/ambv/black/issues/539;https://github.com/ambv/black/issues/539;"Operating system: Arch Linux  Python version: 3.7.0  *Black* version: 18.9b0  Does also happen on master: Yes.    Do note that that there is no issue with latest `attrs==18.2.0`. The following occurs with `attrs==17.4.0`.    ```python  Error detected while processing /home/avmo/.vim/plugged/black/plugin/black.vim:  line  124:  Traceback (most recent call last):    File ""<string>"", line 56, in <module>    File ""/home/avmo/.local/lib/python3.7/site-packages/black.py"", line 39, in <module>      from attr import dataclass, Factory    File ""/home/avmo/.local/lib/python3.7/site-packages/attr/__init__.py"", line 5, in <module>      from . import converters, exceptions, filters, validators    File ""/home/avmo/.local/lib/python3.7/site-packages/attr/filters.py"", line 7, in <module>      from ._compat import isclass    File ""/home/avmo/.local/lib/python3.7/site-packages/attr/_compat.py"", line 139, in <module>      set_closure_cell = make_set_closure_cell()    File ""/home/avmo/.local/lib/python3.7/site-packages/attr/_compat.py"", line 131, in make_set_closure_cell      set_closure_cell = ctypes.pythonapi.PyCell_Set    File ""/usr/lib/python3.7/ctypes/__init__.py"", line 369, in __getattr__      func = self.__getitem__(name)    File ""/usr/lib/python3.7/ctypes/__init__.py"", line 374, in __getitem__      func = self._FuncPtr((name_or_ordinal, self))  AttributeError: vim: undefined symbol: PyCell_Set  ```";ashwinvis;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.9.2018 19:57;27.9.2018 21:28;27.9.2018 21:32;closed;[];6;540;Single number separator is lost when formatting;https://api.github.com/repos/ambv/black/issues/540;https://github.com/ambv/black/issues/540;Operating system:  Python version: 3.7.0  *Black* version: 18.9b0  Does also happen on master: Yes    ---    ```  number = 40_000  ```    is now formatted to:    ```  number = 40000  ```    This changed when upgrading from `18.6b4` to `18.9b0`  ;jacebrowning;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.9.2018 2:06;null;29.9.2018 2:06;open;[];0;541;[RFE] Support gitignore-like include/exclude patterns;https://api.github.com/repos/ambv/black/issues/541;https://github.com/ambv/black/issues/541;When putting `include`/`exclude` rules into `pyproject.toml` file...    1) It's mentally easier to think about each pattern separately and not as a whole regex,    2) Glob/Gitignore-like patterns are easier to read and write, and    3) Using gitignore-like patterns allows easier comparison with the ignore file of the SCM.    Famously, `hg` started with regex patterns for its path patterns, but later enabled glob/gitignore-like patterns. <http://hgbook.red-bean.com/read/file-names-and-pattern-matching.html>    Cargo already accepts a list of glob/gitignore patterns. <https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-exclude-and-include-fields-optional> (We're in the middle of transition from glob patterns to gitignore-like ones. More here: https://github.com/rust-lang/cargo/issues/4268)    (Gitignore patterns are a superset of glob patterns, adding a couple of rules on top of glob.)    With that, I like to propose support for gitignore-like (or at least glob) patterns in Black's `include` and `exclude` entries in `pyproject.toml`.    To keep it backwards-compatible, it can so that then the values are string, the old behavior is preserved (at least for now), and if the value is a list, they are treated as gitignore-like patterns, similar to Cargo.    What do you think?;behnam;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.10.2018 10:52;null;1.10.2018 17:14;open;[bug];3;542;Error during processing import tuples with comments;https://api.github.com/repos/ambv/black/issues/542;https://github.com/ambv/black/issues/542;Operating system: Mac OS High Sierra 10.13.6  Python version: 3.6.6  *Black* version: 18.9b0  Does also happen on master: yes    A short file to cause the error:  ```python  from importlib import (      reload,      # comment  )  ```;eIGato;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.10.2018 11:25;1.10.2018 11:30;1.10.2018 11:30;closed;[];1;543;Strange behavior of list format;https://api.github.com/repos/ambv/black/issues/543;https://github.com/ambv/black/issues/543;**Black https://github.com/ambv/black/commit/f1ac6f**    [Playground link](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AE7AHVdAD2IimZxl1N_WmAyhjrubWlkq4xulgnOgejPREEXprMwKolXRXgKoVEf99bQCdBF4qn72BX4Rp_rJmFXTOcnc2TVGrVLSy_yFcJRpSzi47vRtQItBBh1glaYAbmQ0r_zKTR7tALlk6pUtO3RrAZiTE5kh2MfoAAAAAAsXbk4Y9VQJAABkQG8AgAAxx0vfLHEZ_sCAAAAAARZWg==)    ## Options    `--line-length=60`    ## Input    ```python  m = [      [narray[0][0]], 0, 0, 1,      [0, narray[1][0]], 0, 1,      [0, 0, narray[0][0]], 1,      [0, 0, 0, 1],  ]  m = [      [1, 0, 0, narray[0][0]],      [0, 1, 0, narray[1][0]],      [0, 0, 1, narray[2][0]],      [0, 0, 0, 1],  ]    ```    ## Output    ```python  m = [      [narray[0][0]],      0,      0,      1,      [0, narray[1][0]],      0,      1,      [0, 0, narray[0][0]],      1,      [0, 0, 0, 1],  ]  m = [      [1, 0, 0, narray[0][0]],      [0, 1, 0, narray[1][0]],      [0, 0, 1, narray[2][0]],      [0, 0, 0, 1],  ]    ```    ## Expected    ```python  m = [      [narray[0][0]], 0, 0, 1,      [0, narray[1][0]], 0, 1,      [0, 0, narray[0][0]], 1,      [0, 0, 0, 1],  ]  m = [      [1, 0, 0, narray[0][0]],      [0, 1, 0, narray[1][0]],      [0, 0, 1, narray[2][0]],      [0, 0, 0, 1],  ]  ```;tvytlx;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.10.2018 12:18;1.10.2018 17:43;1.10.2018 17:43;closed;[];2;544;[Critical] Black violates pep8 (E203);https://api.github.com/repos/ambv/black/issues/544;https://github.com/ambv/black/issues/544;Operating system: MacOS  Python version: 3.6  *Black* version: 18.9b0  Does also happen on master: yes    Black is violating pep8 rules while formatting, it's introducing spaces in list slices:    ```  x/api.py:28:47: E203 whitespace before ':'  y/api.py:28:52: E203 whitespace before ':'  2     E203 whitespace before ':'  ```  - Original code:  `l = [i.name for i in x[_offset: _offset + _limit]]`    - Transformed code:  `l = [i.name for i in x[_offset : _offset + _limit]]`  ;DhiaTN;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.10.2018 14:17;null;1.10.2018 17:46;open;[];1;545;Failing to dedent closing docstring triple-quotes;https://api.github.com/repos/ambv/black/issues/545;https://github.com/ambv/black/issues/545;"I have a function that due to copy-pasting has an extra level of indentation, Black fixes this however it is failing to dedent the closing triple-quote of multi-line docstrings:    ```  def func():          """"""A multi-line docstring.                    Does nothing.          """"""          pass  ```  results in this:  ```diff   def func():  -        """"""A multi-line docstring.  +    """"""A multi-line docstring.             Does nothing.           """"""  -        pass  +    pass  ```    Likely #144 plays a part here with regards the docstring text indentation.    Operating system: Linux  Python version: 3.6  *Black* version: 18.9b0  Does also happen on master: yes";cas--;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.10.2018 9:35;null;3.10.2018 21:46;open;[];3;546;Mention in docs that int formatting only adds underscores above 10000;https://api.github.com/repos/ambv/black/issues/546;https://github.com/ambv/black/issues/546;Just spent a while looking for this info to give some teammates peace of mind that we won't start seeing 2_018, 1_024, and so on. I had to read the code to find out when underscores are added, which is not catastrophic, but not ideal either ;underyx;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.10.2018 18:38;8.11.2018 11:54;8.11.2018 11:54;closed;[];5;547;Update isort config to use_parentheses instead of combine_as_imports;https://api.github.com/repos/ambv/black/issues/547;https://github.com/ambv/black/pull/547;The `combine_as_imports=True` modifies isort style as a side-effect and was not the intended purpose of the suggested change in #250. The problem was that isort was actually replacing the parens with backslash and using `combine_as_imports=True` happened to also produce the same result.    The actual setting should be `use_parentheses` as this tells isort to use parenthesis for line continuation instead of \ for lines over the allotted line length limit and matches precisely what black is outputting.;cas--;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2.10.2018 22:33;null;4.10.2018 17:10;open;[];1;548;Black should remove unnecessary outer parentheses around function arguments;https://api.github.com/repos/ambv/black/issues/548;https://github.com/ambv/black/issues/548;Operating system: **Fedora release 27**  Python version: **Python 3.6.6**  *Black* version: **18.9b0**  Does also happen on master: **Yes**    Input:    ```py  print((1))  ```    Expected change:    ```py  print(1)  ```    Actual: file left unchanged;jdufresne;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.10.2018 14:19;null;26.10.2018 23:23;open;[];9;549;Do something about the --skip-numeric-underscore-normalization option;https://api.github.com/repos/ambv/black/issues/549;https://github.com/ambv/black/issues/549;Hey! As I understand, this option was added to keep the possibility to write 'localized' code, respecting the developers' regional numeric format.    ### Localized code formatting    I disagree with the premise that this is something to be considered. Even though my local date format is not ISO, I'm using `YYYY-MM-DD` in code. Even though my local format marks decimal places with a comma, I'm fine with writing `3.14` instead of `3,14`.    ### The black philosophy    The README makes some promises:     >Black is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, Black gives you speed, determinism, […]. You will save time and mental energy for more important matters.    >Blackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead.    Adding options like this, while having only a minor effect, goes directly against these promises. Each option is a new discussion to have. Each option is something new to discover: consider if I want to make a quick edit to a constant in someone's blackened open source project on the github.com in-browser editor. I know how to write black-compliant code, so I can risk not cloning the project and committing something without running black. But now that this option is there, I either need to look for the project's config first to see their preference for literals, or guess and risk a CI failure wasting my time.    And yes, I honestly believe this *is* a slippery slope.    You might say, well, that's okay, everyone using black would just use the defaults unless they are in an aforementioned non-three digit grouping region, right? Well…    ### Developers are a lost cause    We had a team at my company bump the black version a couple days ago. I glanced at their project today and was horrified to find `skip-numeric-underscore-normalization = true` in their config. Apparently they saw the option in the changelog and     - held a poll on whether to keep this on or off  - got a 50-50% split for/against in the results  - said 'we may remove the option if there is consensus between our developers'    Really, developers are a lost cause when it comes to code style arguments. Just don't let them have them, please.    ### Possible fixes    1. Remove the `--skip-numeric-underscore-normalization` option.  1. Remove the whole feature of numeric-underscore-normalization;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.10.2018 19:22;1.11.2018 10:22;1.11.2018 10:22;closed;[];4;550;Deploy on ambv/black repo;https://api.github.com/repos/ambv/black/issues/550;https://github.com/ambv/black/pull/550;;SethMichaelLarson;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.10.2018 12:50;null;10.10.2018 16:18;open;[];3;551;Flake8-commas support;https://api.github.com/repos/ambv/black/issues/551;https://github.com/ambv/black/issues/551;Is there any plans to conform [flake8-commas](https://github.com/PyCQA/flake8-commas)?;yutkin;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.10.2018 21:56;9.10.2018 5:49;9.10.2018 5:49;closed;[];1;552;Need a proper release (not a pre-release);https://api.github.com/repos/ambv/black/issues/552;https://github.com/ambv/black/issues/552;"For one project, I use tox-pipenv and one package (fluidpythran) depends on Black.    Pipenv complains loudly of the fact that there is only pre-release of Black and fails because of that.  Since I used pipenv through tox, I can't add the --pre option. Anyway, it would be better not to have it...    A simple solution to this problem would be to have a proper release of Black, with a version without ""a"" or ""b""...    Pipenv's complain:    ```  Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.    You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.    Hint: try $ pipenv lock --pre if it is a pre-release dependency.  Could not find a version that matches black (from -r /tmp/pipenv-c310e9_t-requirements/pipenv-cysm1vet-constraints.txt (line 4))  Skipped pre-versions: 18.3a0, 18.3a0, 18.3a1, 18.3a1, 18.3a2, 18.3a2, 18.3a3, 18.3a3, 18.3a4, 18.3a4, 18.4a0, 18.4a0, 18.4a1, 18.4a1, 18.4a2, 18.4a2, 18.4a3, 18.4a3, 18.4a4, 18.4a4, 18.5b0, 18.5b0, 18.5b1, 18.5b1, 18.6b0, 18.6b0, 18.6b1, 18.6b1, 18.6b2, 18.6b2, 18.6b3, 18.6b3, 18.6b4, 18.6b4, 18.9b0, 18.9b0  There are incompatible versions in the resolved dependencies.  ```";paugier;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.10.2018 9:13;29.10.2018 11:17;29.10.2018 11:17;closed;[];3;553;set entry to black instead of python3 -m black;https://api.github.com/repos/ambv/black/issues/553;https://github.com/ambv/black/pull/553;On systems where python3.6 is not default python3  (still many linux distro) running `python3 -m black` will faill, trying using python 3.5 or whathever.  ;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9.10.2018 19:10;9.10.2018 22:11;9.10.2018 22:11;closed;[];2;554;Explicit # fmt: on/off indentation level;https://api.github.com/repos/ambv/black/issues/554;https://github.com/ambv/black/pull/554;;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.10.2018 18:20;10.10.2018 22:16;11.10.2018 8:57;closed;[];3;556;Multiline strings have inconsistent quoting;https://api.github.com/repos/ambv/black/issues/556;https://github.com/ambv/black/issues/556;"Hi!    I've had this code:  ```  s = (      'psql $DSN -c ""\copy {table}  '      'FROM STDIN DELIMITER \',\' CSV""'  )  ```    And *Black* gave me this:  ```python  s = (      'psql $DSN -c ""\copy {table}  '      ""FROM STDIN DELIMITER ',' CSV\""""  )  ```    I don't like how on the first line there are single qoutes, while the second line is double-quoted. Is this intentional? Do you think it should be chaged?    Operating system: `Mac OS`  Python version: `3.7`  *Black* version: `18.9b0`  Does also happen on master: `yes, checked on playground`";WouldYouKindly;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.10.2018 20:13;null;31.10.2018 12:14;open;[];3;557;"Support multiline formatting for ""with"" blocks";https://api.github.com/repos/ambv/black/issues/557;https://github.com/ambv/black/issues/557;Operating system: CentOS  Python version: 3.6.3rc1+  *Black* version: 18.9b0  Does also happen on master: Yes    `with` blocks that contain multiple elements are collapsed into a single line which violates the line length constraint. In this instance, I think we should break them into multiple lines. See the code blocks below which illustrate the current behavior. IMO, I think the input formatting should be preserved.    Input:  ```  import tempfile    with tempfile.TemporaryDirectory() as executor_dir, \          tempfile.TemporaryDirectory() as cache_dir, \          tempfile.TemporaryDirectory() as socket_dir:      pass  ```    Output:  ```  import tempfile    with tempfile.TemporaryDirectory() as executor_dir, tempfile.TemporaryDirectory() as cache_dir, tempfile.TemporaryDirectory() as socket_dir:      pass  ```    ;jeffdunn;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10.10.2018 20:57;null;22.10.2018 19:47;open;[];2;558;Updated README.md with explanation about why black avoids '\';https://api.github.com/repos/ambv/black/issues/558;https://github.com/ambv/black/pull/558;Closes #392 ;sudheer-g;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11.10.2018 8:50;null;11.10.2018 8:50;open;[];0;559;cache stdin;https://api.github.com/repos/ambv/black/issues/559;https://github.com/ambv/black/issues/559;Hi,  Cache actually only only caches files because it stores path, modification time and size.    Formatted string via stdin does not cache the result. blackd not either.    Maybe we could add a cache for  stdin/blackd using hash(str_to_format), lenght and black_options used.    That would permit plugin using format via stdin and blackd  to benefit of the cache system without writting a new one.    Nice day  jimmy  ;jgirardet;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.10.2018 14:59;null;17.10.2018 12:17;open;[bug];2;560;fmt: on does not work when crossing block boundaries;https://api.github.com/repos/ambv/black/issues/560;https://github.com/ambv/black/issues/560;"Operating system: Linux Mint 19.0  Python version: 3.6.6  *Black* version: 18.9b0  Does also happen on master: yes    Simplest reproducer: the following is left unchanged. In fact, it behaves as if `# fmt: off` is true until end of file.  ```python  # fmt: off  if (x and y):  # fmt: on      pass    if (x and y):      pass  ```    The soonest `# fmt: on` takes effect is at end of the indented `if` block.    Ran into this with a series of decorators:  ```python  # fmt: off  @click.command()  @click.option(""-a"", ""--align"",      help=""aligned help texts"")  @click.option(""-b"", ""--big-option"", help=""should stay aligned"")  # fmt: on  def foo(align,    big_option):      pass  ```    Simple workaround for me is keep the formatter commands _within_ a ""block"" - the following works perfectly fine:  ```python  @click.command()  # fmt: off  @click.option(""-a"", ""--align"",      help=""aligned help texts"")  @click.option(""-b"", ""--big-option"", help=""should stay aligned"")  # fmt: on  def foo(align, big_option):      pass  ```";matejcik;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12.10.2018 16:07;29.10.2018 11:07;29.10.2018 11:07;closed;[];2;561;Typo;https://api.github.com/repos/ambv/black/issues/561;https://github.com/ambv/black/pull/561;;tony;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
14.10.2018 3:47;30.10.2018 20:04;30.10.2018 20:04;closed;[];6;562;"Fix ""No module named 'tests.test_black'""";https://api.github.com/repos/ambv/black/issues/562;https://github.com/ambv/black/pull/562;Occurs somewhat sporadically. See the comments[] on the AUR package for  more details.    Thanks to Kaizhao Zhang (zhangkaizhao).    []: https://aur.archlinux.org/packages/python-black/#news;polyzen;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.10.2018 3:54;null;17.10.2018 12:17;open;[bug, comments, invalid code];1;563;Black fails when comment exists inside of list comprehension;https://api.github.com/repos/ambv/black/issues/563;https://github.com/ambv/black/issues/563;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system:  Python version: 3.7  *Black* version: 18.9b0  Does also happen on master: yes    ```  class Something(object):      def acceptable_offers(self, offers):          """"""          Return the offers that are acceptable according to the header.            Any offers that cannot be parsed via          :meth:`.Accept.parse_offer` will be ignored.            :param offers: ``iterable`` of ``str`` media types (media types can                         include media type parameters)          :return: When the header is invalid, or there is no ``Accept`` header                   in the request, all `offers` are considered acceptable, so                   this method returns a list of (media type, qvalue) tuples                   where each offer in `offers` is paired with the qvalue of 1.0,                   in the same order as in `offers`.          """"""          return [              (offers[offer_index], 1.0)              for offer_index, _              # avoid returning any offers that don't match the grammar so              # that the return values here are consistent with what would be              # returned in AcceptValidHeader              in self._parse_and_normalize_offers(offers)          ]  ```    Is mis-formatted as:    ```  class Something(object):      def acceptable_offers(self, offers):          """"""          Return the offers that are acceptable according to the header.            Any offers that cannot be parsed via          :meth:`.Accept.parse_offer` will be ignored.            :param offers: ``iterable`` of ``str`` media types (media types can                         include media type parameters)          :return: When the header is invalid, or there is no ``Accept`` header                   in the request, all `offers` are considered acceptable, so                   this method returns a list of (media type, qvalue) tuples                   where each offer in `offers` is paired with the qvalue of 1.0,                   in the same order as in `offers`.          """"""          return [              (offers[offer_index], 1.0)              for offer_index, _# avoid returning any offers that don't match the grammar so# that the return values here are consistent with what would be# returned in AcceptValidHeader in self._parse_and_normalize_offers(                  offers              )          ]  ```    Which is not valid Python:    ```  error: cannot format /Users/xistence/Projects/Pylons/webob/src/webob/acceptparse.py: INTERNAL ERROR: Black produced invalid code: invalid syntax (<unknown>, line 1346). Please report a bug on https://github.com/ambv/black/issues.  This invalid output might be helpful: /var/folders/jy/3csvdt_s3ys8sdn_123w89t00000gp/T/blk_ogrf5m4o.log  ```    Moving the inline comment above the return statement works. This allows me to run black across the WebOb source code without issues.";bertjwregeer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.10.2018 14:28;null;15.10.2018 15:14;open;[];1;564;ValueError: need at most 63 handles, got a sequence of length 65;https://api.github.com/repos/ambv/black/issues/564;https://github.com/ambv/black/issues/564;"Black runs just fine with a single file or a folder without subfolders.  However, when specifying a folder with subfolders I'm getting the errors below.    Since I don't have another server with the same Windows version, I can't exclude a Windows installation issue, even if other python scripts and tools are working fine.    ### Python 3.7  ```  Exception in thread QueueManagerThread:  Traceback (most recent call last):    File ""c:\python37\lib\threading.py"", line 917, in _bootstrap_inner      self.run()    File ""c:\python37\lib\threading.py"", line 865, in run      self._target(*self._args, **self._kwargs)    File ""c:\python37\lib\concurrent\futures\process.py"", line 354, in _queue_management_worker      ready = wait(readers + worker_sentinels)    File ""c:\python37\lib\multiprocessing\connection.py"", line 868, in wait      ready_handles = _exhaustive_wait(waithandle_to_obj.keys(), timeout)    File ""c:\python37\lib\multiprocessing\connection.py"", line 800, in _exhaustive_wait      res = _winapi.WaitForMultipleObjects(L, False, timeout)  ValueError: need at most 63 handles, got a sequence of length 65  ```    ### Python 3.6  ```  Exception in thread Thread-1:  Traceback (most recent call last):    File ""c:\python36\lib\threading.py"", line 916, in _bootstrap_inner      self.run()    File ""c:\python36\lib\threading.py"", line 864, in run      self._target(*self._args, **self._kwargs)    File ""c:\python36\lib\concurrent\futures\process.py"", line 270, in _queue_management_worker      ready = wait([reader] + sentinels)    File ""c:\python36\lib\multiprocessing\connection.py"", line 859, in wait      ready_handles = _exhaustive_wait(waithandle_to_obj.keys(), timeout)    File ""c:\python36\lib\multiprocessing\connection.py"", line 791, in _exhaustive_wait      res = _winapi.WaitForMultipleObjects(L, False, timeout)  ValueError: need at most 63 handles, got a sequence of length 64  ```    Operating system: Windows Server 2012 R2 (x64)  Python version: 3.6.6, 3.7.0, 3.7.1rc2 (x64)  *Black* version: 18.6b4, 18.9b0  Does also happen on master: Yes";alexandrul;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15.10.2018 16:03;15.10.2018 16:34;15.10.2018 16:34;closed;[];1;565;Spaces before colon cause pycodestyle to fail;https://api.github.com/repos/ambv/black/issues/565;https://github.com/ambv/black/issues/565;Operating system: Ubuntu 18.04  Python version: 3.6.5  *Black* version: 18.9b0  Does also happen on master: yes    Here is a diff when running black on following example:  ```diff  -    commits_data = commits[start_revision - 1: end_revision]  +    commits_data = commits[start_revision - 1 : end_revision]  ```  This causes latest version of pycodestyle (2.4.0) to fail with message `E203 whitespace before ':'`    ;StylishTriangles;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.10.2018 1:05;null;17.10.2018 20:36;open;[];2;566;Running from the command-line still has issues with Click;https://api.github.com/repos/ambv/black/issues/566;https://github.com/ambv/black/issues/566;"I've just run into the same problem with PyCharm and Click that was reported in issue #277:    ```  RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment.  ```  I think there is still a problem and I believe the problem may be that the generated command line script _only_ calls the `main()` function from `black.py` (see the entry point on line 60 in `setup.py`: `black=black:main`).     So, after running `pip install black`, the generated command-line script looks like this:    ```  #!/usr/local/opt/python/bin/python3.6    # -*- coding: utf-8 -*-  import re  import sys    from black import main    if __name__ == '__main__':      sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])      sys.exit(main())  ```    If you try to use this script to invoke black (e.g. as the command for an ""external tool"" in PyCharm), the `patch_click()` function won't be called and you'll get the original error reported in #277.     To verify, I edited this script by hand, like so:    ```  #!/usr/local/opt/python/bin/python3.6    # -*- coding: utf-8 -*-  import re  import sys    from black import main, patch_click    if __name__ == '__main__':      sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])      patch_click()      sys.exit(main())  ```  This appears to work, but is probably is not the best way to permanently fix the issue.     One possible fix (although I don't claim that this is the best approach, especially since I'm not sure how it might interact with `blackd`), would be to create a new `main` that can be used as the entry point for the cli script. Maybe something like this at the end of `black.py`:    ```  def patched_main():      patch_click()      main()    if __name__ == ""__main__"":      patched_main()  ````  along with this change in `setup.py`:  ```  entry_points={""console_scripts"": [""black=black:patched_main"", ""blackd=blackd:main [d]""]},  ```  Anyway, as I said, I don't know if this is a good solution. I mostly wanted to post it as a means of clarifying what I think the problem is.     Thank you for your time and for creating this awesome tool!  ";wooters;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
16.10.2018 19:23;null;16.10.2018 20:56;open;[enhancement];1;567;Leading/trailing whitespace in f-string;https://api.github.com/repos/ambv/black/issues/567;https://github.com/ambv/black/issues/567;"Operating system: macOS 10.13.6   Python version: 3.7.0  *Black* version: 18.9b0  Does also happen on master: [yes](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ACBAF9dAD2IimZxl1N_WmOQpqkfeSlyUArvIPL_VTFrmeVYZp1XFKnlwlcOEvW_JBzFW5TNX49gxuvkPZdSiQlgf1X3nVA9S-VIupgh_W7IxnIP72fRuUftYw_npiukzwIa9DRAAAAVwN-B7KCn-QABe4IBAAAASK0q0bHEZ_sCAAAAAARZWg==)    ---    Given this example    ```python  prefix = ""foo""  print(f""{ prefix        }.bar"")  ```    I was expecting `black` to trim the whitespace inside the f-string braces, but `black` leaves the file as-is.    Is this a bug or expected?";mxr;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.10.2018 7:36;17.10.2018 7:56;17.10.2018 7:56;closed;[];2;568;pyproject.toml not read by vim plugin;https://api.github.com/repos/ambv/black/issues/568;https://github.com/ambv/black/issues/568;Operating system: Arch linux  Python version: 3.7.0  *Black* version: 18.9b0    We have a django repository with the following pyproject.toml file:  ```toml  [tool.black]  line-length = 79  skip-string-normalization = true  include = '\.py?$'  exclude = '''  /(      \.git    | keys    | templates    | dist    | keys      # The following are specific to Black, you probably don't want those.    | blib2to3    | tests/data  )/  '''  ```    In addition, I installed the vim plugin with the following conf in .vimrc  ```vim  Plug 'ambv/black', {'for': 'python'}  autocmd BufWritePre *.py execute ':Black'  ```    Now, by default black will set a max-length of 88 and use double-quotes on python files, which is fine as a default. But our project specifies a line-length of 79 and to skip string normalization (ie keep single quote strings as is), yet when saving my files all single-quote strings are converted back to double quotes.    Searching inside the [plugin file](https://github.com/ambv/black/blob/master/plugin/black.vim), I cannot find any mention of pyproject.toml      And the [README](https://github.com/ambv/black/#where-black-looks-for-the-file) says:    > Where Black looks for the file  > By default Black looks for pyproject.toml starting from the common base directory of all files and directories passed on the command line. If it's not there, it looks in parent directories. It stops looking when it finds the file, or a .git directory, or a .hg directory, or the root of the file system, whichever comes first.      How can I get my project's pyproject.toml configuration to be prioritized when editing said project's files from vim ?;Fandekasp;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.10.2018 12:42;null;3.11.2018 19:13;open;[bug, invalid code];1;569;Invalid code after indented `# fmt: off`;https://api.github.com/repos/ambv/black/issues/569;https://github.com/ambv/black/issues/569;Input:  ```py3  def x():      # fmt: off      return    def y():      return  ```    Invalid code produced:  ```py3  def x():      # fmt: off      return        def y():          return  ```;ambv;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.10.2018 18:32;null;5.11.2018 21:28;open;[];1;570;Incorrectly formats `textwrap.dedent`;https://api.github.com/repos/ambv/black/issues/570;https://github.com/ambv/black/issues/570;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: OSX  Python version: 3.4, 3.5, 3.6  *Black* version: 18.9b0  Does also happen on master: yes    * given (I'm actually pretty happy with this)  ```python3              dedent(""""""                  Some text that                  is split across multiple lines.              """""")  ```  * after black  ```python3              dedent(                  """"""              Some text that              is split across multiple lines.          """"""              )  ```  * after black (on the playground w/o supporting indents)  ```python3  dedent(      """"""                  Some text that                  is split across multiple lines.              """"""  )  ```  * Minimal expected  ```python3              dedent(                  """"""                      Some text that                      is split across multiple lines.                  """"""              )  ```";muppetjones;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.10.2018 21:04;null;17.10.2018 21:06;open;[];0;571;Strange formatting of  fluent interface;https://api.github.com/repos/ambv/black/issues/571;https://github.com/ambv/black/issues/571;Operating system: Mac   Python version: 3.7  *Black* version: 18.9b0  Does also happen on master:     Following on https://twitter.com/llanga/status/1052631100290420736    I have a code which uses `yarl.URL`  ```python  a = str(      my_very_very_very_long_url_name      .with_user(and_very_long_username)      .with_password(and_very_long_password)  )  ```    *Black* formats it like this  ```python  a = str(      my_very_very_very_long_url_name.with_user(and_very_long_username).with_password(          and_very_long_password      )  )  ```    I understand that first call is not on a new line because of [reasons](https://github.com/ambv/black/issues/67#issuecomment-389681164), but the rest still looks quite odd, especially considering that when there are three calls in the chain, *Black* produces    ```python  a = str(      my_very_very_very_long_url_name.with_user(and_very_long_username)      .with_user(and_very_long_username)      .with_password(and_very_long_password)  )  ```;WouldYouKindly;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17.10.2018 23:54;29.10.2018 11:10;29.10.2018 11:10;closed;[];2;572;patch main to ensure click_patch() gets called;https://api.github.com/repos/ambv/black/issues/572;https://github.com/ambv/black/pull/572;The `patch_click()` function wasn't called when black was run as a command-line tool. This PR creates a new main function (`patched_main()`) that contains both calls to `patch_click()` and `main()`.    ;wooters;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.10.2018 0:18;18.10.2018 6:53;18.10.2018 6:53;closed;[];2;573;Black should re-order imports like isort;https://api.github.com/repos/ambv/black/issues/573;https://github.com/ambv/black/issues/573;This is more of a general feature request than anything else.    I'd love it if black would also re-order imports much like isort while it is reformatting a file.    For example, in Pyramid we have a long list of imports like this:    ```  from pyramid.asset import resolve_asset_spec    from pyramid.authorization import ACLAuthorizationPolicy    from pyramid.compat import text_, reraise, string_types    from pyramid.events import ApplicationCreated    from pyramid.exceptions import (      ConfigurationConflictError,      ConfigurationError,      ConfigurationExecutionError,  )    from pyramid.httpexceptions import default_exceptionresponse_view    from pyramid.path import caller_package, package_of    from pyramid.registry import Introspectable, Introspector, Registry, undefer    from pyramid.router import Router    from pyramid.settings import aslist    from pyramid.threadlocal import manager    from pyramid.util import WeakOrderedSet, object_description    from pyramid.config.util import ActionInfo, PredicateList, action_method, not_    from pyramid.config.adapters import AdaptersConfiguratorMixin  from pyramid.config.assets import AssetsConfiguratorMixin  from pyramid.config.factories import FactoriesConfiguratorMixin  from pyramid.config.i18n import I18NConfiguratorMixin  from pyramid.config.rendering import RenderingConfiguratorMixin  from pyramid.config.routes import RoutesConfiguratorMixin  from pyramid.config.security import SecurityConfiguratorMixin  from pyramid.config.settings import SettingsConfiguratorMixin  from pyramid.config.testing import TestingConfiguratorMixin  from pyramid.config.tweens import TweensConfiguratorMixin  from pyramid.config.views import ViewsConfiguratorMixin  from pyramid.config.zca import ZCAConfiguratorMixin    from pyramid.path import DottedNameResolver  ```    However as you may have noticed, this isn't sorted in any way, and has a lot of extra whitespace that is not strictly necessary.    We are currently working on implementing an isort + black to format the code base and sort imports as well, but it would be nice if we could just use black for this.;bertjwregeer;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.10.2018 14:29;null;18.10.2018 14:29;open;[];0;574;Make cache location configurable;https://api.github.com/repos/ambv/black/issues/574;https://github.com/ambv/black/issues/574;hello,    It would be nice to make cache loccation configurable by cli argument.     Here's my use case: We use bitbucket pipelines, and in their workflow I can only cache/restore directories relative to the project's path.    So, if you could please make the cache location configurable, i could add `black --check --cache-dir=./black_cache` on bitbucket pipeline, cache that directory, and make black execution really really fast ?     Thanks, awesome project!!;simion;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.10.2018 14:51;null;8.11.2018 11:32;open;[];1;575;Ha. bug!;https://api.github.com/repos/ambv/black/issues/575;https://github.com/ambv/black/issues/575;"  Operating system: linux ubuntu  Python version: probly something like 2.7  *Black* version: black, version 18.6b4  Does also happen on master: maybe - kidding - probly nope you can care to try it again    # what  `Black produced different code on the second pass of the formatter.`    + also you should not put the dot at the end of the url, it takes you to Kansas otherwise  ```diff  - Please report a bug on https://github.com/ambv/black/issues. This dif...  + Please report a bug on https://github.com/ambv/black/issues . This dif...  ```  ## error cli  ```  error: cannot format /dada/dada.py: INTERNAL ERROR: Black produced different code on the second pass of the formatter.  Please report a bug on https://github.com/ambv/black/issues.  This diff might be helpful: /tmp/blk_2b7b0tid.log  ```    Ran black like: `black /dada/dada.py --check`    # pass  - [first pass](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AEJAJRdAD2IimZxl1N_Wlws4ToyU3Y1WPxi5MQdOS2JmcblG6JdabQRhINTqvM0QBqGnjmcvpj9WUPPWWWmQzH9M6pWUbf5UR1ECZtUPRpbbV1iqthB1eOFJSRfIzlNlxxjUexcOwvbW8n0AbqhTP1e3RSaesjWS4Gefa-mtWNERRzFnlZ8EJxV66W1hoc6tkPdMayO5nmWXDEAbV6ryffwx3sAAbABigIAAClsn2WxxGf7AgAAAAAEWVo=)  - [second pass](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AEgAJpdAD2IimZxl1N_Wlws4SR2T8ZZSNWZVAhexvwHfgl8wEY4AsXj5DLCvOvgVdnEeRGpsLOvxdh_2eVdCuUw2s3Cg4Ipp_nuPJyhS_GtFsQSnNgBjg9q2atRHRMxH_RLM35jcG4tJco_3yNip7BZtvH5KrxmRytkxlHR63unc6nWLM2cYNgWpVSmVV3JgSqaLDYAiX_4hS8JgzqxrwAAAAD33TKJTq2c7QABtgGhAgAAC6f1xLHEZ_sCAAAAAARZWg==)    # Scrambled diff  ```diff  --- source  +++ first pass     @@ -447,25 +499,30 @@                   if self.secret == ""secret"":                       secret = ""secret.secret.secret""                      secret = ""secret""  -                if xxxxxx.yyyyyyy_xxxx.__class__ != ttttt.DobeRobe and hasattr(  # noqa: E721  -                    xxxxxx.yyyyyyy_xxxx.pepepep, ""bbbbbb""  +                if (  +                    xxxxxx.yyyyyyy_xxxx.__class__ != ttttt.DobeRobe  +                    and hasattr(xxxxxx.yyyyyyy_xxxx.pepepep, ""bbbbbb"")  # noqa: E721                   ):                       yyyyyyy_xxxx_name = xxxxxx.yyyyyyy_xxxx.pepepep.bbbbbb                   bobuld = parachute_doris.asdat_asdsa(                       args=(fo_foian(ronalda),),                       buwas=buwas,  --- first pass  +++ second pass  @@ -504,14 +504,13 @@                   if self.secret == ""secret"":                       secret = ""secret.secret.secret""                      secret = ""secret""  -                if (  -                    xxxxxx.yyyyyyy_xxxx.__class__ != ttttt.DobeRobe  -                    and hasattr(xxxxxx.yyyyyyy_xxxx.pepepep, ""bbbbbb"")  # noqa: E721  -                ):  +                if xxxxxx.yyyyyyy_xxxx.__class__ != ttttt.DobeRobe and hasattr(  +                    xxxxxx.yyyyyyy_xxxx.pepepep, ""bbbbbb""  +                ):  # noqa: E721                       yyyyyyy_xxxx_name = ffffff.yyyyyyy_xxxx.pepepep.bbbbbb                   bobuld = parachute_doris.asdat_asdsa(                       args=(fo_foian(ronalda),),                       buwas=buwas,  ```    Sorry for the longpost here's an ascii potato: ()";gr4viton;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.10.2018 16:52;31.10.2018 14:04;31.10.2018 14:04;closed;[];5;576;Trailing comments cause unnecessary optional parentheses;https://api.github.com/repos/ambv/black/issues/576;https://github.com/ambv/black/issues/576;"Operating system: Ubuntu 18.04  Python version: 3.6.6  *Black* version: 18.9b0  Does also happen on master: Yes ([example](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AGNAQpdAD2IimZxl1N_WlkOEznFeHcSXu8_XA3021O0vuVt_K6ldWu6rlv3qq_SsnRojNYej-JXPz8YLdom0rid6__kpPpxbjxFpG8FvONGycZnvluc0YQgVfY9h2-Bfow9GeO1pJok95J6wOcQexjcDybJ9Tm9WapkDUW2vE5mjQ250VRxMltJyEfYiGrkGmWj7puFXYpffhr6dyxOcWwk6y4hEr4kU6VJ02kyWC_8mOm1c-vqYdd-14SZTRQieh-SXClPVKQLQWOQGP0s1JM5TRebaYivUp1aHpFMZr5F1oAEEsQ1aqKKHWJQOI6v2DNwKnwPduHPl4cIPA8F_g1jYxos2Y_Ty9Pds4jE9V72AAAA5M-4Wh1aeF4AAaYCjgMAAB8KEHmxxGf7AgAAAAAEWVo=))  Related issues: #232    ## Reproduction steps    1. Write a line of code  2. Add a long comment at the end of the line of code that exceeds the maximum line length    ```py  foo = 'bar baz bing boo blah'  # This is a long comment that really shouldn't be at the end of a line in the first place, but black leaves it at the end of the line and uses it to decide if the actual expression needs parenthesis even though it doesn't and adding them has a very small chance of fixing the line length  ```    ## Actual behavior    The code to wrap with parenthesis and put an a separate line.    ```py  foo = (      ""bar baz bing boo blah""  )  # This is a long comment that really shouldn't be at the end of a line in the first place, but black leaves it at the end of the line and uses it to decide if the actual expression needs parenthesis even though it doesn't and adding them has a very small chance of fixing the line length  ```    ## Expected behavior    No parenthesis or wrapping. The length of the comment should not be included in the calculation that determines if the code should wrap.    ```py  foo = 'bar baz bing boo blah'  # This is a long comment that really shouldn't be at the end of a line in the first place, but black leaves it at the end of the line and uses it to decide if the actual expression needs parenthesis even though it doesn't and adding them has a very small chance of fixing the line length  ```";deckar01;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18.10.2018 21:22;19.10.2018 7:58;19.10.2018 8:04;closed;[];1;577;Link to Bugbear's documentation;https://api.github.com/repos/ambv/black/issues/577;https://github.com/ambv/black/pull/577;;hugovk;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.10.2018 0:04;null;19.10.2018 0:06;open;[];0;578;Extraneous whitespace during simple line wrapping?;https://api.github.com/repos/ambv/black/issues/578;https://github.com/ambv/black/issues/578;"Operating system:  Python version: 3.6.5  *Black* version: black, version 18.6b4  Does also happen on master: Yes ([Example](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ACxAIddAD2IimZxl1N_Wm_vtYh_HvOeVv7zYL03jVxsZ7-b7-vy3l-NKgonAGjK6F2mDgwSlX2fCXBLIpoKrZzXIVmPQa6bkH8Y6k0ok7hmecVaRgNc_ekYUnbrHz5qmPp00LpibHXHJNiFyzdmpTtgA3LJWDQUpMvuALproslWKaauNcSTuF-VurUPnAAAha9IDd17A6kAAaMBsgEAAAtyBNexxGf7AgAAAAAEWVo=))    Any input like:  ```  {""NAME"": ""django.contrib.auth.password_validation.UserAttributeSimilarityValidatorWonkiness""},  ```    Produces an output of:  ```  {      ""NAME"": ""django.contrib.auth.password_validation.UserAttributeSimilarityValidatorWonkiness""  },  ```    Which is 1 character wider and 2 lines longer than the original.";dwaxe;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19.10.2018 15:37;null;19.10.2018 15:38;open;[];0;579;Black is not being persistent with how to format new line at the beginning of the code block;https://api.github.com/repos/ambv/black/issues/579;https://github.com/ambv/black/issues/579;"Operating system: mac os Mojave  Python version: 3.6  *Black* version: 18.9b0  Does also happen on master: didn't test      Black will allow for such formatting at the same time:    ```  def test_a():        print(""a"")      while 1:            print(""a"")      def test_b():      print(""b"")      while 1:          print(""c"")  ```    I understand that preserving single empty line inside of the code block is allowed for visual code segmentation, however, I can't see how does this feature used for code block beginning helps for readability as it is just not consistent.          ";cypreess;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20.10.2018 8:58;null;1.11.2018 21:12;open;[];4;580;Running automatically Black when a PR is sent;https://api.github.com/repos/ambv/black/issues/580;https://github.com/ambv/black/issues/580;Hello,    I'm currently using Black manually but I think it could be a nice improvement if Black could be run when a PR is sent to a repository.    With Julia language, there is a nice Github bot called [FemtoCleaner](https://github.com/JuliaComputing/FemtoCleaner.jl) which is able to fix automatically depreciation warnings and send PR automatically to Github repositories where this bot is installed.    A similar feature for Python and code formatting with Black could be a nice improvement.    I also wonder if Github Actions https://github.com/features/actions https://www.techworm.net/programming/github-actions-workflow-automating-tool/  couldn't also be used (when available) to provide a nice workflow for code formatting with Black.    Kind regards;scls19fr;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.10.2018 10:21;null;23.10.2018 13:13;open;[];1;581;Black doesn't split the line with string and format();https://api.github.com/repos/ambv/black/issues/581;https://github.com/ambv/black/issues/581;"Operating system: Ubuntu 16.04  Python version: 3.6.6  *Black* version: 18.9b0  Does also happen on master: yes    Length limit: 80    Before Black:  ```python  logging.info(""Evaluating the model with {} of the supplied data held out for tests ({})."".format(sup_opts[""test_split""], len(test)))  ```    After Black:  ```python  logging.info(      ""Evaluating the model with {} of the supplied data held out for tests ({})."".format(          sup_opts[""test_split""], len(test)      )  )  ```  The line with string should be splitted, because it exceeds the line length limit, but it's not. The same effect is for different settings, e.g. 60 chars, 50 chars.";jaklan;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.10.2018 19:17;22.10.2018 19:31;22.10.2018 19:32;closed;[];1;582;setup.py is missing a dependency on attr;https://api.github.com/repos/ambv/black/issues/582;https://github.com/ambv/black/issues/582;Operating system: linux  Python version: 3.7    I see the setup.py file has a dependency on attrs, but the underlying code also depends on attr (mind the 's').    This is an issue in my build system where i must explicitly tell DPKG which packages are needed.   I also suspect that one of the packages is redundant as they probably do similar things.;RoyIacob;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.10.2018 20:03;null;23.10.2018 13:12;open;[];1;583;"Issues with use of protected ""async""";https://api.github.com/repos/ambv/black/issues/583;https://github.com/ambv/black/issues/583;"Operating system: Ubuntu  Python version: 3.7  *Black* version: 18.6b4  Does also happen on master: yes  ---------------------------------------    On Python 3.7, the following snippet does not produce an error    ```python  from zappa.async import task    x = {""a"": ""b""}  ```    but it should. Black is regarding that snippet as already fine, but if it is modified slightly so that it has to do any reformatting, it will break because of the `zappa.async` which is not allowed in 3.7.    ```python  from zappa.async import task    x = {""a"": 'b'}  ```    This fails with     ```  error: cannot format test.py: cannot use --safe with this file";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22.10.2018 20:55;null;22.10.2018 21:25;open;[];3;584;Suggestiong: Line wrap `.method(...` the same as operators like `+`;https://api.github.com/repos/ambv/black/issues/584;https://github.com/ambv/black/issues/584;"I have a suggestion - not sure if this is the best place for it, but here goes:    Consider the following input file:        def foo():          return my_first_really_long_variable_name + my_other_really_long_variable_name_extra_long      def bar():          return ""foo bar qux alp this is a lot of {} in a long {}"".format(something, otherthing)    **Currently**, `black -l79` makes the following choices:        def foo():          return (              my_first_really_long_variable_name              + my_other_really_long_variable_name_extra_long          )                  def bar():          return ""foo bar qux alp this is a lot of {} in a long {}"".format(              something, otherthing          )    I **propose** that it instead do the following:        def bar():          return (              ""foo bar qux alp this is a lot of {} in a long {}""              .format(something, otherthing)          )    I think that this has several benefits, and I think all the arguments in favor of line breaking in front of an operator like `+` instead of after apply here.    When I'm looking over code, I find that the former is more readable because it puts the relationship between the things clearer keeps my eyes from having to do as long of a sweep right followed by the eye-movement equivalent of a carriage return.    (This is only a subtly annoying movement when we're used to tuning it out, but it is less ergonomic for the eyes in general, and is also more acutely felt by people with myopia - the most common cause of myopia is an elongation of the eyeball/eyesocket in one directly, which can be physically *felt* the more severe it gets, as a slight pressure/discomfort sensation that ""sweeps"" across somewhere inside one's head the further one's eyes swivel in their eye sockets.)    In general I find that this leads to less lines being ""jaggedly"" outside of the comfortable circle of visual field focus/detail that it is most ergonomic for the eye to stay within for each movement while scanning.    This is especially prominent when *going over code quickly* - skimming/scanning to *refresh my memory* or *find something* - because in those cases I don't have to do a rigorous, meticulous, character-by-character parse.    **TL";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.10.2018 6:31;5.11.2018 21:33;5.11.2018 21:33;closed;[];7;585;using from within in a Python 2 virtual environment?;https://api.github.com/repos/ambv/black/issues/585;https://github.com/ambv/black/issues/585;We'd love to use `black` in our project, but the Python 3 requirement makes this difficult because our application needs to be able to be developed and run under both 2 and 3.    Any tips for integrating `black` into a version-agnostic development environment?;indirectlylit;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23.10.2018 12:56;23.10.2018 13:05;23.10.2018 13:12;closed;[];2;586;Black removes newlines in code purposefully separated out to improve readability;https://api.github.com/repos/ambv/black/issues/586;https://github.com/ambv/black/issues/586;Operating system: Kubuntu 18.04 x64  Python version: 3.6.6  *Black* version: 18.9b0  Does also happen on master: Yes    Black seems like a great tool, but I have some issues after running it against one of my projects. In function definitions and calls I sometimes introduce newlines just so they don't look too dense, which may happen with longer names (which, I think, can occur when striving for self-descriptability of the code). To illustrate, this:    ```  def __init__(              self,              params: UploaderParams,              kinesis_client,              event_loop: asyncio.AbstractEventLoop):          self._params = params          self._loop: asyncio.AbstractEventLoop = event_loop          self._kinesis_client = kinesis_client          self._buffer = EventsBuffer(              params.events_buffer_params,              stream_name=self._params.kinesis_stream,          )  ```    gets turned into   ```  def __init__(          self, params: UploaderParams, kinesis_client, event_loop: asyncio.AbstractEventLoop      ):          self._params = params          self._loop: asyncio.AbstractEventLoop = event_loop          self._kinesis_client = kinesis_client          self._buffer = EventsBuffer(              params.events_buffer_params, stream_name=self._params.kinesis_stream          )  ```    which in my opinion is harder on the eyes to parse. I didn't use syntax coloring on purpose, cause it's not there always when I'm looking at the code.    Is it possible to make Black leave the newlines I put in there on purpose alone? I know that can use comments to disable the formatting, but for me this just introduces new problems: more visual clutter, having to remember to type the comments.  ;butla;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25.10.2018 13:49;null;8.11.2018 11:55;open;[];1;587;Question on binary operator linebreaking;https://api.github.com/repos/ambv/black/issues/587;https://github.com/ambv/black/issues/587;"Operating system: Linux  Python version: 3.7  *Black* version: Master    I have the following code:  ```py  def test_foo():      espec = ...      assert (          espec.EncodingSpec(""e:{A6D4CFE470214878,FD4466FC,n}"") ==          espec.EncodingSpec(""e:{A6D4CFE470214878,FD4466FC,n}"")      )  ```    This gets reformatted to the following:  ```py  def test_foo():      espec = ...      assert espec.EncodingSpec(""e:{A6D4CFE470214878,FD4466FC,n}"") == espec.EncodingSpec(          ""e:{A6D4CFE470214878,FD4466FC,n}""      )  ```    The latter is the simpler way to linebreak but is IMO a lot less readable (especially in the case of tests). Is there a case to be made to prefer the former style? I believe that's also how prettier prefers linebreaking as it's a lot more readable in general.";jleclanche;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27.10.2018 14:47;29.10.2018 11:09;29.10.2018 11:09;closed;[];3;588;remove dead code;https://api.github.com/repos/ambv/black/issues/588;https://github.com/ambv/black/pull/588;While reading through the source of `black.py`, I found some dead code. As you can see from the diff, I only performed three small changes where I'm pretty sure the unused code is unintentional.    There's also a bunch of functions that don't use some of their parameters, but I didn't know if this was on purpose so that related functions share the same signature. If you want me to remove these unused parameters as well, I'd be happy to do it.    Thanks in advance for your feedback.    ;fkohlgrueber;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29.10.2018 3:57;null;7.11.2018 10:48;open;[];3;589;Feature/issue 414: vim plugin respects pyproject.toml config;https://api.github.com/repos/ambv/black/issues/589;https://github.com/ambv/black/pull/589;This pull request makes the Vim plugin respect pyproject.toml without changing any public interfaces (resolves  #414)    I pulled some functionality out of read_pyproject_toml and put it into 2 separate functions: abspath_pyproject_toml and parse_pyproject_toml. These are used by the vim plugin to find and read a relevant pyproject.toml according the the already-established rules of the project.    ## Regarding tests    I did not yet add tests for this modification;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31.10.2018 14:19;null;31.10.2018 14:19;open;[];0;590;Unreadable output on multiline + .format();https://api.github.com/repos/ambv/black/issues/590;https://github.com/ambv/black/issues/590;"**Black https://github.com/ambv/black/commit/32eed7**    [Playground link](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AC8AIpdAD2IimZxl1N_WmXWfJWiTYL3onpirF3RoIH2SpPUYoWGVKJzWCsgGwzRjUFQ7hSI-4RTPUAJjLTvjlpoqMTo_8vg4lKNKYmJRaDykl_RC3Pyd0cp__ZHeB-QlJeGs2x1zvhy4rkArRyQQkqvKrcf-0-V_i9tEFJnW8N394jguslyuKGxqtrBMHAv0gAAAGbhUbTuTufIAAGmAb0BAADu86rfscRn-wIAAAAABFla)    ## Options    `--line-length=100`  `--py36`    ## Input    ```python  return """"""      An internal error occurred: {}      See logs for full stacktrace.      """""".format(e), 500  ```    ## Output    ```python  return (      """"""      An internal error occurred: {}      See logs for full stacktrace.      """""".format(          e      ),      500,  )    ```    ## Expected  I honestly thing that the original form is more readable in every possible way.";hyperknot;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1.11.2018 11:13;null;1.11.2018 11:13;open;[];0;591;Inline comments can make ugly formatting for actual code;https://api.github.com/repos/ambv/black/issues/591;https://github.com/ambv/black/issues/591;**Black https://github.com/ambv/black/commit/32eed7**    [Playground link](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4ACrAIddAD2IimZxl1N_Wlws4Tc1hqn502mqIwqZTRkvVwQ2asAzzuuDAuVhZPL5csi8MAS7mZZhB6IDF8iulngWiFMmtOJwCDzEi_M9QwXhrO3tvUqKEePUQK1CMa2XmFIrrCivpQSnDHgX6ssMNvtsFF4TpmB5ZHN961KxT-R9-MXxD2CyfOWXOa-SagAA5zzIwsPKedMAAaMBrAEAAKdSwmexxGf7AgAAAAAEWVo=)    ## Options    `--line-length=60`  `--py36`    ## Input    ```python  if now.second < 30:  # Lorem ipsum dolor sit amet, consectetur adipiscing elit.      continue    ```    ## Output    ```python  if (      now.second < 30  ):  # Lorem ipsum dolor sit amet, consectetur adipiscing elit.      continue    ```    ## Expected  The code should not be changed, especially not to this ugly form, based on how long a comment is afterwards.;hyperknot;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3.11.2018 16:53;7.11.2018 2:35;7.11.2018 2:35;closed;[];3;592;Ugly code formatting for multiple contexts;https://api.github.com/repos/ambv/black/issues/592;https://github.com/ambv/black/issues/592;```      with ThreadPoolExecutor(max_workers=n_locations) as executor, tqdm(          total=n_locations      ) as pbar:  ```    This is how black formats my code. It makes it quite unreadable.;louisabraham;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.11.2018 13:10;null;5.11.2018 13:10;open;[];0;593;Black can't parse new Python 3.7 async generator syntax;https://api.github.com/repos/ambv/black/issues/593;https://github.com/ambv/black/issues/593;"Operating system: Linux but unlikely to be OS specific  Python version: 3.7.1  *Black* version: 18.9b0  Does also happen on master: Yes (as of  32eed7d)    The following code (extracted from [test_asyncgen.py](https://github.com/python/cpython/blob/master/Lib/test/test_asyncgen.py) in CPython) is currently not handled by black:    ```python  def make_arange(n):      # This syntax is legal starting with Python 3.7      return (i * 2 for i in range(n) if await wrap(i))  ```    Running black on it results in:    ```  error: cannot format test_asyncgen.py: Cannot parse: 3:45:     return (i * 2 for i in range(n) if await wrap(i))  All done! ? ? ?  1 file failed to reformat.  ```    As per the comment, this is new Python 3.7 syntax, so presumably ""just"" a case of needing to update the parser to reflect the grammar change.";DRMacIver;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5.11.2018 23:54;null;8.11.2018 10:41;open;[];1;594;Add --single-quote option;https://api.github.com/repos/ambv/black/issues/594;https://github.com/ambv/black/issues/594;"[Prettier](https://prettier.io), the most successful ""opinionated code formatter"", probably an inspiration for this project, advertises exactly the same values as this project. In many ways they make even stricter formatting decisions than black.    Yet, even prettier supports a `--single-quote` [option](https://prettier.io/docs/en/options.html#quotes).    Please add a `--single-quote` option to black.    And before immediately closing this ticket, please understand there is a huge need from users to have this option. At least go as far as to search across Github for `pyproject.toml` file's `[tool.black]` and check how many [major projects](https://github.com/Pylons/pyramid/blob/master/pyproject.toml#L6) have to use black with `skip-string-normalization = true`. Or simply listen to your users here.    ";hyperknot;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.11.2018 20:40;null;6.11.2018 20:42;open;[];2;595;Fix indent calculation with tabs when computing prefixes;https://api.github.com/repos/ambv/black/issues/595;https://github.com/ambv/black/pull/595;Closes #262, bug seems to have been introduced in https://github.com/ambv/black/commit/54d707e10a5bf3d8d352c1bcbc7946bb6f3c01d7. Indent widths in lib2to3 for tabs are actually counted as 1, not 4, so consuming the prefix needs to match that.;sciyoshi;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
6.11.2018 21:04;7.11.2018 9:13;7.11.2018 9:13;closed;[];1;596;Comments being left justified, bad when comments are stubbed out code - just leave them alone;https://api.github.com/repos/ambv/black/issues/596;https://github.com/ambv/black/issues/596;Operating system: Black Playground 11/6/2018  Python version: Black Playground 11/6/2018  *Black* version: Black Playground 11/6/2018  Does also happen on master:     Put a file in to try out Black and saw all my commented out code was left justified, making it difficult to bring the code back by un-commenting it.;jvahue;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.11.2018 2:16;7.11.2018 21:30;7.11.2018 21:38;closed;[];1;597;Leave alone blank lines in multiline function calls;https://api.github.com/repos/ambv/black/issues/597;https://github.com/ambv/black/issues/597;"Python version: 3.7.0  *Black* version: master    This is relevant for a lot of machine learning frameworks, which tend to split up function calls into groups of related keyword arguments (e.g. args related to logging in one group, args related to tuning parameters in another, etc.). It's also used for defining neural networks, like    ```python  nn.Sequential(      a,      b,      c,        d,      e,      f,  )  ```  where `a, b, c` and `d, e, f` are part of the same ""layer"".    `black` removes the blank line between these blocks, making code very hard to read. The workaround of putting a blank comment between them is also rather ugly. I think that much like single blank lines outside of function calls, single blank lines inside them should be left alone unless the whole call could fit on a single line.";alok;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.11.2018 16:56;null;7.11.2018 23:25;open;[enhancement, good first issue];2;598;hide stderr of blackd during test runs;https://api.github.com/repos/ambv/black/issues/598;https://github.com/ambv/black/issues/598;"Howdy! Sorry you're having trouble. To expedite your experience,  provide some basics for me:    Operating system: osx 10.12.6  Python version: 3.7.0 (brew installed)  Pipenv version: 2018.10.13 (brew installed)  *Black* version: master  Does also happen on master: yes    Followed the guide in CONTRIBUTING.md, after forking and git cloning, eg:  1. `pipenv install --dev` (I also do `--skip-lock`)  2. `pre-commit install`    For sanity, I also ran `pipenv run python setup.py test` before making any changes, and one test failed:    ```  test_black (tests.test_black.BlackTestCase) ... ok  test_blackd_fast (tests.test_black.BlackTestCase) ... /Users/jimbrannlund/.local/share/virtualenvs/black-KDUbt9_N/lib/python3.7/site-packages/aiohttp/web_urldispatcher.py:114: DeprecationWarning: Bare functions are deprecated, use async ones    ""use async ones"", DeprecationWarning)  ERROR:root:Exception during handling a request  concurrent.futures.process._RemoteTraceback:   """"""  Traceback (most recent call last):    File ""/Users/jimbrannlund/dev/black/black.py"", line 3292, in assert_equivalent      src_ast = ast.parse(src)    File ""/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py"", line 35, in parse      return compile(source, filename, mode, PyCF_ONLY_AST)    File ""<unknown>"", line 1      ur'hello'              ^  SyntaxError: invalid syntax    During handling of the above exception, another exception occurred:    Traceback (most recent call last):    File ""/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/concurrent/futures/process.py"", line 232, in _process_worker      r = call_item.fn(*call_item.args, **call_item.kwargs)    File ""/Users/jimbrannlund/dev/black/black.py"", line 616, in format_file_contents      assert_equivalent(src_contents, dst_contents)    File ""/Users/jimbrannlund/dev/black/black.py"", line 3296, in assert_equivalent      f""cannot use --safe with this file";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7.11.2018 23:21;null;7.11.2018 23:26;open;[];1;599;Format pyi files correctly in the vim plugin;https://api.github.com/repos/ambv/black/issues/599;https://github.com/ambv/black/pull/599;Right now, the vim plugin formats `pyi` files as `py` files. This PR changes the behavior so that if the filename ends in `.pyi`, it adds the flag to the `mode` argument.;bryanforbes;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8.11.2018 11:22;null;8.11.2018 11:22;open;[];0;600;Function empty line spacing with preceding comment;https://api.github.com/repos/ambv/black/issues/600;https://github.com/ambv/black/issues/600;There is an issue with function spacing that has a preceding comment. I did see an existing issue #56 and the docs snippet below but neither quite apply here.    > Black will not put empty lines between function/class definitions and standalone comments that immediately precede the given function/class.    **Input**  ```python  var = 0  # Comment  def func():      pass  ```  **Output**  ```python  var = 0  # Comment  def func():      pass  ```  **Expected**  ```python  var = 0      # This is a func.  def func():      pass  ```    I think that the extra empty lines are expected before a function and by Black not touching it, it does raise a Flake8 warning:         E306 expected 1 blank line before a nested definition, found 0    ## Reference   ### Comment omitted   **Input**  ```python  var = 0  def func():      pass  ```  **Output**  ```python  var = 0      def func():      pass  ```    ### Comments between multiple functions  **Input**  ```python  def func1():      pass  # Comment  def func2():      pass  ```    **Output**  ```python  def func1():      pass      # Comment  def func2():      pass  ```        Operating system: Linux  Python version: 3.6  *Black* version: 18.9b0  Does also happen on master: yes;cas--;null;null;null;null;null;null;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
